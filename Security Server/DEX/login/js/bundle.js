(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _ , $ */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxUserUtil = require('dxcore/js/userUtil.js'),
    dxFilter = require('dxcore/data/layer2/js/filter.js');

/*
 * Defines a special initialization routine on data which is used to set up delphix Schema specific filers.
 * In particular, all filters which can not be handled by the standard uberFilter are implemented here.
 */
module.exports._initDelphixFilters = function _initDelphixFilters(context) {
    /*
     * Filter functions for types that cannot be (fully) autogenerated
     */
    function actionFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};
        if (_.isEmpty(qParams)) {
            return resultHandler(context._filters.INCLUDE);
        }
        if (!!qParams.rootActionOnly && !!model.get('parentAction')) {
            return resultHandler(context._filters.EXCLUDE);
        }

        var filteredByStateAndUser = context._filters._checkSameProps(['state', 'user'], qParams, model);
        if (filteredByStateAndUser === context._filters.EXCLUDE) {
            return resultHandler(context._filters.EXCLUDE);
        }
        if (!qParams.parentAction) {
            return resultHandler(filteredByStateAndUser);
        }
        // For the parent action, need to go up the hierarchy
        function checkParentAction(currentModel) {
            currentModel.once('ready', function () {
                var parentActionRef = currentModel.get('parentAction');
                if (!parentActionRef) {
                    resultHandler(context._filters.EXCLUDE);
                } else if (parentActionRef === qParams.parentAction) {
                    resultHandler(context._filters.INCLUDE);
                } else {
                    var parentModel = context.getServerModel(parentActionRef, 'Action');
                    checkParentAction(parentModel);
                }
            });
            currentModel.once('error', function () {
                // If the model or parent does not exist, context._filters.EXCLUDE it
                resultHandler(context._filters.EXCLUDE);
            });
        }
        checkParentAction(model);
    }

    function alertFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};
        if (qParams.searchText) {
            var fieldsToSearch = ['eventTitle', 'eventDescription', 'eventResponse', 'eventAction', 'targetName'];
            var searchText = qParams.searchText.toLowerCase();
            var searchMatches = _.any(fieldsToSearch, function (field) {
                return _.isString(model.get(field)) && model.get(field).toLowerCase().indexOf(searchText) !== -1;
            });
            if (!searchMatches) {
                return resultHandler(context._filters.EXCLUDE);
            }
        }

        uberFilter(collection, model, resultHandler, ['searchText']);
    }

    function authorizationFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};
        if (qParams.effective) {
            return resultHandler(context._filters.UNKNOWN);
        }

        uberFilter(collection, model, resultHandler);
    }

    function containerFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};
        if (qParams.validForSecureReplication) {
            /*
             * The server is checking masked flag and datalineage and other information that are not available on the
             * client side. So we just mark the status of the collection on the client dirty.
             */
            resultHandler(context._filters.UNKNOWN);
            return;
        }

        var res = context._filters._checkSameProps(['provisionContainer', 'group'], qParams, model);
        if (res !== context._filters.INCLUDE || !(qParams.noJSDataSource || qParams.noJSContainerDataSource)) {
            resultHandler(res);
            return;
        }

        var dataSources = context.getServerCollection('JSDataSource');
        var dataSourcesPromise = dataSources.$$list({
            container: model.get('reference')
        });
        dataSourcesPromise.then(function (dataSources) {
            if (dataSources.length === 0) {
                resultHandler(context._filters.INCLUDE);
                return;
            } else if (qParams.noJSContainerDataSource) {
                var isInUseByContainer = dataSources.some(function (dataSource) {
                    var dataLayout = dataSource.get('dataLayout');
                    return dataLayout.indexOf('JSDataContainer') === 0;
                });
                if (isInUseByContainer) {
                    resultHandler(context._filters.EXCLUDE);
                } else {
                    resultHandler(context._filters.INCLUDE);
                }
                return;
            }
            resultHandler(context._filters.EXCLUDE);
        });
    }

    function hostFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};
        if (!qParams.environment) {
            return resultHandler(context._filters.INCLUDE);
        }

        var env = context.getServerModel(qParams.environment, 'SourceEnvironment');
        env.once('ready', function () {
            if (env.instanceOf('HostEnvironment')) {
                var result = env.get('host') === model.get('reference') ? context._filters.INCLUDE : context._filters.EXCLUDE;
                resultHandler(result);
            } else {
                var nodeType = env.instanceOf('OracleCluster') ? 'OracleClusterNode' : 'WindowsClusterNode';
                var nodes = context.getServerCollection(nodeType);
                nodes.$$list({
                    cluster: env.get('reference')
                }, {
                    success: function success() {
                        var anyMatches = nodes.any(function (node) {
                            return node.get('host') === model.get('reference');
                        });
                        var result = anyMatches ? context._filters.INCLUDE : context._filters.EXCLUDE;
                        resultHandler(result);
                    },
                    error: function error() {
                        resultHandler(context._filters.EXCLUDE);
                    }
                });
            }
        });
        env.once('error', function () {
            resultHandler(context._filters.EXCLUDE);
        });
    }

    /*
     * A bookmark belongs to a template if it has that value as a query parameter.  It belongs to a container if either
     * its template or container property matches the query parameter.
     */
    function jsBookmarkFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};
        if (_.isEmpty(qParams)) {
            resultHandler(context._filters.INCLUDE);
            return;
        }

        if (_.has(qParams, 'template')) {
            if (model.get('bookmarkType') === 'DATA_TEMPLATE' && qParams.template === model.get('template')) {
                resultHandler(context._filters.INCLUDE);
            } else {
                resultHandler(context._filters.EXCLUDE);
            }
            return;
        } else if (_.has(qParams, 'container')) {
            if (qParams.container === undefined) {
                resultHandler(context._filters.INCLUDE);
                return;
            } else if (qParams.container === model.get('container')) {
                resultHandler(context._filters.INCLUDE);
                return;
            } else {
                var container = context.getServerModel(qParams.container, 'JSDataContainer');
                container.once('ready', function () {
                    if (container.get('template') === model.get('template') && model.get('shared')) {
                        resultHandler(context._filters.INCLUDE);
                    } else {
                        resultHandler(context._filters.EXCLUDE);
                    }
                });

                container.once('error', function () {
                    resultHandler(context._filters.EXCLUDE);
                });
            }
        } else {
            dxUtil.fail('Unsupported query parameters: ' + JSON.stringify(qParams));
            return;
        }
    }

    function jsDataContainerFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};

        if (_.has(qParams, 'owner')) {
            var jetStreamUserRolePromise = dxUserUtil.getJetStreamUser();

            var authorizationsPromise = context.getServerCollection('Authorization').$$list({
                target: model.get('reference')
            });

            var roleAndAuthPromise = $.when(jetStreamUserRolePromise, authorizationsPromise);

            roleAndAuthPromise.then(function (jetStreamUserRole, auths) {
                var jetStreamUserRoleReference = jetStreamUserRole.get('reference');

                var item = _.find(auths.models, function (a) {
                    return a.get('role') === jetStreamUserRoleReference && a.get('user') === qParams.owner;
                });

                if (item) {
                    resultHandler(context._filters.INCLUDE);
                } else {
                    resultHandler(context._filters.EXCLUDE);
                }
            });
        } else {
            uberFilter(collection, model, resultHandler);
        }
    }

    function jsOperationFilter(collection, model, resultHandler) {
        function excludeByDataLayoutAndBranch(qParams, model) {
            if (_.has(qParams, 'dataLayout')) {
                return context._filters._checkSameProps(['dataLayout'], qParams, model) === context._filters.EXCLUDE;
            } else if (_.has(qParams, 'branch')) {
                return context._filters._checkSameProps(['branch'], qParams, model) === context._filters.EXCLUDE;
            } else {
                dxUtil.fail('JSOperation query parameters specifies missing required dataLayout or branch');
            }
        }

        var qParams = collection.getQueryParameters() || {};

        if (_.has(qParams, 'dataTime')) {
            if (excludeByDataLayoutAndBranch(qParams, model)) {
                resultHandler(context._filters.EXCLUDE);
                return;
            }

            /*
             * We don't really know if this event would have matched the query parameters, as we can't tell
             * how the beforeCount and afterCount are reflected in the current collection. As a result we
             * return UNKNOWN, which will trigger a dirty event. Caller can subscribe to the dirty event
             * and reissue the query.
             */
            resultHandler(context._filters.UNKNOWN);
        } else if (_.has(qParams, 'dataStartTime') && _.has(qParams, 'dataEndTime')) {
            if (excludeByDataLayoutAndBranch(qParams, model)) {
                resultHandler(context._filters.EXCLUDE);
                return;
            }

            var dataTime = model.get('dataTime');

            /*
             * An operation currently in progress has a dataTime of null, which really means 'now'. We simulate
             * this by using the startTime of the operation.
             */
            if (dxUtil.isNone(dataTime)) {
                dataTime = model.get('startTime');
            }

            if (qParams.dataStartTime <= dataTime && dataTime <= qParams.dataEndTime) {
                resultHandler(context._filters.INCLUDE);
            } else {
                resultHandler(context._filters.EXCLUDE);
            }
        } else {
            resultHandler(context._filters._checkSameProps(['dataLayout', 'branch'], qParams, model));
        }
    }

    function msSqlAvailabilityGroupListenerFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};

        /*
         * MSSqlAvailabilityGroupListener's do not have references, so there is no way to check if they belong to an
         * availability group.
         */
        if (qParams.availabilitygroup) {
            resultHandler(context._filters.UNKNOWN);
        } else {
            resultHandler(context._filters.INCLUDE);
        }
    }

    function msSqlClusterInstanceFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};

        /*
         * MSSqlClusterInstance's do not have references, so there is no way to check if they belong to an availability
         * group.
         */
        if (qParams.availabilitygroup) {
            resultHandler(context._filters.UNKNOWN);
        } else {
            resultHandler(context._filters.INCLUDE);
        }
    }

    function sourceFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};

        // query parameters for Source are mutually exclusive, meaning we can only $$list by one at a time
        if (_.keys(qParams).length > 1) {
            dxUtil.fail('You cannot provide more than one query parameter for $$list for Source.');
        }

        uberFilter(collection, model, resultHandler);
    }

    function timeflowSnapshotFilter(collection, model, resultHandler) {
        var qParams = collection.getQueryParameters() || {};

        if (qParams.traverseTimeflows === true) {
            dxUtil.fail('traverseTimeflows query parameter is not yet supported by the filter.');
        }

        uberFilter(collection, model, resultHandler);
    }

    function jobFilter(collection, model, resultHandler) {
        uberFilter(collection, model, resultHandler, 'addEvents'); // ignore addEvents
    }

    /*
     * Do the real work.
     */
    context = context || this;
    dxFilter._initFilters(context);
    context._filters = context._filters || {};
    var genericFilter = context._filters._genericFilter;
    var uberFilter = context._filters._uberFilter;

    _.extend(context._filters, {
        Action: actionFilter,
        Alert: alertFilter,
        AlertProfile: genericFilter,
        Toolkit: genericFilter,
        Authorization: authorizationFilter,
        Container: containerFilter,
        CurrentConsumerCapacityData: genericFilter,
        CurrentGroupCapacityData: genericFilter,
        DatabaseTemplate: genericFilter,
        EnvironmentUser: uberFilter,
        Fault: uberFilter,
        FaultEffect: uberFilter,
        Group: genericFilter,
        HistoricalConsumerCapacityData: uberFilter,
        HistoricalGroupCapacityData: uberFilter,
        HistoricalSystemCapacityData: uberFilter,
        Host: hostFilter,
        HostPrivilegeElevationProfile: genericFilter,
        Job: jobFilter,
        JSBookmark: jsBookmarkFilter,
        JSBranch: uberFilter,
        JSDailyOperationDuration: uberFilter,
        JSDataContainer: jsDataContainerFilter,
        JSDataSource: uberFilter,
        JSDataTemplate: genericFilter,
        JSOperation: jsOperationFilter,
        JSWeeklyOperationCount: uberFilter,
        LdapServer: genericFilter,
        MSSqlAvailabilityGroupListener: msSqlAvailabilityGroupListenerFilter,
        MSSqlClusterInstance: msSqlClusterInstanceFilter,
        Namespace: genericFilter,
        NetworkInterface: genericFilter,
        NetworkLatencyTest: genericFilter,
        NetworkRoute: genericFilter,
        NetworkThroughputTest: genericFilter,
        Notification: genericFilter,
        OperationTemplate: genericFilter,
        OracleClusterNode: uberFilter,
        OracleListener: uberFilter,
        OraclePDBConfig: uberFilter,
        Permission: genericFilter,
        ReplicationSpec: genericFilter,
        Role: genericFilter,
        SNMPManager: genericFilter,
        Source: sourceFilter,
        SourceConfig: uberFilter,
        SourceEnvironment: uberFilter,
        SourceRepository: uberFilter,
        SnapshotCapacityData: uberFilter,
        Statistic: genericFilter,
        StatisticSlice: genericFilter,
        StorageDevice: genericFilter,
        SystemVersion: genericFilter,
        Timeflow: uberFilter,
        TimeflowBookmark: uberFilter,
        TimeflowSnapshot: timeflowSnapshotFilter,
        TypedObject: genericFilter,
        User: uberFilter,
        WindowsClusterNode: uberFilter,
        X509Certificate: genericFilter
    });
};

},{"dxcore/data/layer2/js/filter.js":9,"dxcore/js/userUtil.js":22,"dxcore/js/util.js":23}],2:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _, Backbone, ko */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxScreen = require('dxcore/js/screen.js');

/*
 * Defines a new proxy, using the specified mapping. The mapping must have one of the following forms:
 * {
 *    attributeName: 'attribute.path.to.desired.attribute',
 *    ...
 * }
 * or
 * {
 *    attributeName: {
 *       path: 'attribute.path.to.desired.attribute'[,
 *       setter: function(name, value) {...}]
 *    ...
 * }
 *
 * The path may include "$name", where that is a reference to a delphix backbone model, where there is a backbone
 * attribute named "name" potentially available.
 *
 * If a setter is provided, then when the set() method is called on the proxy, the provided function will be called.
 * This allows one to respond to changes input by the user without directly modifying the underlying objects (which
 * should be being treated as read-only objects.
 *
 * The leaf attribute in the chain may be a model or a non-model value.  Each intermediate segment, however, must be
 * a Backbone model. If one is not, then the proxy will not traverse beyond it, until it is changed to a Backbone model.
 *
 * A proxy sets up a set of attribute change listeners, one for each model on the chain. Any time any segment in the
 * path changes, the proxy will re-evaluate following segments in the path.
 *
 * A single segment in the path can change at any time, and may take on null, undefined, or other values at any
 * time. If a path can not be traversed then the proxy's attribute is set to undefined.
 *
 * Memory Management:
 * In order to avoid a proxy from being leaked (due to listeners on the models referencing it), a proxy will schedule
 * itself to be "destroyed" when the screen changes. Destruction means that it releases all of its attribute listeners
 * and removes its knowledge of the properties it was passed.  However, when the screen changes, if the proxy itself
 * has listeners listening to it, then it will reschedule itself to be destroyed on the next screen change. Thus, as
 * long as you are are listening for events on the proxy, it will stay around.
 */
module.exports.newProxy = function newProxy(sourceMapping) {
    // The model this is currently looking up properties from
    var baseModel;

    // the proxy's attributes and their associated attribute-paths
    var proxyAttrToAttrPaths = {};

    // Current values of the proxy attributes
    var proxyAttrValues = {};

    // Functions used to remove listeners watching each attribute path
    var proxyAttrsRemovers = {};

    /*
     * Examines the next link in the attribute path.  If it is a backbone model, set up listeners for it, otherwise
     * the object is the end of the path, so cache the value in the proxyAttrValues.
     *
     * anObject: The object at the next link in the path. Can be anything including null or undefined.
     * attrPath: The remainder of the attribute path that should be examined. May be an empty array.
     * proxyAttr: The attribute this is currently concerned with.
     */
    function examineNextPathSegment(proxy, anObject, attrPath, proxyAttr) {
        /*
         * If any of these conditions are met, we've reached the current end of the attribute path.  So, store the
         * object as the current value of the attribute and fire a change event.
         */
        if (_.isEmpty(attrPath) || _.isUndefined(anObject) || _.isNull(anObject) || !(anObject instanceof Backbone.Model)) {
            if (!_.isEmpty(attrPath)) {
                anObject = undefined;
            }

            if (proxyAttrValues[proxyAttr] !== anObject) {
                proxyAttrValues[proxyAttr] = anObject;
                proxy.trigger('change:' + proxyAttr);
            }

            return function () {/* do nothing, as there are no listeners to remove */};
        }

        /*
         * As we now know we have a backbone model, prepare to start listen to it. Note that we do some special-casing
         * since the next attribute in the attribute path might be an ordinary backbone property, or it might be one
         * of our custom referenced-object accessors.
         */
        var modelAttr = attrPath[0];
        var basicAttr = modelAttr.charAt(0) === '$' ? modelAttr.substring(1) : modelAttr;

        return listenToModel(proxy, anObject, basicAttr, modelAttr, attrPath.slice(1), proxyAttr);
    }

    /*
     * Set up a listener on the specified model, and then start the same process on models further down the
     * attribute chain.
     *
     * This returns a function which, when called, will remove the listener that this created.
     *
     * model: The model that this will be listening to. This is always a Backbone model
     * baseAttr: The attribute that this will be listening to
     * fullAttr: The full name of the attribute (same as baseAttr, unless this starts with $)
     * attrSubPath: An array of strings that are the remaining attributes along the attribute path
     * proxyAttr: The proxy attribute that all of this is related to.
     */
    function listenToModel(proxy, model, baseAttr, fullAttr, attrSubPath, proxyAttr) {
        var subPathRemover;
        var readyRemover;

        /*
         * Examine the next path segment. If it results in a changed value, fire a change event
         */
        function examineNextPathAndTriggerIfChange(newModel, before) {
            subPathRemover = examineNextPathSegment(proxy, newModel, attrSubPath, proxyAttr);
            if (before !== proxyAttrValues[proxyAttr]) {
                proxy.trigger('change');
            }
        }
        /*
         * Listener for this model+modelAttribute. When the model attribute changes, this will remove any previously
         * existing listeners, and then build new listeners for sub-models in the attribute path
         */
        function changeListener(changedModel) {
            subPathRemover();

            var newModel = changedModel.get(fullAttr);
            if (isDelphixModel(newModel)) {
                var readyHandler = function readyHandler() {
                    examineNextPathAndTriggerIfChange(newModel, proxyAttrValues[proxyAttr]);
                };
                newModel.once('ready', readyHandler);
                readyRemover = function () {
                    newModel.off('ready', readyHandler);
                };
            } else {
                examineNextPathAndTriggerIfChange(newModel, proxyAttrValues[proxyAttr]);
            }
        }

        /*
         * Routine used to remove the listener that will have been set up just below, as well as any sub-listeners
         */
        function changeListenerRemover() {
            model.off('change:' + baseAttr, changeListener);
            if (subPathRemover) {
                subPathRemover();
            }
            if (readyRemover) {
                readyRemover();
            }
        }

        var newModel = model.get(fullAttr);
        if (isDelphixModel(newModel)) {
            var readyHandler = function readyHandler() {
                examineNextPathAndTriggerIfChange(newModel, proxyAttrValues[proxyAttr]);
            };
            newModel.once('ready', readyHandler);
            readyRemover = function () {
                newModel.off('ready', readyHandler);
            };
        } else {
            subPathRemover = examineNextPathSegment(proxy, newModel, attrSubPath, proxyAttr);
        }

        model.on('change:' + baseAttr, changeListener);

        return changeListenerRemover;
    }

    /*
     * Iterate over each of the proxy attribute --> attribute paths mapping values, and build a chain of listeners
     * for each.
     */
    function listenToBaseModel(proxy, newModel) {
        function processModel() {
            processBaseModel(proxy, baseModel);
        }
        // clean up any remaining listeners
        _.each(proxyAttrsRemovers, function (remover) {
            remover();
        });

        if (isDelphixModel(baseModel)) {
            baseModel.off('ready', processModel);
        }

        baseModel = newModel;

        if (isDelphixModel(baseModel)) {
            baseModel.once('ready', processModel);
        } else {
            processModel();
        }
    }

    /*
     * Iterate over all the proxy attributes, set up listeners and fire change event if appropriate.
     */
    function processBaseModel(proxy, baseModel) {
        var changes = false;

        _.each(proxyAttrToAttrPaths, function (attrPath, proxyAttr) {
            var before = proxyAttrValues[proxyAttr];
            proxyAttrsRemovers[proxyAttr] = examineNextPathSegment(proxy, baseModel, attrPath.path, proxyAttr);
            if (before !== proxyAttrValues[proxyAttr]) {
                changes = true;
            }
        });

        if (changes) {
            proxy.trigger('change');
        }
    }

    /*
     * Return true if the object is a data model
     */
    function isDelphixModel(value) {
        return value instanceof Backbone.Model && value._dxSchema;
    }

    /*
     * Try to add this to the screen system for automatic cleanup.
     */
    function registerForDestruction() {
        dxScreen.registerCleanupCallback(function () {
            destroy();
        });
    }

    /*
     * If no one is listening for events from this proxy, then destroy the listers it has on its models, and
     * reset all of the cached values
     */
    function destroy() {
        var nonZeroEventCount = 0;
        _.each(proxyModel._events, function (eventInfo) {
            if (eventInfo.length !== 0) {
                nonZeroEventCount++;
            }
        });
        if (nonZeroEventCount) {
            registerForDestruction();
            return;
        }

        _.each(proxyAttrsRemovers, function (remover) {
            remover();
        });
        proxyAttrsRemovers = {};
        proxyAttrValues = {};
    }

    /*
     * Sets the specified backbone model (or null or undefined) to be the new base model for this proxy. This will
     * recompute all values for each of the attributes in the mapping, sending any appropriate change events.
     */
    function setModel(model) {
        if (dxUtil.isNone(model) || model instanceof Backbone.Model) {
            listenToBaseModel(this, model);
            return;
        }

        throw dxUtil.fail('models must be an extension of Backbone.Model');
    }

    function getModel() {
        return baseModel;
    }

    /*
     * Return the current value of the proxy's attribute.
     */
    function get(attrName) {
        return proxyAttrValues[attrName];
    }

    /*
     * Calls the setter for the associated attribute.  If there is no setter, log an error.  Fire a change event
     * so clients will be able to automatically change their display to show the old value.
     */
    function set(attrName, value) {
        if (_.isObject(attrName)) {
            _.each(attrName, function (individualValue, key) {
                this.set(key, individualValue);
            }, this);
            return;
        }

        if (!proxyAttrToAttrPaths[attrName].setter) {
            dxUtil.fail('Tried to call a setter on ' + attrName + ' but no setter defined');
        } else {
            proxyAttrToAttrPaths[attrName].setter(attrName, value);
        }

        this.trigger('change:' + attrName);
        this.trigger('change');
    }

    /*
     * Given a proxy, return an object where each member is a read-only observable that maps to the corresponding
     * property in the proxy. Changes to the observable are not propagated to the proxy or underlying model.
     */
    function toObservable() {
        var self = this;

        var result = {};
        _.each(proxyAttrValues, function (proxyValue, proxyAttr) {
            result[proxyAttr] = ko.observable(proxyValue);
            self.on('change:' + proxyAttr, function () {
                result[proxyAttr](self.get(proxyAttr));
            });
        });

        return result;
    }

    // Initialize our copy of the mapping and our cache of attribute values
    _.each(sourceMapping, function (attrPath, proxyAttr) {
        var newAttrPath;

        if (_.isObject(attrPath)) {
            if (!_.isString(attrPath.path) || _.has(attrPath, 'setter') && !_.isFunction(attrPath.setter)) {
                dxUtil.fail('Attribute path for ' + proxyAttr + ' must have a path property that is a string');
            }
            newAttrPath = {
                path: attrPath.path,
                setter: attrPath.setter
            };
        } else if (_.isString(attrPath)) {
            if (attrPath === '') {
                dxUtil.fail('Attribute path for ' + proxyAttr + ' is empty. This is not allowed');
            }
            newAttrPath = { path: attrPath };
        } else {
            dxUtil.fail('Attribute path for ' + proxyAttr + ' must be a string or an object');
        }

        newAttrPath.path = newAttrPath.path.split('.');
        proxyAttrToAttrPaths[proxyAttr] = newAttrPath;
        proxyAttrValues[proxyAttr] = undefined;
    });

    var proxyModel = {
        setModel: setModel,
        getModel: getModel,
        set: set,
        get: get,
        destroy: destroy,
        toObservable: toObservable
    };
    _.extend(proxyModel, Backbone.Events);
    registerForDestruction();

    return proxyModel;
};

},{"dxcore/js/screen.js":19,"dxcore/js/util.js":23}],3:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $, _, Backbone, XRegExp */

'use strict';

/*
 * Misc data-related utilities.  Generally not needed unless you are bypassing data in some fashion.
 */
var MAX_NAME_LENGTH = 256;

var dxUtil = require('dxcore/js/util.js'),
    dxLocale = require('dxcore/js/locale.js');

/*
 * Take an APIError and return a string of validation errors containing html that can be displayed in an error alert
 */
function processErrorResultDetails(apiError) {
    if (!(apiError instanceof Backbone.Model) || apiError.get('type') !== 'APIError') {
        dxUtil.fail('processErrorResultDetails expects an APIError model as an argument.');
    }

    apiError = apiError.toJSON();
    apiError.details = apiError.details ? apiError.details : '';

    if (typeof apiError.details === 'string') {
        return apiError.details;
    }

    var resultList = [];
    _.each(apiError.details, function (subError, field) {
        buildValidationErrorList(field, subError, resultList);
    });

    var elem = $('<ul>');
    _.each(resultList, function (error) {
        $('<li>').text(error.field + ': ' + error.details).appendTo(elem);
    });

    /*
     * .html() gets the inner html of the element in question, and we want to include 'elem' in the output string,
     * so append to a dummy div
     */
    return $('<div>').append(elem).html();
}

/*
 * Helper method to build a list of validation errors in DFS order. This expects to either get an APIError object, or
 * an object whose keys are property names and values are themselves more of the same (either an APIError or an object
 * with keys as prop names).
 */
function buildValidationErrorList(fieldStr, error, errorList) {
    var apiErrorKeys = _.intersection(_.keys(error), ['id', 'details', 'action']);

    // The 'id' property tells us this is an APIError, rather than a hash of nested validation errors
    // Also, check to see if the object has the primary properties of an APIError, and if so consider it an APIError
    if (error.type === 'APIError' || apiErrorKeys.length === 3) {
        errorList.push({
            action: error.action,
            details: error.details,
            field: fieldStr
        });
    } else {
        _.each(error, function (subError, subField) {
            buildValidationErrorList(fieldStr + '.' + subField, subError, errorList);
        });
    }
}

/*
 * Allow unicode with the exception of the "Other" category which includes (control characters,
 * format characters, private use characters, surrogate characters, and unassigned characters) and %'`
 */
var badCharsRegex = XRegExp('[\\p{C}%\'`]+');

/*
 * Validates that a name matches the constraints our server puts on object names.  This returns an object with these
 * properties:
 *    valid: true|false   If the provided name is valid
 *    tooLong: true|false If the provided value exceeds our length limits
 *    badChars: String    The set of characters found that are invalid. Useful for showing in error messages.
 *
 * Note that this is being done 'by hand' because the schemas do not presently provide this information to clients.
 * Consult the following resources to quickly figure out if this is still valid:
 *     appliance/server/cms/src/java/com/delphix/appliance/server/json/validation/impl/ObjectNameFormatConstraint.java
 *     http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
 */
function validateName(name) {
    var tooLong = false,
        badChars = '';

    if (!dxUtil.isNone(name)) {
        if (name.length > MAX_NAME_LENGTH) {
            tooLong = true;
        }

        var result = XRegExp.exec(name, badCharsRegex);

        _.each(result, function (value) {
            if (badChars.indexOf(value) === -1) badChars += value;
        });
    }

    return {
        valid: !tooLong && badChars === '',
        tooLong: tooLong,
        badChars: badChars
    };
}

/*
 * Validates that a name matches the constraints our server puts on object names. This returns undefined if the name
 * is valid, an localized error message otherwise.
 */
function getNameValidationErrorIfAny(name) {
    if (_.isUndefined(name) || name.trim() === '') {
        return dxLocale.gls('dx.core.name_empty.msg');
    }

    // Check some invalid name problems (too long, unsupported characters)
    var result = module.exports.validateName(name);
    if (!result.valid) {
        if (result.tooLong) {
            return dxLocale.gls('dx.core.name_too_long.msg', MAX_NAME_LENGTH);
        } else if (result.badChars) {
            return dxLocale.gls('dx.core.name_invalidChars.msg', result.badChars);
        } else {
            dxUtil.fail('Name validator has returned a new error condition. Must cope with that here.');
        }
    }

    return undefined;
}

module.exports = {
    processErrorResultDetails: processErrorResultDetails,
    validateName: validateName,
    getNameValidationErrorIfAny: getNameValidationErrorIfAny
};

},{"dxcore/js/locale.js":17,"dxcore/js/util.js":23}],4:[function(require,module,exports){
/*
 * Copyright (c) 2015 by Delphix. All rights reserved.
 */

/* global delphixSchema*/

'use strict';

var setupData = require('dxcore/data/layer3/js/api.js').setupDataSystem,
    setupDelphixFilters = require('dxcore/data/delphix/js/filter.js')._initDelphixFilters;

module.exports.initialize = function () {
    setupData(delphixSchema, module.exports);
    setupDelphixFilters(module.exports);
};

},{"dxcore/data/delphix/js/filter.js":1,"dxcore/data/layer3/js/api.js":11}],5:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _ */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxConstants = require('dxcore/js/constants.js');

/*
 * Do top-level processing of each schema. This involves:
 *  1) If the schema has no name, replace it with a name, based on the schemaKey, that can be used as a Javascript
 *     identifier.
 *  2) Replace the extends schemaKey (if present) with the name of the parent schema.
 *  3) Add a parentSchema property with a reference to the parent schema, if any.
 *  4) Add the name of the closest ancestor schema type that had a root property.
 *  5) Inherit the parent's root property, if this itself doesn't have one.
 */
function processSchema(schema, schemaKey, sourceSchemas, newSchemas, preserveUnneeded) {
    /*
     * Most schemas have a name. However, not all do.  We must nevertheless expose those schemas as they have root
     * operations on them. Thus, we convert the key into a form that can be used to identify them.
     */
    schema.name = schemaKeyToTypeName(schemaKey, sourceSchemas);

    // If this schema has already been processed (see recursive call, below), return it
    if (newSchemas[schema.name]) {
        return newSchemas[schema.name];
    }

    newSchemas[schema.name] = schema;

    if (schema.root) {
        schema.rootTypeName = schema.name;
    }

    // Process the parent schema, if any. This assumes all extends schemas have just a $ref property.
    var parentSchema = schema['extends'];
    if (parentSchema) {
        schema.parentSchema = processSchema(sourceSchemas[parentSchema.$ref], parentSchema.$ref, sourceSchemas, newSchemas);
        parentSchema.$ref = schemaKeyToTypeName(parentSchema.$ref, sourceSchemas);
        parentSchema = schema.parentSchema;

        if (!schema.rootTypeName) {
            schema.rootTypeName = parentSchema.rootTypeName;
        }

        schema.root = schema.root || parentSchema.root;
    }

    if (!preserveUnneeded) {
        delete schema.description;
    }

    processProperties(schema, parentSchema, sourceSchemas, preserveUnneeded);
    processOperations(schema, parentSchema, sourceSchemas);

    return schema;
}

/*
 * The schemaKeys we get are often of the form /some-name.json. Some of the characters that show up there can not be
 * used as a Javascript identifier, and so we modify the above into a Javascript compatible form. For example the
 * above would become some_name.
 */
function schemaKeyToTypeName(schemaKey, schemas) {
    if (!schemas[schemaKey]) {
        dxUtil.fail('Could not find a schema entry for ' + schemaKey);
    }

    if (schemas[schemaKey].name) {
        return schemas[schemaKey].name;
    }

    var newString = schemaKey.replace(/\.json$/, '').replace(/-/g, '_').replace(/\//g, '');

    return newString;
}

/*
 * Process the properties. As far as this is concerned, properties are one of:
 * A simple primitive value
 *     propertyName: {
 *         type: string|number|integer|boolean|null,
 *         [default: value]
 *     }
 *  or a simple object
 *     propertyName: {
 *         type: object
 *     }
 *  or an 'embedded object'
 *     propertyName: {
 *         type: object,
 *         $ref: schemaKey
 *     }
 *  or a 'referenced object'
 *     propertyName: {
 *         type: string,
 *         format: objectReference,
 *         [referenceTo: schemaKey]
 *     }
 *  or an array
 *     propertyName: {
 *         type: array,
 *         [items: {
 *             type: string|number|integer|boolean|null|object,
 *             [$ref: schemaKey]
 *         }]
 *     }
 *  note: $ref may only present if the type is object.
 * Also the type can be an array of any of the things above.
 *
 * Any one of these may also have these values:
 *         [create: required|optional|readonly,]
 *         [update: required|optional|readonly,]
 *         [required: true|false]
 * Note that there are many other validation related properties, but they are not altered by this processing.
 *
 * This does two things:
 *  1) provides 'property inheritance' by copying the parent's properties (if any) and replacing them as appropriate
 *     with this schema's properties.
 *  2) Replaces any references to schema types with the type name of the target types.
 */
function processProperties(schema, parentSchema, sourceSchemas, preserveUnneeded) {
    if (!schema.properties && !(parentSchema && parentSchema.properties)) {
        return;
    }

    var parentProps = parentSchema && parentSchema.properties ? _.clone(parentSchema.properties) : {};
    var propKeys = _.keys(schema.properties || {});
    schema.properties = _.extend(schema.properties || {}, _.omit(parentProps, propKeys));

    // Modify any of the schemas own properties
    _.each(propKeys, function (propName) {
        var propData = schema.properties[propName];

        convertTypeReference(propData, sourceSchemas);

        if (!preserveUnneeded) {
            delete propData.description;
        }
    });
}

/*
 * Process all operations. these look like the following:
 *     operations: {
 *         operationName: { ... details ... },
 *         ...
 *     }
 * or
 *     rootOperations: {
 *         operationName: { ... details ... },
 *         ...
 *     }
 * or one of the following
 *     create: { ... details ... }
 *     read: { ... details ... }
 *     list: { ... details ... }
 *     update: { ... details ... }
 *     delete: { ... details ... }
 *
 * This makes the following changes to these schemas:
 *  1) Schemas that are extensions of a root schema will inherit their parents' operations
 *  2) Standard operations update, delete and read are propogated down to child objects. List and create are not
 */
function processOperations(schema, parentSchema, sourceSchemas) {
    // Do some schema validation
    var schemaOps = _.pick(schema, ['operations', 'rootOperations', 'create', 'read', 'list', 'update', 'delete']);
    if (!schema.root && !_.isEmpty(schemaOps)) {
        dxUtil.fail('Found ' + _.keys(schemaOps) + ' on a non-root schema.');
    }

    if (schema.operations && parentSchema && parentSchema.operations) {
        dxUtil.fail('Both ' + parentSchema.name + ' and ' + schema.name + ' have operations. This isn\'t supported.');
    }

    var parentOps = parentSchema && parentSchema.operations ? parentSchema.operations : {};
    var opKeys = schema.operations ? _.keys(schema.operations) : [];
    var myOperations = _.extend(schema.operations || {}, _.omit(parentOps, opKeys));

    if (!_.isEmpty(myOperations)) {
        schema.operations = myOperations;

        _.each(opKeys, function (opName) {
            processOperation(schema.operations[opName], opName, sourceSchemas);
        });
    }

    _.each(schema.rootOperations, function (opInfo, opName) {
        processOperation(opInfo, opName, sourceSchemas);
    });

    var pSchema = parentSchema || {};
    _.each(['create', 'update', 'read', 'list', 'delete'], function (opName) {
        var opDef = schema[opName];
        if (!dxUtil.isNone(opDef)) {
            if (opName === 'create' || opName === 'update') {
                opDef.validateAs = opDef.validateAs || opName;
            }

            processOperation(opDef, opName, sourceSchemas);
        }

        if (opName !== 'create' && opName !== 'list') {
            schema[opName] = opDef || pSchema[opName];
        }
    });
}

/*
 * Process each operation. This generalizes across standard, object and root operations. These are expected to be of
 * the form:
 *     operationName: {
 *         payload: {
 *             [type: 'object',
 *             $ref: url-to-type]
 *         }
 *         [validateAs: create|update]
 *         [required: true|false]
 *         [return: ...]
 *     }
 * or
 *     operationName: {
 *         parameters: {
 *             ...
 *         }
 *         [return: ...]
 *     }
 * or the following, which means a GET with no parameters
 *     operationName: {
 *     }
 * Any one of those may have a 'sub-operation' of the same form (though, the last, with neither payload nor
 * parameters defined will be recognized, simply because it is ambiguous with other entries).
 *         subOpName: {
 *             payload: {...},
 *             [validateAs: create|update]
 *             [return: ...]
 *          }
 * or
 *         subOpName: {
 *             parameters: {...},
 *             [return: ...]
 *          }
 * The parameters are expected to be one of the following forms:
 *     paramName: {
 *         type: typeName,
 *         [format: formatValue],
 *         [enum: [values...]],
 *         [default: defaultValue]
 *         [required: true|false]
 *     }
 * or
 *     paramName: {
 *         type: 'string',
 *         format: 'objectReference',
 *         referenceTo: schemaKey
 *         [required: true|false]
 *     }
 * While, the return value is expected to be one of the following:
 *     return : {
 *        type: typeName,
 *         [format: formatValue]
 *     }
 * or
 *     return : {
 *        type: typeName,
 *         [$ref: schemaKey]
 *     }
 * or
 *     return : {
 *        type: 'array',
 *         [items: {
 *             $ref: schemaKey
 *         }]
 *     }
 * or
 *     return : {
 *        type: 'array',
 *         [items: {
 *             referenceTo: schemaKey
 *         }]
 *     }
 * These will be modified in these ways:
 *  1) $ref and referenceTo's will be set to type name of the relevant schemas
 *  2) Any sub-operation is extracted from its default location, and put into a sub-object called dxOperations
 *  3) in the case of a 'missing' parameters, an empty one will be inserted.
 *  4) Any $ref in the return value or the return.items value will be replaced with the type name of the schema.
 * Thus, we get:
 * {
 *     payload: {
 *         ...payload properties...
 *         $ref: <related schema>
 *     }
 *     validateAs: create|update,
 *     [dxOperations: {
 *         // sub-operations
 *     }]
 * }
 * or
 * {
 *     parameters: {
 *         ... parameters info, with any referenceTo's set to the actual related schema ...
 *     },
 *     [dxOperations: {
 *         // sub-operations
 *     }]
 * }
 */
function processOperation(opDef, opName, sourceSchemas) {
    if (opDef.payload) {
        if (opDef.parameters) {
            dxUtil.fail('Found both a payload and a parameters for the operation ' + opName + '.');
        }
        if (opDef.payload.$ref) {
            opDef.payload.$ref = schemaKeyToTypeName(opDef.payload.$ref, sourceSchemas);
        }
    } else {
        opDef.parameters = opDef.parameters || {};

        _.each(opDef.parameters, function (value) {
            if (value.referenceTo) {
                value.referenceTo = schemaKeyToTypeName(value.referenceTo, sourceSchemas);
            }
        });
    }

    if (opDef['return']) {
        convertTypeReference(opDef['return'], sourceSchemas);
    }

    // Move any sub-operations into a sub-object
    _.each(opDef, function (value, key) {
        if (key === 'payload' || key === 'parameters') {
            return;
        }
        if (value.payload || value.parameters) {
            opDef.dxOperations = opDef.dxOperations || {};
            opDef.dxOperations[key] = processOperation(value, opName + '.' + key, sourceSchemas);
            delete opDef[key];
        }
    });

    return opDef;
}

/*
 * Given a type reference (a property type definition, or a return value definition), convert any references to
 * schema types from schemaKey format to the actual type name.
 */
function convertTypeReference(propData, sourceSchemas) {
    function convertReferences(type, propData) {
        if (type === 'array' && _.has(propData, 'items')) {
            if (_.has(propData.items, '$ref')) {
                propData.items.$ref = schemaKeyToTypeName(propData.items.$ref, sourceSchemas);
            } else if (_.has(propData.items, 'referenceTo')) {
                propData.items.referenceTo = schemaKeyToTypeName(propData.items.referenceTo, sourceSchemas);
            }
        }

        if (type === 'string' && propData.format === 'objectReference' && propData.referenceTo) {
            propData.referenceTo = schemaKeyToTypeName(propData.referenceTo, sourceSchemas);
        }

        if (type === 'object' && propData.$ref) {
            propData.$ref = schemaKeyToTypeName(propData.$ref, sourceSchemas);
        }
    }

    if (_.isArray(propData.type)) {
        _.each(propData.type, function (typeItem) {
            convertReferences(typeItem, propData);
        });
    } else {
        convertReferences(propData.type, propData);
    }
}

/*
 * Walk through each list operation, and add a dxFilterMode property to each. The values are:
 *    none: There are no query parameters, no filter is needed
 *    uber: Every parameter has a mapsTo property, so the uberFilter can be used
 *    custom: Not enough information. A custom filter will be needed.
 */
function markListOperations(schemas) {
    _.each(schemas, function (schema) {
        if (schema.list) {
            if (_.isEmpty(schema.list.parameters)) {
                schema.list.dxFilterMode = dxConstants.LIST_TYPES.NONE;
            } else {
                var missingMapsTo = false;
                _.any(schema.list.parameters, function (param) {
                    if (!param.mapsTo) {
                        missingMapsTo = true;
                        return true;
                    }
                });
                schema.list.dxFilterMode = missingMapsTo ? dxConstants.LIST_TYPES.CUSTOM : dxConstants.LIST_TYPES.UBER;
            }
        }
    });
}

/*
 * Given a set of schemas, modify them so that they are more easily consumable by other layers of the data system.
 *
 * Specifically, this expects the schemas to come in the form:
 * {
 *     'schemaKey': {
 *        [name: typeName,]
 *        [singleton: true|false,]
 *        [extends: { $ref: 'schemaKey' },]
 *        [root: 'url-fragment',]
 *        [properties: {...},]
 *        [create: {...},]
 *        [read: {...},]
 *        [list: {...},]
 *        [update: {...},]
 *        [delete: {...},]
 *        [operations: {...},]
 *        [rootOperations: {...}]
 *     },
 *     ...
 * }
 * Each schema may include other properties, but this will ignore them.
 *
 * The return value from this routine is a new version of the schemas, with modifications as discussed in each section
 * below.
 *
 * schemas:               The set of schemas to be prepared.  This is the only parameter that must be provided.
 * copySchemas:           If truthy, this will make a copy of the provided schemas before making changes to them.
 *                        Otherwise the original schema objects will be altered.
 * preserveUnneeded:      If truthy, properties like 'description' that aren't needed will not be deleted.
 */
function prepareSchemas(schemas, copySchemas, preserveUnneeded) {
    var newSchemas = {};

    if (!_.isObject(schemas)) {
        dxUtil.fail('Must provide a schemas object.');
    }

    // Always copy the schemas at this time, as it caused model-generator to be unhappy.
    if (copySchemas || true) {
        schemas = dxUtil.deepClone(schemas);
    }

    _.each(schemas, function (value, key) {
        processSchema(value, key, schemas, newSchemas, preserveUnneeded);
    });

    /*
     * Finally, add a flag to each list operation to determine whether it can be generically filtered, or whether
     * it needs help
     */
    markListOperations(newSchemas);

    return newSchemas;
}

/*
 * Given a set of prepared schemas, this will find enums that are properties of a type and enums that are defined as
 * parameters of list, object, and root operations.  The expected input format of the prepared schemas is as follows:
 *
 *  {
 *      typeName: {
 *          [properties: {
 *              propertyName: {
 *                  enum: [value, ...]
 *              },
 *              arrayPropertyName: {
 *                  items: {
 *                      enum: [value, ...]
 *                  }
 *              }
 *          },]
 *          [list: {
 *              parameters: {
 *                  parameterName: {
 *                      enum: [value, ...]
 *                  }
 *              }
 *          },]
 *          [rootOperations|operations: {
 *              operationName: {
 *                  parameters: {...}
 *              }
 *          }]
 *      }
 *  }
 *
 * No specific types, properties or parameters are required, and excess properties will be ignored.  The output is an
 * object where each type and its enums can be accessed as properties:
 *
 *  {
 *      typeName: {
 *          (property|operation)Name: {
 *              value: value
 *              ...
 *          }
 *      }
 *  }
 *
 */
function prepareEnums(schemas) {
    var enums = {};

    if (!_.isObject(schemas)) {
        dxUtil.fail('Must provide a set of prepared schemas.');
    }

    function processEnum(type, name, definition) {
        var enumType = enums[type] = enums[type] || {};
        var enumProp = enumType[name] = enumType[name] || {};
        _.each(definition['enum'], function (enumVal) {
            enumProp[enumVal] = enumVal;
        });
    }

    function processParameters(type, opDef) {
        _.each(opDef.parameters, function (paramDef, paramName) {
            if (paramDef['enum']) {
                processEnum(type, paramName, paramDef);
            }
        });
    }

    _.each(schemas, function (schema, type) {
        _.each(schema.properties, function (propDef, propName) {
            if (propDef['enum']) {
                processEnum(type, propName, propDef);
                // Array of enums
            } else if (propDef.items && propDef.items['enum']) {
                    processEnum(type, propName, propDef.items);
                }
        });

        // Collect enums from list, root operation, and object operation parameters
        if (schema.list) {
            processParameters(type, schema.list);
        }
        _.each(schema.rootOperations, function (rootOpDef) {
            processParameters(type, rootOpDef);
        });
        _.each(schema.operations, function (opDef) {
            processParameters(type, opDef);
        });
    });

    return enums;
}

module.exports = {
    _prepareSchemas: prepareSchemas,
    _prepareEnums: prepareEnums
};

},{"dxcore/js/constants.js":15,"dxcore/js/util.js":23}],6:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _, Backbone */

'use strict';

var dxUtil = require('dxcore/js/util.js');

function dumpEventListners(eventLadenObject) {
    var functionNameRegEx = /.*function *([^ \(]*) *\(/;
    _.each(eventLadenObject._events, function (listenerArray, eventName) {
        var anonymousCount = 0;
        var callbackNames = _.reduce(listenerArray, function (memo, item) {
            if (item.callback) {
                var functionString = item.callback.toString();
                var functionName = functionString.match(functionNameRegEx);
                if (functionName && functionName[1] !== '') {
                    memo.push(functionName[1]);
                } else {
                    anonymousCount++;
                }
            }
            return memo;
        }, []);

        // Don't show the internal callbacks used by this cache to mange the models. These never affect prune().
        if (callbackNames.length === 1 && (eventName === 'badReference' && callbackNames[0] === 'handle404' || eventName === 'change' && callbackNames[0] === 'updateCollections')) {
            return;
        }
        var suffix = callbackNames.length === 0 ? '' : '. ' + callbackNames.join(',');
        if (anonymousCount > 0) {
            suffix += ' (' + anonymousCount + ' anonymous)';
        }
        dxUtil.info('   ' + eventName + ' : ' + listenerArray.length + ' callbacks' + suffix);
    });
}

/*
 * A simple cache of subscribers (collections or notification listeners).  Note that these are stored by the type that
 * the list operation for the specified type returns, which in some cases is different than the specified type.
 * This is a private type, so it does no checking of arguments.
 */
function ModelSubscriberStore() {
    var modelSubscribersByType = {};

    function forEachSubscription(functionToApply) {
        _.each(modelSubscribersByType, function (subscriber) {
            _.each(subscriber, functionToApply);
        });
    }

    function add(subscriber) {
        var baseType = subscriber._dxInfo.baseType;
        modelSubscribersByType[baseType] = modelSubscribersByType[baseType] || [];

        if (modelSubscribersByType[baseType].indexOf(subscriber) === -1) {
            modelSubscribersByType[baseType].push(subscriber);
        }
    }

    function remove(subscriber) {
        var baseType = subscriber._dxInfo.baseType;
        var index = modelSubscribersByType[baseType].indexOf(subscriber);
        if (index !== -1) {
            if (subscriber instanceof Backbone.Collection) {
                subscriber.clear();
            }
            modelSubscribersByType[baseType].splice(index, 1);

            if (_.isEmpty(modelSubscribersByType[baseType])) {
                delete modelSubscribersByType[baseType];
            }
        }
    }

    function hasType(typeName) {
        return !!modelSubscribersByType[typeName];
    }

    function getAllOfType(typeName) {
        return modelSubscribersByType[typeName] || [];
    }

    /*
     * Forcibly empty all collections in the store, and then remove all subscribers
     */
    function reset() {
        var toRemove = [];

        // accumulate the items to remove
        forEachSubscription(function (subscriber) {
            toRemove.push(subscriber);
        });

        // now remove them (removing while accumulating can mess up the loops)
        _.each(toRemove, remove);
    }

    /*
     * Remove all subscribers that have no more listeners
     */
    function prune() {
        var toRemove = [];

        forEachSubscription(function (subscriber) {
            if (subscriber instanceof Backbone.Collection) {
                if (_.isEmpty(subscriber._events)) {
                    toRemove.push(subscriber);
                }
            } else if (!subscriber.inUse) {
                // it is a creation Listener
                toRemove.push(subscriber);
            }
        });

        _.each(toRemove, remove);
    }

    /*
     * Returns:
     *    true: If the store has no subscribers
     *    false: if the store has one or more subscribers
     */
    function isEmpty() {
        return _.isEmpty(modelSubscribersByType);
    }

    /*
     * Write out the subscribers.
     */
    function dump() {
        dxUtil.info('SUBSCRIBERS');
        dxUtil.info('===========');
        dxUtil.info(modelSubscribersByType);
    }

    function dumpText() {
        dxUtil.info('SUBSCRIBERS');
        dxUtil.info('===========');
        if (_.isEmpty(modelSubscribersByType)) {
            dxUtil.info('None.');
        }
        var types = _.keys(modelSubscribersByType);
        _.each(types.sort(), function (typeName) {
            dxUtil.info(typeName);
            dxUtil.info('-------------');
            _.each(modelSubscribersByType[typeName], function (subscriber) {
                if (subscriber instanceof Backbone.Collection) {
                    var collection = subscriber;
                    var references = collection.reduce(function (memo, item) {
                        if (item.id) {
                            memo.push(item.id);
                        }
                        return memo;
                    }, []);

                    var suffix = references.length === 0 ? '' : '. IDs: ' + references.join(', ');
                    dxUtil.info('   ' + collection.length + ' model collection' + suffix);
                    dumpEventListners(collection);
                } else {
                    var qp = subscriber.getQueryParameters();
                    dxUtil.info('Notification Listener with query params: ' + (qp ? JSON.stringify(qp) : 'None'));
                }
            });
        });
    }

    return {
        _modelSubscribers: modelSubscribersByType,
        add: add,
        remove: remove,
        hasType: hasType,
        getAllOfType: getAllOfType,
        reset: reset,
        dump: dump,
        prune: prune,
        isEmpty: isEmpty,
        dumpText: dumpText
    };
}

/*
 * A simple cache of singletons.  This is a private type, so it does no checking of arguments.
 */
function SingletonStore() {
    var singletons = {};

    function add(singleton) {
        singletons[singleton.get('type')] = singleton;
    }

    function get(typeName) {
        return singletons[typeName];
    }

    function remove(singleton) {
        if (!_.isUndefined(singletons[singleton.get('type')])) {
            delete singletons[singleton.get('type')];
        }
    }

    function hasType(typeName) {
        return !!singletons[typeName];
    }

    /*
     * Forcibly remove all singletons
     */
    function reset() {
        _.each(_.keys(singletons), function (typeName) {
            delete singletons[typeName];
        });
    }

    /*
     * Remove all singletons that have no more listeners
     */
    function prune() {
        var toRemove = _.filter(singletons, function (singleton) {
            return _.isEmpty(singleton._events);
        });

        _.each(toRemove, function (model) {
            delete singletons[model.get('type')];
        });
    }

    /*
     * Returns:
     *    true: If the store has no singletons
     *    false: if the store has one or more singletons
     */
    function isEmpty() {
        return _.isEmpty(singletons);
    }

    /*
     * Write out the singletons.
     */
    function dump() {
        dxUtil.info('SINGLETONS');
        dxUtil.info('==========');
        dxUtil.info(singletons);
    }

    function dumpText() {
        dxUtil.info('SINGLETONS');
        dxUtil.info('==========');
        if (_.isEmpty(singletons)) {
            dxUtil.info('None.');
        }
        _.each(singletons, function (singleton, typeName) {
            dxUtil.info(typeName);
            dumpEventListners(singleton);
        });
    }

    return {
        _singletons: singletons,
        add: add,
        get: get,
        remove: remove,
        hasType: hasType,
        reset: reset,
        dump: dump,
        prune: prune,
        isEmpty: isEmpty,
        dumpText: dumpText
    };
}

/*
 * A simple cache of models.  These are organized by root type, then reference. This is a private type, so it does no
 * signifianct checking of arguments.
 */
function ModelStore(context) {
    var modelsByTypeThenRef = {};

    function forEachModel(functionToApply) {
        _.each(modelsByTypeThenRef, function (models) {
            _.each(models, functionToApply);
        });
    }

    function add(model) {
        var rootType = context._getRootType(model.get('type'));
        var reference = model.get('reference');
        modelsByTypeThenRef[rootType] = modelsByTypeThenRef[rootType] || {};

        if (dxUtil.isNone(reference)) {
            dxUtil.fail('Can not cache a model with no reference (type is: ' + model.get('type') + ').');
        }

        modelsByTypeThenRef[rootType][reference] = model;
    }

    // typeName is optional
    function get(reference, typeName) {
        if (_.isUndefined(typeName)) {
            var result;
            _.find(modelsByTypeThenRef, function (models) {
                return _.find(models, function (model, modelReference) {
                    if (modelReference === reference) {
                        result = model;
                        return true;
                    }
                });
            });
            return result;
        } else {
            return modelsByTypeThenRef[typeName] ? modelsByTypeThenRef[typeName][reference] : undefined;
        }
    }

    function remove(model) {
        var rootType = context._getRootType(model.get('type'));
        var reference = model.get('reference');
        modelsByTypeThenRef[rootType] = modelsByTypeThenRef[rootType] || [];
        model.off(undefined, undefined, context);

        delete modelsByTypeThenRef[rootType][reference];

        if (_.isEmpty(modelsByTypeThenRef[rootType])) {
            delete modelsByTypeThenRef[rootType];
        }
    }

    function hasModel(reference) {
        return !!get(reference);
    }

    /*
     * Forcibly remove all models
     */
    function reset() {
        var toRemove = [];

        forEachModel(function (model) {
            toRemove.push(model);
        });

        _.each(toRemove, remove);
    }

    /*
     * Remove all models that have no more listeners
     */
    function prune() {
        var toRemove = {};

        forEachModel(function (model, reference) {
            var events = model._events || {};
            /*
             * Our model creation system currently sets up listeners on badReference.  If a model has
             * only one listener for that event, we want to ignore it when we consider whether the model has any
             * listeners that should prevent it from being pruned. (we don't mind pruning something that only has
             * listeners set up by the model creation system)
             */
            var hasCachingListeners = events.badReference && events.badReference.length === 1;
            var listeners = hasCachingListeners ? _.omit(events, ['badReference']) : events;

            if (_.isEmpty(listeners)) {
                toRemove[reference] = model;
            }
        });

        _.each(toRemove, remove);
    }

    /*
     * Returns:
     *    true: If the store has no models
     *    false: if the store has one or more models
     */
    function isEmpty() {
        return _.isEmpty(modelsByTypeThenRef);
    }

    /*
     * Write out the models.
     */
    function dump() {
        dxUtil.info('SERVER MODELS');
        dxUtil.info('=============');
        dxUtil.info(modelsByTypeThenRef);
    }

    function dumpText() {
        dxUtil.info('SERVER MODELS');
        dxUtil.info('=============');
        if (_.isEmpty(modelsByTypeThenRef)) {
            dxUtil.info('None.');
        }
        var types = _.keys(modelsByTypeThenRef);
        _.each(types.sort(), function (typeName) {
            dxUtil.info(typeName);
            dxUtil.info('-------------');
            var references = _.keys(modelsByTypeThenRef[typeName]);
            _.each(references.sort(), function (reference) {
                var model = modelsByTypeThenRef[typeName][reference];
                dxUtil.info(reference);
                dumpEventListners(model);
            });
        });
    }

    return {
        _models: modelsByTypeThenRef,
        add: add,
        get: get,
        remove: remove,
        hasModel: hasModel,
        reset: reset,
        dump: dump,
        prune: prune,
        isEmpty: isEmpty,
        dumpText: dumpText
    };
}

/*
 * This portion of the data system provides a cache of models and subscribers, collections and notification listeners.
 * It ensures that models are unique (that is, there is only one instance for a particular reference), it makes sure
 * all collections contain the models that they legitimately could contain, and subscribers are notified of new
 * models.
 *
 * There are four primary uses:
 *   - Someone retrieves data from the server. It would call getCachedModelFromProperties() which will create or update
 *     a model using those properties, and return the model to the caller.
 *   - Someone wants to retrieve a particular model. It calls getCachedModel(), which returns the requested model (and
 *     does a fetch on it, if necessary)
 *   - Someone wants to get a singleton: so it calls getCachedSingleton() which returns the unique singleton instance.
 *   - Someone wants a collection or notification subscribers of a particular type. They create the data structure
 *     and call _modelSubscribersStore.add to make sure the subscribers gets notified of changes and collections
 *     updated.
 *
 * This entire cache system is 'private' to the data system, and should not be called from outside.
 *
 * Unless reset() is called, at this time models and collections are never discarded.
 *
 * As with other parts of the data system, this takes a 'context' object, and attaches a _cache object to that one,
 * where private (to the data system) caching routines reside. The intent here is to make sure that if needed multiple
 * data systems can co-exist.
 */
module.exports._initCache = function _initCache(context) {
    /*
     * Return a singleton of the specified type. If it doesn't already exist, a new model is created, cached, and
     * returned.  If 'update' is true, then this will fetch new data for the model.
     * typeName:   The type of the singleton
     * options:    JSON object with these optional properties:
     *               update: {true|false}  Will cause an update (fetch) on the model
     *               success: A function to call when the model is ready
     *               error: A function to call when an error occurred during a fetch
     */
    function getCachedSingleton(typeName, options) {
        if (!_.isString(typeName)) {
            dxUtil.fail('A type name must be passed to get the singleton.');
        }
        options = options || {};
        var model;
        var isNew;
        if (context._singletonStore.hasType(typeName)) {
            model = context._singletonStore.get(typeName);
            if (options.success) {
                options.success(model);
            }
        } else {
            var schema = assertTypeAndGetModelSchema(typeName);

            if (!schema.singleton) {
                dxUtil.fail(typeName + ' is not a singleton.');
            }

            model = context._newServerModel(typeName);
            context._singletonStore.add(model);
            isNew = true;
        }

        if (options.update || isNew) {
            var fetchOpts = options;
            if (isNew) {
                fetchOpts = {
                    success: options.success,
                    error: function error(result) {
                        context._singletonStore.remove(model);
                        if (options.error) {
                            options.error(result);
                        } else if (!options.suppressDefaultErrorHandler) {
                            context.reportErrorResult(result);
                        }
                    }
                };
            }
            model._dxFetch(fetchOpts);
        }

        return model;
    }

    /*
     * Given a set of properties, either update an existing model with the same reference as in the properties
     * object, or create a new server model, populate it with these properties, cache it and return it.
     *
     * properties: A JSON object containing properties that can be set() on a DSB model
     * options:    Backbone options
     */
    function getCachedModelFromProperties(properties, options) {
        var model;

        if (!_.isObject(properties) || !_.isString(properties.type)) {
            dxUtil.fail('Must be called with an object that has a type property that is a string value.');
        }

        if (!context._modelConstructors[properties.type]) {
            dxUtil.fail('Don\'t know how to create a model of type ' + properties.type + '.');
        }

        // Not all types have a reference property. Those that do not are not cachable. Assume this is a client model
        if (!isTypeCachable(properties.type) || dxUtil.isNone(properties.reference)) {
            model = context._newClientModel(properties.type);
            model._dxSet(properties);
            return model;
        }

        var rootType = context._getRootType(properties.type);
        model = context._modelStore.get(properties.reference, rootType);
        if (_.isUndefined(model)) {
            model = makeModel(properties, properties.type, rootType);
            model._dxMakeReady();
            addModel(model, rootType, options);
        } else {
            model._dxSet(properties);
        }

        return model;
    }

    /*
     * Returns a cached model with the specified reference.  If the model isn't in the cache, this will return
     * a new model, which it will also fetch. If the update argument is true, it will be
     * fetched regardless of whether it is new or old.
     *
     * reference:  The reference of the model to retrieve
     * typeName:   The type of the model @@@@ why isn't this the root type?
     * options:    JSON object with these optional properties:
     *               update: {true|false}  Will cause an update (fetch) on the model
     *               cacheOnlyIfNeeded: {true|false} Add to the cache (and return) only if there are already
     *                  collections that would use it.
     *               suppressDefaultErrorHandler: {true|false} Do not trigger the default error handler on dxFetch
     */
    function getCachedModel(reference, typeName, options) {
        if (!_.isString(reference) || !_.isString(typeName)) {
            dxUtil.fail('A reference and a type must be passed to get the model.');
        }
        options = options || {};

        var isNew = false;
        var rootType = context._getRootType(typeName);
        var mustCache = !options.cacheOnlyIfNeeded;
        var haveSubscriptionWhichNeedsModel = context._modelSubscribersStore.getAllOfType(rootType).length !== 0;
        var addToCache = mustCache || haveSubscriptionWhichNeedsModel;

        var model = context._modelStore.get(reference, rootType);
        if (_.isUndefined(model) && addToCache) {
            model = makeModel({ reference: reference }, typeName, rootType);
            isNew = true;
        }

        if (model && (options.update || isNew)) {
            model._dxFetch({
                success: function success() {
                    if (isNew) {
                        addModel(model, rootType);
                    }
                },
                error: function error(result) {
                    if (isNew) {
                        context._modelStore.remove(model);
                    }
                    if (!options || !options.suppressDefaultErrorHandler) {
                        context.reportErrorResult(result);
                    }
                }
            });
        }

        return model;
    }

    /*
     * Returns true if the cache contains a model with the specified reference
     */
    function containsCachedModel(reference, typeName) {
        if (!_.isString(reference) || !_.isString(typeName)) {
            dxUtil.fail('A reference and a type must be passed to check on the model.');
        }

        return !_.isUndefined(context._modelStore.get(reference, context._getRootType(typeName)));
    }

    /*
     * Deletes the model. This means removing it from the cache, as well as from any
     * collections that contain it, and clears the model's properties.
     * If the dontTriggerDelete flag is not set, this will also trigger a 'delete' event on the model.
     */
    function deleteCachedModel(reference, typeName, dontTriggerDelete) {
        if (!_.isString(reference) || !_.isString(typeName)) {
            dxUtil.fail('A reference and a type must be passed to delete a model.');
        }

        var rootType = context._getRootType(typeName);
        var doomed = context._modelStore.get(reference, rootType);
        if (!doomed) {
            return;
        }

        _.each(context._modelSubscribersStore.getAllOfType(rootType), function (subscriber) {
            if (subscriber instanceof Backbone.Collection) {
                subscriber._dxRemoveModel(doomed);
            }
        });

        if (!dontTriggerDelete) {
            doomed.trigger('delete', doomed);
        }
        doomed.off(null, null, context);
        context._modelStore.remove(doomed);
        doomed._dxClear();
        doomed._dxDeleted = true;
    }

    /*
     * Remove all references we have to both singletons and server models.
     */
    function resetCache() {
        context._modelSubscribersStore.reset();
        context._singletonStore.reset();
        context._modelStore.reset();
    }

    /*
     * Dump the types (for singletons) and references (for server models) as text for all objects in the cache.
     */
    function dumpCacheAsText() {
        context._modelSubscribersStore.dumpText();
        dxUtil.info('');

        context._singletonStore.dumpText();
        dxUtil.info('');

        context._modelStore.dumpText();
    }

    /*
     * Dump the internal singletons and model data structures.  This is usable on most browsers.
     */
    function dumpCache() {
        context._modelSubscribersStore.dump();
        dxUtil.info('');

        context._singletonStore.dump();
        dxUtil.info('');

        context._modelStore.dump();
        dxUtil.info('');
    }

    function prune() {
        context._modelSubscribersStore.prune();
        context._singletonStore.prune();
        context._modelStore.prune();
    }

    function isEmpty() {
        return context._modelSubscribersStore.isEmpty() && context._singletonStore.isEmpty() && context._modelStore.isEmpty();
    }

    /*
     * Creates a model, sticks it in the cache, and sets up to cope with badReferences
     */
    function makeModel(properties, typeName, rootType) {
        var model = context._newServerModel(typeName);
        model._dxSet(properties);
        context._modelStore.add(model);
        model.on('badReference', function handle404() {
            deleteCachedModel(properties.reference, rootType, true);
        }, context);

        return model;
    }

    /*
     * Adds the specified model to the collections
     */
    function addModel(model, rootType, options) {
        notifySubscriptionsOfModel(model, rootType, options);
    }

    /*
     * Indicates that a model may have changed, and the cache should recheck whether the model should be added or
     * removed from any collections.
     */
    function modelMayHaveChanged(model, rootType) {
        if (!(model instanceof Backbone.Model)) {
            dxUtil.fail('Must pass a Backbone Model.');
        }
        if (!_.isString(rootType)) {
            dxUtil.fail('rootType must be a string.');
        }

        notifySubscriptionsOfModelChanged(model, rootType);
    }

    /*
     * Adds the specified model to all relevant subscribers (collections or notification listeners).
     */
    function notifySubscriptionsOfModel(model, rootType, options) {
        _.each(context._modelSubscribersStore.getAllOfType(rootType), function (subscriber) {
            subscriber._dxAddOrRemove(model, options);
        });
    }

    /*
     * Notifies collections that the model has changed.
     */
    function notifySubscriptionsOfModelChanged(model, rootType, options) {
        _.each(context._modelSubscribersStore.getAllOfType(rootType), function (subscriber) {
            if (subscriber instanceof Backbone.Collection) {
                subscriber._dxAddOrRemove(model, options);
            }
        });
    }

    /*
     * Asserts that the type is a valid model type, and returns its schema.
     */
    function assertTypeAndGetModelSchema(typeName) {
        var ModelConstructor = context._modelConstructors[typeName];

        if (!ModelConstructor) {
            dxUtil.fail(typeName + ' is not a known type name.');
        }

        return ModelConstructor.prototype._dxSchema;
    }

    /*
     * Examines the type, and returns a truthy value if it is cachable
     */
    function isTypeCachable(type) {
        var Constructor = context._modelConstructors[type];
        if (!Constructor) {
            return false;
        }
        var typeDef = Constructor.prototype._dxSchema;
        var propDefs = typeDef.properties || {};

        return !!propDefs.reference;
    }

    context = context || this;
    context._modelSubscribersStore = new ModelSubscriberStore();
    context._singletonStore = new SingletonStore();
    context._modelStore = new ModelStore(context);

    /*
     * Make all of our public routines available.
     */
    context._cache = {
        _ModelSubscriberStore: ModelSubscriberStore,
        _SingletonStore: SingletonStore,
        _ModelStore: ModelStore,
        getCachedSingleton: getCachedSingleton,
        getCachedModelFromProperties: getCachedModelFromProperties,
        getCachedModel: getCachedModel,
        modelMayHaveChanged: modelMayHaveChanged,
        deleteCachedModel: deleteCachedModel,
        containsCachedModel: containsCachedModel,
        reset: resetCache,
        dumpText: dumpCacheAsText,
        dump: dumpCache,
        prune: prune,
        isEmpty: isEmpty,
        isTypeCachable: isTypeCachable
    };
};

},{"dxcore/js/util.js":23}],7:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global $, _, Backbone */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxConstants = require('dxcore/js/constants.js');

/*
 * This takes a set of schemas (modified by _prepareSchemas), and creates a set of Backbone Collection constructor
 * functions (and, by implication, functionality upon the collections generated by those functions). These will be
 * used by the 'level3' API's to provide final collections to consumers of the data layer.
 *
 * See the comment for level2-models for a list of the specialized terminology used here (e.g. DSB).
 *
 * CONSTRUCTOR FUNCTIONS
 * The collections created by these constructor functions contain groups of DSB Models that all share a common parent
 * type.  These collections can only have their contents changed by way of $$list() operations and the notification
 * system. Unlike DSB models, there are no 'Client' collections.  To have a fully-alterable collection of models,
 * use an ordinary Backbone Collection.
 *
 * EVENTS
 * ready : readyHandler(collection)
 * If you want to know if a collection is ready to be used (has retrieved at least one set of results via $$list()),
 * use the 'ready' event, which is unique to DSB collections.
 * Ready indicates that the collection has retrieved an initial set of models.  Unlike ordinary events, if a ready
 * handler is assigned to a collection that is already ready, that handler (and no others) will be triggered
 * immediately. Ready handlers receive the collection as their first (and only) argument.
 *
 * dirty : dirtyHandler(collection)
 * Indicates that the collection may be out of sync with the server and should be re-$$list()'ed
 *
 * POPULATION
 * Server collections are populated in two ways:
 *   1) A call to $$list() will fill the collection with the current set of models from the server
 *   2) The notification system, if enabled, may cause models to be added and removed from the collection at any time.
 * The operation of $$list() is straightforward.  Notifications are a little less clear.  As the notification system
 * learns of object changes, it will inform the caching system about the changes.  That, in turn will cause the
 * caching system to try to update any collections, adding and removing those models to collections as needed.
 * The decision of whether a model should be added will depend on the query parameters that currently govern the
 * collection (the ones last passed to $$list(), if any).  In some cases, a collection may have a paged set of results,
 * and at that point it can be difficult to determine whether the model should be added to the collection.
 * The filter system (level2-filter) provides per-type filters. It is their responsibility to determine how the model
 * should be dealt with. If it can't determine (as in the case with paging), the collection will trigger a 'dirty'
 * event, which the client of the collection can use to decide how to handle this case. If setAutoPageRefresh(true) has
 * been called on the collection, then in these circumstances, in addition to firing the 'dirty' event, the collection
 * will automatically re-call $$list() with the original query parameters. In this case, the original success and error
 * handlers will be called again after the list operation returns.
 *
 * OPERATIONS
 * The collections created by these constructor functions have these similarities and differences compared to the
 * standard Backbone collections.
 *
 * Standard Backbone properties (none of these should be changed)
 *     models     : -- : The set of models in the collection. Don't access directly. Use at() instead.
 *     length     :    : Standard behavior.
 *
 * Standard Backbone functions
 *     model      : -- : Must not use. Collections can not create their own models.
 *     toJSON     :    : Standard behavior.
 *     Underscore :    : Standard behavior. These are the 'underscore' functions can all be applied to collections.
 *     add        : -- : Do not use. Use $$list() instead.
 *     remove     : -- : Do not use. Use $$list() instead.
 *     reset      : -- : Do not use. Use $$list() instead.
 *     set        : -- : Do not use. Use $$list() instead.
 *     get        :    : Standard behavior.
 *     at         :    : Standard behavior.
 *     push       : -- : Do not use. Use $$list() instead.
 *     pop        : -- : Do not use. Use $$list() instead.
 *     unshift    : -- : Do not use. Use $$list() instead.
 *     shift      : -- : Do not use. Use $$list() instead.
 *     slice      :    : Standard behavior.
 *     comparator :    : Standard behavior.
 *     sort       :    : Standard behavior.
 *     pluck      :    : Standard behavior.
 *     where      :    : Standard behavior.
 *     findWhere  :    : Standard behavior.
 *     url        : -- : Internal use. Don't use.
 *     parse      : -- : Internal use. Don't use. Handles return values from the Delphix Engine
 *     clone      :    : Standard behavior. However, the returned collection is an ordinary Backbone Collection.
 *     fetch      : -- : Do not use. Use $$list() instead.
 *     create     : -- : Do not use. DSB Models have more complex creation semantics. use rootOps..$$create().
 *
 * DSB Collection functions
 *     $$list             :    : Populates the collection with a selection of models from the server.
 *     getQueryParameters :    : Returns the query parameters used to populate this collection via $$list
 *     clear              :    : Removes all models from the collection, empties any query parameters, and blocks any
 *                               models from being auto-added until another $$list is issued
 *
 * Private to dxCore Data
 *     context._collectionConstructors : The set of collection constructor functions
 *     context._newServerCollection    : Creates a new Server Collection
 *
 * Parameters:
 *     schemas: The set of schemas this should generate constructors from.
 *     context: The object to put the resulting constructors (_collectionConstructors) on. If not specified, puts them
 *              on 'this'.
 */
module.exports._generateCollectionConstructors = function _generateCollectionConstructors(schemas, context) {
    var LISTINGMODE_IDLE = 0;
    var LISTINGMODE_LISTING = 1;

    /*
     * ========================================
     * Collection functions
     * ========================================
     */

    /*
     * Backbone defines this as: Bind a callback function to an object. The callback will be invoked whenever the event
     * is fired.
     *
     * For DSB collections, we provide standard behavior for this, but do some special processing if someone is
     * listening for the 'ready' event. In that case, if we have done a $$list() successfully, then we trigger the
     * ready event immediately.
     */
    function dxOn(name, callback, context) {
        Backbone.Events.on.call(this, name, callback, context);
        if (name === 'ready' && this._dxIsReady) {
            this.trigger('ready', this);
        } else if (name === 'error' && this._dxIsErrored) {
            this.trigger('error', this);
        }
    }

    /*
     * Backbone defines this as: [This] performs a 'smart' update of the collection with the passed list of models.
     *
     * In general, we do not allow this to be called, since server models are supposed to be read only. However,
     * in some cases, internally, we need to add models to the collection, and wish to partake of the functionality
     * already defined by Backbone. So, if this is called with { _dxAllowSetPassthrough:true }, it will call
     * Backbone.Collection.set() normally.
     *
     * This is not simply a dxAdd function, since we need to support calls from within backbone back to model.set()
     * that may have been triggered by other actions we have taken.
     */
    function dxSet(models, options) {
        options = options || {};
        if (!options._dxAllowSetPassthrough) {
            operationNotAllowed();
        }

        assertModelsCompatible(models, this);
        return Backbone.Collection.prototype.set.call(this, models, _.extend(options, {
            merge: false,
            remove: false
        }));
    }

    /*
     * Backbone defines this as: parse is called by Backbone whenever a collection's models are returned by the server,
     * in fetch. The function is passed the raw response object, and should return the array of model attributes to be
     * added to the collection. The default implementation is a no-op, simply passing through the JSON response.
     * Override this if you need to work with a preexisting API, or better namespace your responses.
     *
     * This expects the response to always have a type attribute. If it is an ErrorResult, it gets reported through the
     * standard error handler. If it is a ListResult, we return just the result array. Otherwise we throw an error.
     */
    function dxParse(response) {
        if (!response || !response.type) {
            dxUtil.fail('Got a response without a type.');
        } else if (response.type !== 'ListResult') {
            dxUtil.fail('Got an unexpected type of response (' + response.type + ') in parse().');
        }

        return response.result;
    }

    /*
     * Entirely block the standard Backbone fetch() routine. We want users to call $$list(), as that has a more
     * constrained API, better matches the api we're providing for operations and rootOperations, and, more directly
     * maps to our schemas.
     */
    function dxFetch() {
        dxUtil.fail('Do not call fetch() directly. Instead, call $$list().');
    }

    /*
     * Entirely block the standard Backbone create() routine. Creation is more complex for DSB models, and so should be
     * done through the $$create operations.
     */
    function dxCreate() {
        dxUtil.fail('Do not call create() directly. Instead, call rootOps.' + this._dxInfo.baseType + '.$$create().');
    }

    /*
     * Removes all models from the collection, but leaves it 'live'.  This is used for testing purposes.
     */
    function dxEmpty() {
        Backbone.Collection.prototype.remove.call(this, this.models, { silent: true });
    }

    /*
     * Removes all models from the collection (not silently), removes the query parameters,
     * if any, and marks the collection as not ready, which means it must have another $$list() call in order to get
     * new models
     */
    function dxClear() {
        this._dxIsReady = false;
        this._queryParameters = undefined;
        Backbone.Collection.prototype.remove.call(this, this.models, { silent: true });
        this.trigger('reset', this);
    }

    /*
     * Given a model, this will either add it to the collection, if it should be in the collection, ignore it if it
     * shouldn't be in the collection (and isn't there already), or remove it if it shouldn't be in the collection and
     * is.  This takes into account any query parameters associated with the collection, and uses collection filters
     * if defined.
     *
     * Note that models can be neither added nor removed if this is not ready.
     */
    function dxAddOrRemove(model, options) {
        assertModelsCompatible(model, this);
        if (!this._dxIsReady) {
            return;
        }
        options = _.extend({
            _dxAllowSetPassthrough: true
        }, options);
        var self = this;
        var rootType = this._dxInfo.baseType;

        if (self._listingMode === LISTINGMODE_LISTING) {
            return;
        }

        var filter = context._filters[rootType];
        if (!filter) {
            if (self._dxInfo.paramDefs.dxFilterMode === dxConstants.LIST_TYPES.NONE) {
                dxSet.call(self, model, options);
                return;
            }

            filter = context._filters._uberFilter;
        }

        filter(this, model, function (placement) {
            if (model._dxDeleted) {
                /*
                 * Since some filters use asynchronous requests to determine the inclusion of an object,
                 * it is possible for an object to be deleted while a filter is executed.
                 * We need to make sure that even if the filter determines that the object should be
                 * included in the list, the collection discards deleted objects.
                 */
                return;
            }
            switch (placement) {
                case context._filters.INCLUDE:
                    dxSet.call(self, model, options);
                    break;
                case context._filters.EXCLUDE:
                    self._dxRemoveModel(model, options);
                    break;
                case context._filters.UNKNOWN:
                    if (self._listingMode === LISTINGMODE_IDLE) {
                        triggerDirty(self);
                    }
                    break;
                default:
                    dxUtil.fail('Filter returned an invalid value.');
            }
        });
    }

    /*
     * Sets the autoPageRefresh property.
     */
    function setAutoPageRefresh(value) {
        this._autoPageRefresh = value;
    }

    /*
     * Return the autoPageRefresh property.
     */
    function getAutoPageRefresh() {
        return this._autoPageRefresh;
    }

    /*
     * Remove the models from this collection that are being obsoleted by the contents of the rawPropsArray. In
     * general, we remove the models that the collection currently contains that are not part of the rawPropsArray,
     * but if the rawPropsArray don't have a reference attribute, then we can't tell if the models are the same or not
     * so we reset.
     *
     * Return whether we are resetting the collection. This is true if we're removing all elements, or if
     * collection._resetOnList is true.
     */
    function removeUnneededModels(collection, rawPropsArray) {
        var resetting = false;

        if (rawPropsArray.length !== 0 && _.isUndefined(rawPropsArray[0].reference)) {
            Backbone.Collection.prototype.remove.call(collection, collection.models, { silent: true });
            resetting = true;
        } else {
            var newReferences = _.map(rawPropsArray, function (attributes) {
                return attributes.reference;
            });

            // Figure out which models to remove (by reference). reset if removing all
            var modelsToRemove = [];
            collection.each(function (model) {
                if (!_.contains(newReferences, model.id)) {
                    modelsToRemove.push(model);
                }
            });

            if (collection._resetOnList || modelsToRemove.length === collection.length) {
                resetting = true;
            }

            _.each(modelsToRemove, function (model) {
                Backbone.Collection.prototype.remove.call(collection, model, { silent: resetting });
            });
        }
        return resetting;
    }

    /*
     * Retrieve a set of models from the server, entirely replacing the contents of this collection with those models.
     * This is a reflection of the list standard operation found in Delphix schemas.  This takes a set of query
     * parameters as an argument, and will populate the collection with the results of that query.
     *
     * Note that if multiple requests are issued, this will only honor the last request sent. Models are added/removed
     * only when the last issued request returns. This also means that ready/error events are triggered and promises
     * resolved/rejected only once the last request issued returns.
     *
     * Parameters:
     *     parameters: An object hash containing the parameters to this list operation. For example, if this is a
     *         Container collection, you might call
     *             myCollection.$$list({
     *                 group: 'GROUP-1',
     *                 parent: 'CONTAINER-23'
     *             });
     *     successError: A standard object that contains a success and/or error callback routine.
     * Events:
     *     ready:  Triggered for the collection once all the models have been added and removed. Handler argument is
     *             the collection.
     *             Also triggered for each model marked as ready. Handler argument is a model.
     *     reset:  Triggered if this results in all the existing models being removed, or the _resetOnList flag has
     *             been set to true. Argument is the collection.
     *     remove: Triggered for each model removed, iff only some of the models are removed. Argument is the model.
     *     add:    Triggered for each added model, iff only some of the models were removed. Argument is the model.
     */
    function dxList(parameters, successError) {
        var sendableParams = context._checkAndConvertParameters(parameters, this._dxInfo.paramDefs.parameters);
        var self = this;
        var rootType = this._dxInfo.baseType;

        // No filter function. Complain so someone writes one, and blindly add the model
        if (dxUtil.isNone(context._filters[rootType]) && self._dxInfo.paramDefs.dxFilterMode === dxConstants.LIST_TYPES.CUSTOM) {
            dxUtil.fail('No filter function found for collections of type ' + rootType + '. Add one to ' + ' core data _filters. In the mean time, all models will be added to the collection.');
        }

        self._dxIsReady = false;
        self._dxIsErrored = false;
        // Keep track of latest outstanding request. We only honor a response if it came from the latest issued request.
        self._latestListToken++;
        var currListToken = self._latestListToken;

        self.sync('read', self, {
            parse: true,
            data: sendableParams,
            success: function success(resp) {
                if (self._latestListToken !== currListToken) {
                    return; // Another list request has been issued
                }

                if (resp && resp.type === 'ErrorResult') {
                    var processedResult = context._newClientModel(resp.type);
                    processedResult.set(resp);
                    if (successError && successError.error) {
                        successError.error(processedResult);
                    } else {
                        context.reportErrorResult(processedResult);
                    }
                    self.trigger('error', self);
                    self._dxIsErrored = true;
                    return;
                }

                var resetting = false;
                self._queryParameters = dxUtil.deepClone(parameters);
                self._listSuccessError = successError; // save for auto-relisting
                self._dxIsReady = true;
                self._listingMode = LISTINGMODE_LISTING;

                resp = self.parse(resp);

                resetting = removeUnneededModels(self, resp) || self._resetOnList;

                /*
                 * Add the new models.
                 */
                _.each(resp, function (attributes) {
                    var model = context._cache.getCachedModelFromProperties(attributes, { silent: resetting });
                    dxSet.call(self, model, { silent: resetting, _dxAllowSetPassthrough: true });
                });

                self._listingMode = LISTINGMODE_IDLE;

                // Report finishing events
                if (resetting) {
                    self.trigger('reset', self);
                }

                self.trigger('ready', self);

                if (successError && successError.success) {
                    successError.success();
                }
            },
            error: function error(xhr) {
                if (self._latestListToken !== currListToken) {
                    return; // Another list request has been issued
                }
                var errorResult = context._convertXhrToErrorResult(xhr);
                context._handleErrorResult(errorResult, successError);
                self.trigger('error', self);
                self._dxIsErrored = true;
            }
        });

        // Return a promise that is resolved once the model is ready, and rejected if the model reports an error
        var deferred = new $.Deferred();
        var listenerContext = {};

        self.once('ready', function () {
            deferred.resolve(self);
            self.off(undefined, undefined, listenerContext);
        }, listenerContext);

        // don't set up the error handler if ready was already triggered
        if (deferred.state() === 'pending') {
            self.once('error', function () {
                deferred.reject(self);
                self.off(undefined, undefined, listenerContext);
            }, listenerContext);
        }

        return deferred.promise();
    }

    /*
     * Retrieve the last set of query parameters passed to $$list().  This is useful if you want to see what this
     * collection currently contains.
     */
    function getQueryParameters() {
        return this._queryParameters;
    }

    /*
     * ========================================
     * Collection creation
     * ========================================
     */

    /*
     * Returns a new DSB collection which is set to be a server collection.
     *
     * resetOnList: If true, $$list()'s will only trigger a single 'reset' event rather than individual 'add' and
     *              'remove' events. Otherwise this happens only when the $$list() fully replaces the contents of the
     *              collection.
     */
    function newServerCollection(typeName, resetOnList) {
        if (dxUtil.isNone(typeName)) {
            dxUtil.fail('To create a new collection, a type name must be provided.');
        }

        if (!isSchemaType(typeName)) {
            dxUtil.fail(typeName + ' is not a known type with a list operation. Can not create this collection.');
        }

        var collection = new context._collectionConstructors[typeName]();
        collection.constructor = Backbone.Collection.extend(); // make clone() return an ordinary backbone collection.
        collection._resetOnList = !!resetOnList;

        return collection;
    }

    function operationNotAllowed() {
        dxUtil.fail('Can not call this operation on a Server Collection.');
    }

    /*
     * ========================================
     * Utility functions
     * ========================================
     */

    function isSchemaType(typeName) {
        return !!context._collectionConstructors[typeName];
    }

    /*
     * Return true if the type is the same as baseType or is a subtype.
     */
    function isACompatibleType(type, baseType) {
        if (!context._modelConstructors[type]) {
            return false;
        }

        var typeDef = context._modelConstructors[type].prototype._dxSchema;
        while (typeDef) {
            if (typeDef.name === baseType) {
                return true;
            }
            typeDef = typeDef.parentSchema;
        }

        return false;
    }

    /*
     * Throws error if model (Backbone.Model or attributes) is not compatible with the specified type.
     */
    function assertModelCompatible(aModel, baseType) {
        var type;
        if (aModel instanceof Backbone.Model) {
            type = aModel.get('type');
        } else {
            dxUtil.fail('Can not add an arbitrary set of attributes. Must pass a Backbone Model.');
        }

        if (!isACompatibleType(type, baseType)) {
            dxUtil.fail('Can not add a model of type ' + type + ' to a collection with a base type of ' + baseType + '.');
        }
    }

    /*
     * Validates that all models are compatible with this collection's type.
     */
    function assertModelsCompatible(models, referenceModel) {
        if (dxUtil.isNone(models)) {
            dxUtil.fail('Can not call without a model.');
        }

        if (_.isArray(models)) {
            _.each(models, function (model) {
                assertModelCompatible(model, referenceModel._dxInfo.baseType);
            }, this);
        } else {
            assertModelCompatible(models, referenceModel._dxInfo.baseType);
        }
    }

    /*
     * Trigger a 'dirty' event, and if appropriate, set up another call to do a new list operation.
     */
    function triggerDirty(collection) {
        collection.trigger('dirty');
        if (collection.getAutoPageRefresh()) {
            setTimeout(function () {
                dxList.call(collection, collection.getQueryParameters(), collection._listSuccessError);
            }, 0);
        }
    }

    /*
     * ========================================
     * Actually do the work of this function
     * ========================================
     */

    context = context || this;
    context._collectionConstructors = context._collectionConstructors || {};

    _.each(schemas, function (schema, typeName) {
        if (schema.list) {
            // examine return values, in case the return type is not the same as the schema type
            var retObj = schema.list['return'];
            var retItemsObj = retObj ? retObj.items : undefined;
            var collectionType = retItemsObj ? retItemsObj.$ref : (retObj || {}).$ref;
            collectionType = collectionType || schema.name;

            context._collectionConstructors[typeName] = Backbone.Collection.extend({
                _dxInfo: {
                    baseType: collectionType,
                    paramDefs: schema.list
                },
                _dxIsReady: false,
                _dxIsErrored: false,
                _queryParameters: undefined,
                _autoPageRefresh: false,
                _listSuccessError: undefined,
                _listingMode: LISTINGMODE_IDLE,
                url: schema.root,
                _dxEmpty: dxEmpty,
                _dxRemoveModel: Backbone.Collection.prototype.remove,
                _dxAddOrRemove: dxAddOrRemove,
                model: function model() {
                    dxUtil.fail('Can not create a new model on a collection. Must use the cache.');
                },
                on: dxOn,
                add: operationNotAllowed,
                remove: operationNotAllowed,
                set: dxSet,
                reset: operationNotAllowed,
                push: operationNotAllowed,
                pop: operationNotAllowed,
                unshift: operationNotAllowed,
                shift: operationNotAllowed,
                parse: dxParse,
                fetch: dxFetch,
                create: dxCreate,
                $$list: dxList,
                _latestListToken: 0,
                _resetOnList: false,
                clear: dxClear,
                getQueryParameters: getQueryParameters,
                setAutoPageRefresh: setAutoPageRefresh,
                getAutoPageRefresh: getAutoPageRefresh
            });
        }
    });

    context._newServerCollection = newServerCollection;
};

},{"dxcore/js/constants.js":15,"dxcore/js/util.js":23}],8:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _ */

'use strict';

var dxUtil = require('dxcore/js/util.js');

/*
 * Creation listeners provide access to notification updates for API server objects creation in the form
 * of level2 models.
 *
 *   typeName         The schema type for which one receives notifications.
 *
 *   callback         A function to be invoked with a level2 model as argument for each create notification.
 *
 *   queryParams      Optional query parameters used to filter notifications.
 *
 *   context          The context to access other dxData content (cache, filters).
 */
module.exports.CreationListener = function CreationListener(settings) {
    var self = this;

    if (dxUtil.isNone(settings.typeName)) {
        dxUtil.fail('To create a new creation listener, a type name must be provided.');
    }
    var typeName = settings.typeName;
    var context = settings.context;
    if (!isListableType(typeName, context)) {
        dxUtil.fail(typeName + ' is not a known type with a list operation. Can not create this creation listener.');
    }
    if (!_.isFunction(settings.callback)) {
        dxUtil.fail('Callback must be provided as a function.');
    }

    self._dxInfo = {
        baseType: settings.typeName
    };

    self.inUse = true;

    self.getQueryParameters = function () {
        return settings.queryParams;
    };

    // The format must remain compatible with level2-collections and level2-cache.
    self._dxAddOrRemove = function (model) {
        if (!self.inUse) {
            return;
        }

        context._filters[typeName](self, model, function (placement) {
            switch (placement) {
                case context._filters.INCLUDE:
                    settings.callback(model);
                    break;
                case context._filters.EXCLUDE:
                    break;
                case context._filters.UNKNOWN:
                    dxUtil.fail('UNKNOWN filter result not supported by creation listeners');
                    break; // to keep ant check happy.
                default:
                    dxUtil.fail('Filter returned an invalid value.');
            }
        });
    };

    self.dispose = function () {
        self.inUse = false;
    };
};

function isListableType(typeName, context) {
    return !!context._collectionConstructors[typeName];
}

},{"dxcore/js/util.js":23}],9:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _, $, Backbone */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxConstants = require('dxcore/js/constants.js');

/*
 * Defines general purpose filter routines. These can be used to build type-specific filters.
 *
 * A filter is simply a function that reproduces the server's treatment of the query parameters on the list operation
 * for any type.  Each filter function has the signature
 *    filterFunction(collection, model, resultHandler)
 * The filter function should examine the query parameters on the collection, then examine the properties of the model
 * and call resultHandler with a value indicating how the model should be placed with respect to the collection:
 *    INCLUDE: The model can be put in the collection
 *    EXCLUDE: The model should not be put in the collection (and removed if it is there already)
 *    UNKNOWN: The filter can't determine what to do with the model. Most likely the collection should be re-fetched
 * The potentially asynchronous call to resultHandler is necessary since some query parameters will require retrieval
 * of models to make their determination.
 */
module.exports._initFilters = function _initFilters(context) {
    var EXCLUDE = 'EXCLUDE';
    var INCLUDE = 'INCLUDE';
    var UNKNOWN = 'UNKNOWN';

    var DATE_PROPS = ['fromDate', 'startDate', 'toDate', 'endDate'];

    /*
     * Helper for non-generated filters. In many cases, the property in the query parameter is the same as that of the
     * attribute in the model. This means we can make a decision synchronously, which keeps the logic in the filters
     * simpler (compare to checkQueryParam(), which returns a promise).
     * This compares the value in the query parameter with that of the model.
     *
     * properties: An array of property names to compare
     * qParams:    The query parameters to compare
     * model:      The model to compare
     */
    function checkSameProps(properties, qParams, model) {
        var result = INCLUDE;

        _.each(properties, function (property) {
            if (_.has(qParams, property) && qParams[property] !== model.get(property)) {
                result = EXCLUDE;
            }
        });

        return result;
    }

    /*
     * When a model is being compared against a collection that has been retrieved with paging, then we can't reliably
     * tell whether the model belongs in the collection. Note that this assumes not specifying a page size implicitly
     * sets it to a particular size (generally 25), while specifying 0 means 'all'
     */
    function checkPageSize(qParams) {
        if (!_.has(qParams, 'pageSize') || qParams.pageSize !== 0) {
            return UNKNOWN;
        }
        return INCLUDE;
    }

    /*
     * Helper function to check date-related query parameters. This assumes qParamName is a valid date property.
     * The caller is responsible for making sure that qParamName is one of DATE_PROPS
     */
    function checkDateProp(qParamVal, qParamName, qpSchema, model, attrName) {
        if (!_.has(qpSchema, 'inequalityType')) {
            dxUtil.fail('Date property "' + qParamName + '" missing "inequalityType" schema property');
        }
        if (dxUtil.isNone(model.get(attrName))) {
            return EXCLUDE;
        }

        if (_.contains(['fromDate', 'startDate'], qParamName)) {
            if (model.get(attrName).getTime() < qParamVal.getTime()) {
                return EXCLUDE;
            }
        } else if (model.get(attrName).getTime() > qParamVal.getTime()) {
            // toDate or endDate
            return EXCLUDE;
        }

        if (qpSchema.inequalityType === dxConstants.INEQUALITY_TYPES.STRICT && model.get(attrName).getTime() === qParamVal.getTime()) {
            return EXCLUDE;
        }

        return INCLUDE;
    }

    /*
     * Helper for the uberFilter to check an individual query parameter against the model. This may involve
     * asynchronous ServerModel fetches to resolve 'mapsTo' data mapping chains. As a result this returns a promise to
     * the caller. At the moment this only deals with query params that may result in INCLUDE or EXCLUDE - never
     * UNKNOWN.
     * The returned promise is either resolved with INCLUDE or rejected with EXCLUDE.
     */
    function checkQueryParam(qParamVal, qParamName, model, rootSchemaDef) {
        var qpSchema = rootSchemaDef.list.parameters[qParamName],
            deferred = $.Deferred(),
            mapsTo = qpSchema.mapsTo;

        if (!mapsTo) {
            dxUtil.fail('No mapsTo property found for query parameter ' + qParamName + '.');
        }

        var pathSegs = mapsTo.split('.');

        // We know the last seg will be property to compare. Anything before will be a chain of object references.
        var finalAttrName = pathSegs.pop();

        // Recursively walk the data mapping segments
        function followNextSeg(currModel) {
            currModel.once('error', deferred.reject);
            currModel.once('ready', function () {
                if (_.isEmpty(pathSegs)) {
                    // We've reached the end of the path. Do the actual check.
                    var result;

                    if (_.contains(DATE_PROPS, qParamName)) {
                        result = checkDateProp(qParamVal, qParamName, qpSchema, currModel, finalAttrName);
                    } else {
                        // simple property check
                        result = currModel.get(finalAttrName) === qParamVal ? INCLUDE : EXCLUDE;
                    }

                    if (result === INCLUDE) {
                        deferred.resolve(result);
                    } else {
                        deferred.reject(result);
                    }
                } else {
                    // recursive case - continue following path segments.
                    var currPart = '$' + pathSegs.shift();
                    var newModel = currModel.get(currPart);
                    followNextSeg(newModel);
                }
            });
        }

        followNextSeg(model);

        return deferred.promise();
    }

    function getRootedSchema(model) {
        function upwardFind(schema, schemaName) {
            if (dxUtil.isNone(schema)) {
                dxUtil.fail('Malformed type. Root schema type not found.');
            }

            if (schema.name === schemaName) {
                return schema;
            }

            return upwardFind(schema.parentSchema, schemaName);
        }

        if (!model._dxSchema.rootTypeName) {
            dxUtil.fail('Trying to filter a type that has no root type.');
        }

        return upwardFind(model._dxSchema, model._dxSchema.rootTypeName);
    }

    /*
     * This is the filter to rule all filters. It will filter models for a given collection based on the schema
     * definition and annotations. This may be used as a standalone filter or as a helper for another filter, usually
     * in conjunction with the 'skipParams' argument (see alertFilter).
     * The uberFilter can only handle 'standard' query parameters: simple equality checks, date comparisons, and
     * paging. Similarly there are instances of query parameters that the uberFilter should not attempt to handle.
     * These come in two flavors:
     * 1) Params that do not affect what comes back from the notification system are marked as 'excludeFromFilter' in
     *    the schemas.
     * 2) Params that require special handling can be passed to the uberFilter using the 'skipParams' array.
     */
    function uberFilter(collection, model, resultHandler, skipParams) {
        var qParams = collection.getQueryParameters() || {};
        var schemaDef = getRootedSchema(model);
        var listParams = schemaDef.list.parameters;

        // If the schema definition for list says there are no parameters, then the model can always be included
        if (_.isEmpty(schemaDef.list.parameters)) {
            resultHandler(INCLUDE);
        }

        qParams = _.omit(qParams, skipParams);

        /*
         * If a type could have pageSize, we may need to return UNKNOWN. Otherwise we can keep going in the filter.
         * Note that we don't care about paging params when dealing with creation listeners.
         */
        if (_.has(listParams, 'pageSize') && collection instanceof Backbone.Collection) {
            var pageSizeResult = checkPageSize(qParams);
            if (pageSizeResult === UNKNOWN) {
                return resultHandler(pageSizeResult);
            }
        }
        qParams = _.omit(qParams, ['pageSize', 'pageOffset']);

        if (_.isEmpty(qParams)) {
            return resultHandler(INCLUDE);
        }
        var promises = _.map(qParams, function (qParamVal, qParamName) {
            return checkQueryParam(qParamVal, qParamName, model, schemaDef);
        });

        /*
         * Wait until all query param checks have resolved to make a final decision. Params that might result in
         * UNKNOWN (paging and params we can't handle) are dealt with earlier. Therefore we know each of these promises
         * is either resolved with INCLUDE or rejected with EXCLUDE.
         */
        $.when.apply(undefined, promises).then(function () {
            resultHandler(INCLUDE);
        }).fail(function () {
            resultHandler(EXCLUDE);
        });
    }

    /*
     * Simple filter for any type that doesn't actually have query parameters on its list operation (e.g. Group).
     */
    function genericFilter(collection, model, resultHandler) {
        resultHandler(INCLUDE);
    }

    /*
     * Do the real work.
     */
    context = context || this;
    context._filters = context._filters || {};

    _.extend(context._filters, {
        EXCLUDE: EXCLUDE,
        INCLUDE: INCLUDE,
        UNKNOWN: UNKNOWN,
        Notification: uberFilter,
        _checkSameProps: checkSameProps,
        _genericFilter: genericFilter,
        _uberFilter: uberFilter
    });
};

},{"dxcore/js/constants.js":15,"dxcore/js/util.js":23}],10:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $, _, Backbone */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxAjax = require('dxcore/js/ajax.js');

/*
 * This takes a set of schemas (modified by _prepareSchemas), and creates a set of Backbone Model constructor functions
 * (and, by implication, functionality upon the models). This also creates a set of 'root operation' functions.
 * The constructor functions will be used by the level 3 API's to provide final collections to consumers of dxCore Data.
 *
 * CONSTRUCTOR FUNCTIONS
 * The models created by these constructor functions provide access to the data types that the Delphix Server works with
 * and implicitly manage the network connections to the server to get their data and perform operations on them. That
 * is, when using the models created by these constructor functions, the caller can work with the data in the server's
 * terms, and can remain insulated from managing network communication.
 *
 * Terminology notes:
 *     Attributes:       Backbone calls the name/value pairs on a Model 'attributes'.
 *     Client Model:     A model which is created on the client, and generally doesn't reflect data that exists on the
 *                       server. Most commonly, these are either parameters to operations on Server Models, or return
 *                       values from operations. Client Models are not maintained by the notification system.
 *     DSB Model:        Delphix-Schema-Based Model.  The models produced by the constructor functions this creates.
 *                       These are Backbone models that are constrained and enhanced to fit our Delphix Schema
 *                       requirements.
 *     Embedded Model:   A model that is placed 'within' another model via a object/referenceTo property in the schema.
 *     Properties:       The name/value pairs on an ordinary Javascript/JSON/JSON-Schema object are called 'properties'.
 *     Referenced Model: A model that is referenced via a string/objectReference property in another.
 *     Server Model:     A model which represents a corresponding object on the server.  These models may not be
 *                       modified from outside of the dxCore Data, since they are guaranteed to remain accurate and up
 *                       to date with the server's objects (as long as they are left inside of a collection)
 *
 * This routine (which should only be called from within the data system) consumes the schemas and creates a set of
 * Backbone Model constructor functions, one for each type in the schemas.
 *
 * The models constructed by these functions are very similar to ordinary Backbone Models, but also have a number of
 * significant differences. These differences include *incompatible* changes to the behavior of some Backbone Model
 * functions, as well as the addition of new ones.
 *
 * EVENTS
 * ready:        If you want to know if a model is ready to be used (has an initial set of data retrieved from the
 *               server), then make use of the 'ready' event, which is unique to DSB models. Ready indicates that the
 *               model has retrieved an initial set of data from the server. Unlike ordinary events, if a ready handler
 *               is assigned to a model that is already ready, that handler (and no others) will be triggered
 *               immediately. Ready handlers are  always passed the model as the first, and only, argument. The handler
 *               should have the signature (model)
 * sync:         This is triggered after fetching the model from the server successfully and after any properties have
 *               been updated.
 * badReference: This is triggered when a model is fetched, and a 404 is returned. The handler should have the signature
 *               (model, errorResult)
 * error:        This is reported when an error is returned from a fetch. Like ready, it will be also immediately
 *               trigger if the object is in a error state. Unlike ready, a model may go into and out of being in
 *               an error state, depending on the results of the last time it was fetched. The handler should have the
 *               signature (model, errorResult)
 * Note: The order of the triggering of badReference, error and the calling of the error handler passed to fetch are not
 * guaranteed.
 *
 * Standard Backbone properties (none of these should be changed)
 *     id              : -- : Standard
 *     idAttribute     : -- : Set to 'reference', as this is the unique ID property name for Delphix Schemas.
 *     cid             : -- : Standard
 *     attributes      : -- : Standard, but essentially private.
 *     changed         : -- : Standard, but essentially private. Use hasChanged() etc.
 *     defaults        : -- : This is not used by DSB Models
 *     validationError : -- : At this time not used.
 *     urlRoot
 *
 * Standard Backbone functions
 *     Unless otherwise noted, all functions accept only attribute names specified in the Delphix schema (they will
 *     throw an error if given something else). If an attribute is of type string/objectReference, then '$attribute' can
 *     be used to retrieve the referenced model. In the descriptions below, functions marked as S can be called on
 *     server models, while those marked as C can be called on client models.
 *
 *     get      : SC : Standard, as above.
 *     set      :  C : Standard, but accepts values for embedded models. Does not accept '$attribute' names.
 *     escape   : SC : Standard, as above. Note that Backbone's escape doesn't deal well with objects or arrays.
 *     has      : SC : Standard, as above.
 *     unset    :  C : Standard, as above. Sets attribute to default value. Embedded models clear()'ed.
 *     clear    :  C : Standard, as above. Sets attributes to default value. Embedded models clear()'ed.
 *     toJSON   : SC : Standard, as above. Recursively includes embedded models.
 *     sync     : -- : Do not use this.
 *     fetch    : -- : Do not use this. Use newClientModel() or getServerModel() instead.
 *     save     : -- : Do not use this. Use $$update() instead.
 *     destroy  : -- : Do not use this. Use $$delete() instead.
 *     keys     : SC : Standard. Does not return the '$attribute' keys.
 *     values   : SC : Standard. Returns Embedded Models, but not Referenced Models.
 *     pairs    : SC : Standard. Returns Embedded Models, but not Referenced Models.
 *     invert   : SC : Standard. Returns Embedded Models, but not Referenced Models.
 *     pick     : SC : Standard. Returns Embedded Models, but not Referenced Models.
 *     omit     : SC : Standard. Returns Embedded Models, but not Referenced Models.
 *     validate : -- : Do not use this. DSB Models do their own validation. Setting this may have bad effects.
 *     isValid  : -- : Do not use this. DSB Models always valid.
 *     url      : -- : Internal. Returns URL value used by some ajax routines
 *     parse    : -- : Internal. Processes values returned from the server.
 *     clone    : SC : Returns a Client Model which is a deep-copy of this model.
 *     isNew    : SC : Standard. (but pretty useless)
 *     hasChanged         : SC : Standard. Does not reflect $attribute names.
 *     changedAttributes  : SC : Standard. Does not reflect $attribute names.
 *     previous           : SC : Standard. Does not reflect $attribute names.
 *     previousAttributes : SC : Standard. Does not reflect $attribute names.
 *
 * DSB Model functions
 *     instanceOf    : SC : Returns whether the model is an instance of another type.
 *     isServerModel : SC : Returns true if this is a server model
 *     $$update      : S  : Updates the version of the model on the server
 *     $$delete      : S  : Deletes the server object
 *     $operation    : SC : Calls the relevant operation. Model must have a reference value to use these.
 *
 * Private to dxCore Data
 *     context._assertParametersGood    : Validate that a set of parameters are valid.
 *     context._newClientModel          : Makes a client model
 *     context._newServerModel          : Makes a server model
 *     context._getRootType             : Returns the most distant super type that has the same root property.
 *     context._convertXhrToErrorResult : Converts an xhr into an ErrorResult object.
 *
 * ROOT OPERATIONS
 * All root operations on schemas, and all create operations are stored in
 *     context.rootOps.Type.$rootOperation
 *     context.rootOps.Type.$$create
 *
 * Note: This does not alter the basic Backbone library in any way. This means this can co-exist with ordinary
 *     Backbone usage, or even other Backbone-based libraries (if they don't modify Backbone, of course).
 *
 * Parameters:
 *     schemas: The set of schemas this should generate constructors from.
 *     context: The object to put the resulting constructors (_modelConstructors) on. If not specified, puts them on
 *              'this'.
 */
module.exports._generateModelConstructors = function _generateModelConstructors(schemas, context) {
    // Note: 'context' is the only true 'global' within this closure. Please don't add others.

    /*
     * ========================================
     * Model functions.
     * ========================================
     */

    /*
     * Backbone defines this as: Bind a callback function to an object. The callback will be invoked whenever the event
     * is fired.
     *
     * For DSB models, we provide standard behavior for this, but do some special processing if someone is listening
     * for the 'ready' or 'error' event. In that case, if we have already fetched the model (or if this is a client
     * model), then trigger the ready event immediately.  Note that if the model is already ready or in error,
     * then we will react to 'ready' or 'error' immediately without storing the listener, since this is a one
     * time pseudo-event.
     */
    function dxOn(name, callback, context) {
        var transientTrigger;

        /*
         * If the user is asking for ready, and we are already ready or in error, then trigger the ready or
         * do nothing. There is no reason to keep the event listener around for more than this call.
         * Similarly if the user is asking for the error pseudo event.
         */
        if (name === 'ready') {
            if (this._dxIsReady) {
                transientTrigger = triggerReady;
            } else if (this._dxErrorResult) {
                return;
            }
        } else if (name === 'error') {
            if (this._dxErrorResult) {
                transientTrigger = triggerError;
            } else if (this._dxIsReady) {
                return;
            }
        }

        if (transientTrigger) {
            var tempContext = {};
            Backbone.Events.on.call(this, name, callback, tempContext);
            transientTrigger(this);
            Backbone.Events.off.call(this, name, callback, tempContext);
        } else {
            Backbone.Events.on.call(this, name, callback, context);
        }
    }

    /*
     * Either 'ready' or 'error' events is triggered once in the lifecycle of a model. Cleanup listeners as soon as
     * possible.
     *
     * Without this automatic cleanup, callers would have to setup 2 listeners and cancel each other when triggered.
     * Note that we look at the list of events before triggering events so as to allow event handlers to attach new
     * handlers.
     */
    function removeEventHandlers(model, events) {
        _.each(events, function (value, name) {
            _.each(value, function (event) {
                if (event.callback) {
                    model.off(name, event.callback);
                }
            });
        });
    }

    /*
     * Get a copy of the current event handlers.
     */
    function getEventHandlers(model) {
        if (!model._events) {
            return {};
        }
        return {
            error: (model._events.error || []).slice(0),
            ready: (model._events.ready || []).slice(0)
        };
    }

    /*
     * Trigger the 'ready' event and clean up error listeners
     */
    function triggerReady(model) {
        var handlers = getEventHandlers(model);
        model.trigger('ready', model);
        removeEventHandlers(model, handlers);
    }

    /*
     * Trigger the 'error' event and clean up ready listeners
     */
    function triggerError(model) {
        var handlers = getEventHandlers(model);
        model.trigger('error', model, model._dxErrorResult);
        removeEventHandlers(model, handlers);
    }

    /*
     * Backbone defines this as: Get the current value of an attribute from the model.
     *
     * For DSB models, this does the same thing, with two additional features. First, asking for an attribute that isn't
     * in the schema definition will cause an error to be thrown.  Second, if there is an attribute named 'attr' whose
     * schema property is of type string/objectReference, then one can also get('$attr'), and this will return the
     * corresponding DSB model.
     */
    function dxGet(attrName) {
        var info = assertAndGetAttrInfo(this, attrName);

        if (isObjectRefProp(info.propDef) && info.wantsModel) {
            var referenceValue = this.attributes[info.baseName];
            if (dxUtil.isNone(referenceValue)) {
                return;
            }
            if (_.isString(referenceValue)) {
                return context._cache.getCachedModel(referenceValue, getRootType(info.propDef.referenceTo));
            }
            dxUtil.fail('Tried to retrieve a related object with ' + attrName + ' but value was ' + referenceValue + '.');
        } else {
            return Backbone.Model.prototype.get.call(this, info.baseName);
        }
    }

    /*
     * Backbone defines this as: Set a hash of attributes (one or many) on the model. If any of the attributes change
     * the model's state, a 'change' event will be triggered on the model.
     *
     * For DSB Models, there are a number of differences.
     *     1) Only attributes defined in the schemas can be set.
     *     2) Attributes may only be set to values with the data type specified in the schemas.
     *     3) DSB models may contain 'embedded' DSB models (object/$ref)
     *
     * To set an attribute on an embedded DSB model, one must still specify values in JSON format. Thus:
     *     myModel.set({
     *         attr: 1,
     *         myEmbeddedModel: {
     *             embeddedAttr: 34
     *         }
     *     })
     * Note that it is legal, in some circumstances, to change the type of an embedded model with a set. Naturally,
     * on a ServerModel, only the server may do this, however on a ClientModel this can happen quite freely. The
     * important things to keep in mind are the following:
     *     a) When the type changes, the new type must be compatible with the type declared in the schema (which is to
     *        say you may change it to that type or any subtype, but may not change it to an unrelated type).
     *     b) Changing a type is equivalent to setting that embedded model to a new instance. That is, any values that
     *        were in the embedded model before the set are replaced with default values, and then the values specified
     *        to this set() routine are applied.
     *     c) However, listeners on this embedded model are not affected, and appropriate change notifications will be
     *        sent on setting.
     *
     * A DSB model may, legitimately, have an array or object that, itself, contains a DSB model (for example, an
     * APIError may contain a plain JSON object whose values are other APIErrors).  To deal with this properly, set()
     * will detect any object that has a 'type' property, whose value is a Delphix-schema type name, and create a
     * DSB model automatically. Without that type property, however, set() will treat the object as an ordinary
     * JSON object.
     *
     * Arrays in a Delphix schema may or may not have a type specified for items. If they do, set() will enforce that
     * type. If not, then the items in the array passed in will be examined and recursively processesed as appropriate.
     * Similarly, if a plain object is encountered, set() will process its values recursively (including turning them,
     * or their own properties, into DSB models as appropriate)
     *
     * A schema property defined with type=string and format=date gets some special treatment.  In that case, you can
     * pass a string in YYYY-MM-DDTHH:MM:SS.MMMZ format, or a Javascript Date object (the former will be converted to
     * a Date object internally, so immediately calling get() will not return the original string).
     */
    function dxSet(key, value, options) {
        var self = this;
        var newAttrs = {};
        var preConvertAttrs;
        var postConvertAttrs;

        if (_.isUndefined(key)) {
            return self;
        }

        if (_.isObject(key)) {
            newAttrs = key;
            options = value;

            if (newAttrs instanceof Backbone.Model) {
                newAttrs = newAttrs.toJSON();
            }
        } else {
            newAttrs[key] = value;
        }

        options = options || {};

        /*
         * Check whether this set would change the type of the model. This only allows changing to a subtype.
         */
        if (newAttrs.type && newAttrs.type !== self._dxSchema.name) {
            if (firstIsSubtypeOfSecond(newAttrs.type, self._dxSchema.name) || options._allowTypeConversion) {
                preConvertAttrs = _.clone(self.attributes);
                convertToType(self, newAttrs.type);
                postConvertAttrs = _.clone(self.attributes);
            } else {
                dxUtil.fail('Tried to change this from ' + self._dxSchema.name + ' to ' + newAttrs.type + '.');
            }
        }

        /*
         * Reject the set if any of the attributes aren't of the right type
         */
        var invalidAttrs = _.omit(newAttrs, _.keys(self._dxSchema.properties || {}));
        if (!_.isEmpty(invalidAttrs)) {
            dxUtil.fail(_.keys(invalidAttrs) + ' are not attributes of a model of type ' + self._dxSchema.name + '.');
        }

        /*
         * Validate types match, and prepare values to be set
         */
        var finalAttrs = {};
        var subModelsToSet = {};
        var subModelsToClear = [];
        var subModelsToConvert = {};

        _.each(newAttrs, function (newValue, newName) {
            var propDef = self._dxSchema.properties[newName];
            var newType = assertValueMatchesDefinition(newName, newValue, propDef);

            switch (newType) {
                case 'undefined':
                case 'boolean':
                case 'string':
                case 'number':
                case 'integer':
                    finalAttrs[newName] = newValue;
                    break;
                case 'null':
                    var nullable = _.any(propDef.type, function (type) {
                        return type === 'null';
                    });
                    if (self.get(newName) instanceof Backbone.Model && !nullable) {
                        subModelsToClear.push(newName);
                    } else {
                        finalAttrs[newName] = undefined;
                    }
                    break;
                case 'date':
                    if (newValue instanceof Date) {
                        finalAttrs[newName] = new Date(newValue.getTime());
                    } else {
                        finalAttrs[newName] = new Date(newValue);
                    }
                    break;
                case 'array':
                    finalAttrs[newName] = setupArray(newValue, propDef.items);
                    break;
                case 'object':
                    if (self.get(newName) instanceof Backbone.Model) {
                        if (newValue.type && self.get(newName).get('type') !== newValue.type) {
                            subModelsToConvert[newName] = newValue;
                        } else {
                            subModelsToSet[newName] = newValue;
                        }
                    } else if (propDef.$ref === 'Json') {
                        /*
                         * Deal with special Json type, which is object, but doesn't need any set up. It has a
                         * reference because the backend needs this to do its validation. The UI should consider
                         * instances of this type as a black box (e.g. don't validate its properties).
                         */
                        finalAttrs[newName] = jsonIze(newValue);
                    } else {
                        finalAttrs[newName] = setupObject(newValue);
                    }
                    break;
            }
        });

        /*
         * Finally, set all the values
         */
        _.each(subModelsToClear, function (attrName) {
            self.get(attrName)._dxClear(options);
        });

        var revisedOptions = _.extend(_.clone(options), { _allowTypeConversion: true });
        _.each(subModelsToConvert, function (value, key) {
            var subModel = self.get(key);
            subModel._dxSet(value, revisedOptions);
        });

        _.each(subModelsToSet, function (value, key) {
            self.get(key)._dxSet(value, options);
        });

        /*
         * If we did a type conversion, we need to make sure to send all the change:AttrName events before we send
         * the final change event.  Because we're relying on the Backbone set routine, it may think it needs to send
         * the change event when it is done, but we have the potential to send a variety of other events afterwards.
         * To work around this, we store all calls to trigger() until we are done.
         */
        if (preConvertAttrs) {
            interceptTrigger(self);
        }

        /*
         * This will set all the values, and trigger change:attr events for all the attributes that changed
         * Note that if this is doing a type conversion, this will trigger changes for:
         *   - attributes that were added (though conversion) and then changed
         *   - attributes that existed before and after conversion, and changed from their converted value
         */
        var result = Backbone.Model.prototype.set.call(self, finalAttrs, options);

        if (preConvertAttrs) {
            var removedAttrs = _.omit(preConvertAttrs, _.keys(postConvertAttrs));
            var addedAttrs = _.omit(postConvertAttrs, _.keys(preConvertAttrs));
            var continuedAttrs = _.pick(preConvertAttrs, _.keys(postConvertAttrs));

            // trigger change events for the attributes were removed
            _.each(removedAttrs, function (value, key) {
                self.trigger('change:' + key, self, undefined);
            });

            // trigger change events for the attributes that were added, by conversion, but not changed
            _.each(addedAttrs, function (value, key) {
                if (addedAttrs[key] === self.attributes[key]) {
                    self.trigger('change:' + key, self, self.attributes[key]);
                }
            });

            _.each(continuedAttrs, function (value, key) {
                /*
                 * Suppress a change:attrName event if if the attr changed during the set() to the same value as before
                 * the conversion suppress event/
                 */
                if (continuedAttrs[key] === self.attributes[key] && postConvertAttrs[key] !== self.attributes[key]) {
                    self._suppressEvents.push('change:' + key);
                }
                /*
                 * Trigger a change:attrName if the value changed during conversation, but then wasn't changed by set.
                 * For example: The original value was 1, then when we changed the type we put the default value of 2
                 * in, and then Backbone's set changed it to 2.  So, set() didn't send an event, but we know that
                 * there actually was a change from the client's point of view.
                 */
                if (continuedAttrs[key] !== postConvertAttrs[key] && postConvertAttrs[key] === self.attributes[key]) {
                    self.trigger('change:' + key, self, self.attributes[key]);
                }
            });

            replayTriggers(self);
        }

        return result;
    }

    /*
     * Intercept and queue for later restoration, all calls to trigger().
     * This also sets up a temporary property on the model, _suppressEvents, which is a list of events to not
     * send when replayTriggers is called.
     */
    function interceptTrigger(model) {
        model._queuedEvents = [];
        model._storedTriggerFunction = model.trigger;
        model._suppressEvents = [];
        model.trigger = function () {
            model._queuedEvents.push(arguments);
        };
    }

    /*
     * Send all paused events on their way, with some modifications including: suppressing certain named events, and
     * assuring a change event is sent after all change:attrName events (but not if there are none)
     */
    function replayTriggers(model) {
        var changeEvent;
        var seenAttrChange = false;
        model.trigger = model._storedTriggerFunction;
        delete model._storedTriggerFunction;

        _.each(model._queuedEvents, function (args) {
            // don't send the change event yet
            if (args[0] === 'change') {
                changeEvent = args;
                return;
            }

            // don't send events we are to suppress
            if (_.contains(model._suppressEvents, args[0])) {
                return;
            }

            if (args[0].indexOf('change:') === 0) {
                seenAttrChange = true;
            }
            model.trigger.apply(model, args);
        });
        delete model._queuedEvents;
        delete model._suppressEvents;

        if (changeEvent) {
            model.trigger(changeEvent);
        } else if (seenAttrChange) {
            model.trigger('change', model);
        }
    }

    /*
     * Backbone defines this as: Returns true if the attribute is set to a non-null or non-undefined value.
     */
    function dxHas(attrName) {
        if (!_.isString(attrName)) {
            dxUtil.fail('Must provide an attribute name.');
        }

        var info = getAttrInfo(this, attrName);

        // dxGet will throw an exception for unknown attributes, so reach directly into the attributes to avoid this
        return info.baseName && !dxUtil.isNone(this.attributes[info.baseName]);
    }

    /*
     * Backbone defines this as: Remove an attribute by deleting it from the internal attributes hash. Fires a 'change'
     * event unless silent is passed as an option.
     *
     * For DSB models, the behavior is a bit different:
     *  1) Calling unset() on a defined attribute will cause that to be reset to its default value, unless it is an
     *     embedded object, in which case it is equivalent to calling clear() on it.
     *  2) Calling unset() an attribute that isn't defined in the schemas will throw an error
     *  3) calling unset('$attribute') will unset 'attribute'
     *  4) This considers the default of a 'type' attribute to be the schema name, and so unset will never actually
     *     change it.
     */
    function dxUnset(attrName, options) {
        var info = assertAndGetAttrInfo(this, attrName);

        if (attrName === 'type') {
            return;
        }

        if (isEmbeddedProp(info.propDef)) {
            this.attributes[attrName].clear(options);
        } else {
            this.set(info.baseName, defaultFor(info.propDef, this._dxIsClientModel), options);
        }
    }

    /*
     * Backbone defines this as: Removes all attributes from the model, including the id attribute. Fires a 'change'
     * event unless silent is passed as an option.
     *
     * For DSB models, this resets all attributes to their default values, unless they are embedded objects, in which
     * case clear() is recursively called on them.
     */
    function dxClear(options) {
        var changes = {};
        _.each(this._dxSchema.properties, function (propDef, propName) {
            if (propName === 'type') {
                return;
            }
            if (isEmbeddedProp(propDef)) {
                this.attributes[propName]._dxClear(options);
            } else {
                changes[propName] = defaultFor(propDef, this._dxIsClientModel);
            }
        }, this);

        if (!_.isEmpty(changes)) {
            this._dxSet(changes, options);
        }
    }

    /*
     * Backbone defines this as: Return a copy of the model's attributes for JSON stringification. This can be used for
     * persistence, serialization, or for augmentation before being sent to the server.
     *
     * Our differences are that we will recursively call this on any embedded objects, and we do deep clones of any
     * objects or arrays.
     */
    function dxToJSON() {
        return jsonIze(this);
    }

    /*
     * Wrapper around standard Backbone url().  We do this because we build a common url access scheme that is
     * available to both root operations and object operations.
     */
    function dxUrl() {
        return this.url();
    }

    /*
     * Backbone defines this as: parse() is called whenever a model's data is returned by the server. The function is
     * passed the raw response object, and returns the attributes hash to be set on the model.
     *
     * Delphix values returned from the server come in several flavors:
     *  1) an ErrorResult. This means that whatever request got to us failed.
     *  2) an OKResult. This is the result of a successful call
     *  3) a 'naked' Delphix object type. This happens when a collection is parsing each object in its returned array.
     *  4) a ListResult, or other Delphix return value.  These should never happen here.
     *
     * In the case of problems (cases 1 and 4), we return undefined (we report the error result through the error result
     * handler).  For 2 we extract the object in the result and return that. For 3, assuming the type is one we know,
     * return that unchanged.  If it is an unknown type, however, we log an error and return undefined. An undefined
     * return value indicates that there is no data to be parsed out of the response.
     */
    function dxParse(response) {
        if (!response || !response.type) {
            dxUtil.warn('Got an undefined response, or one without a type in parse().');
            return;
        }

        if (response.type === 'OKResult') {
            return response.result;
        } else if (isSchemaType(response.type)) {
            return response;
        } else {
            dxUtil.warn('Got an unexpected type of response (' + response.type + ') in parse().');
            return;
        }
    }

    /*
     * Backbone defines this as: Returns a new instance of the model with identical attributes.
     *
     * For DSB models, this returns a client model that is a deep copy of the model. All embedded models are also
     * made as client models.
     */
    function dxClone() {
        var newModel = newClientModel(this._dxSchema.name);

        newModel.set(this.toJSON());
        newModel.changed = {}; // Shhh. we didn't actually change anything!

        return newModel;
    }

    /*
     * Returns true if the provided type name is this object's type name, or the type name of one of this model's
     * extended types.  Will throw an exception if the provided type name isn't one of the schema types.
     */
    function instanceOf(typeName) {
        if (!_.isString(typeName)) {
            dxUtil.fail('instanceOf() requires a type name as a parameter.');
        }

        if (!isSchemaType(typeName)) {
            dxUtil.fail(typeName + ' is not a known type name.');
        }

        var candidateTypeInfo = this._dxSchema;

        while (candidateTypeInfo) {
            if (candidateTypeInfo.name === typeName) {
                return true;
            }

            candidateTypeInfo = candidateTypeInfo.parentSchema;
        }

        return false;
    }

    function isServerModel() {
        return !this._dxIsClientModel;
    }

    /*
     * Entirely block the standard Backbone destroy() routine. We want users to call $$delete() instead.
     */
    function noDestroy() {
        dxUtil.fail('Do not call destroy() directly. Instead, call $$delete().');
    }

    /*
     * Delete this model on the server.  On success, this will clear() this model.  This will also fire
     * a 'request' event on the model before making the call, and a 'sync' and 'destroy' afterwards on success.
     * Depending on the underlying schema definition, this can be called in any of these ways:
     *    $$delete([successError])  // in case of no payload defined
     *    $$delete(payload[, successError])  // in case of payload required
     *    $$delete([payload][, successError])  // in case of payload optional
     */
    function dxDelete(arg1, arg2) {
        var opDef = this._dxSchema['delete'];

        if (arg1 instanceof Backbone.Model && !opDef.payload) {
            dxUtil.fail('$$delete does not allow a payload.');
        }

        var payload = arg1;
        var successError = arg2;
        if (!opDef.payload || !opDef.required && !(arg1 instanceof Backbone.Model)) {
            payload = undefined;
            successError = arg1;
        }

        assertHasReferenceAttr(this, '$delete', true);
        var preparedData = assertAndPreparePayload('$delete', opDef, payload);

        return callOperation(this, {
            data: preparedData,
            url: this.url()
        }, 'DELETE', opDef, successError);
    }

    /*
     * Create a new object on the server. It is normally called like this:
     *    $$create(payload[, successError])
     * However, it could be called in the following ways should a schema one day not require payload to do create
     *    $$create([successError])  // in case of no payload defined
     *    $$create([payload][, successError])  // in case of payload optional
     */
    function dxCreate(opDef, url, arg1, arg2) {
        if (arg1 instanceof Backbone.Model && !opDef.payload) {
            dxUtil.fail('$$create does not allow a payload.');
        }

        var payload = arg1;
        var successError = arg2;
        if (!opDef.payload || !opDef.required && !(arg1 instanceof Backbone.Model)) {
            payload = undefined;
            successError = arg1;
        }

        return callOperation({}, {
            data: assertAndPreparePayload('$create', opDef, payload),
            url: url
        }, 'POST', opDef, successError);
    }

    /*
     * Entirely block the standard Backbone save() routine. We want users to call $$update() instead.
     */
    function noSave() {
        dxUtil.fail('Do not call save() directly. Instead, call $$update().');
    }

    /*
     * Update the version of this model on the server. This sends to the server:
     *  1) Any required or update:required attributes defined for this type
     *  2) Any required:false or update:optional attributes from the set passed in this function
     */
    function dxUpdate(attributes, successError) {
        var opDef = this._dxSchema.update;

        if (dxUtil.isNone(attributes) || _.isEmpty(attributes)) {
            dxUtil.fail('$$update must be called with a non-empty set of attributes.');
        }
        assertHasReferenceAttr(this, '$update', !this._dxSchema.singleton);

        var newModel = this.clone();
        newModel.set(attributes);

        var preparedData = JSON.stringify(jsonIzeForUpdate(attributes, newModel, this, true));

        return callOperation(this, {
            data: preparedData,
            url: this._dxGetUrl()
        }, 'POST', opDef, successError);
    }

    /*
     * Entirely block the standard Backbone fetc() routine.
     */
    function noFetch() {
        dxUtil.fail('Do not call fetch() directly. Instead, call getServerModel().');
    }

    /*
     * Mark the specified model as 'ready'. The 'triggerNotify' parameter controls whether we trigger the 'ready'
     * event. This is exposed to the level3 API so that a collection can be marked as ready before notifying consumers.
     */
    function makeReady(model, triggerNotify) {
        model._dxIsReady = true;

        _.each(model._dxSchema.properties, function (propDef, propName) {
            if (isEmbeddedProp(propDef) && model.get(propName)) {
                makeReady(model.get(propName), triggerNotify);
            }
        });

        if (triggerNotify) {
            triggerReady(model);
        }
    }

    /*
     * Handle an error for a successError callback or an array of callbacks.
     * The context error handler is invoked once unless all callbacks define a custom error handler.
     */
    function handleErrorResult(processedResult, successError) {
        var callbacks = _.isArray(successError) ? successError : [successError];
        var reportedError = false;
        _.each(callbacks, function (successError) {
            if (successError && successError.error) {
                successError.error(processedResult);
            } else if (!reportedError && (!successError || !successError.suppressDefaultErrorHandler)) {
                context.reportErrorResult(processedResult);
                reportedError = true;
            }
        });
    }

    /*
     * Fetches a model from the server, using Backbone's sync() function under the hood.
     */
    function dxFetch(successError) {
        var model = this;
        model._dxFetchQueue = model._dxFetchQueue || [];
        model._dxFetchQueue.push(successError);
        if (model._dxFetchQueue.length === 1) {
            dxFetchNow(model);
        }
    }

    function dxFetchNow(model) {

        /*
         * Applies the handler to the pending request queue.
         *
         * If there is more than one callback in the queue, apply the response to entries 0..N-2 and issue a new
         * dxFetch for the most recent request.
         *
         * If dxFetch requests are issued during callback execution, they do not resolve immediately.
         */
        function makeHandler(mainHandler) {
            return function dxFetchCallbackHandler(arg) {
                var queue = model._dxFetchQueue;
                delete model._dxFetchQueue;
                var callbacks = _.first(queue, Math.max(1, queue.length - 1));
                mainHandler(arg, callbacks);
                if (queue.length > 1) {
                    model._dxFetch(_.last(queue));
                }
            };
        }

        var options = {
            parse: true,
            success: makeHandler(function (resp, callbacks) {
                if (resp && resp.type === 'ErrorResult') {
                    var processedResult = resultToModel(resp);
                    model._dxErrorResult = processedResult;
                    triggerError(model);
                    return handleErrorResult(processedResult, callbacks);
                }

                model._dxErrorResult = undefined;
                model._dxSet(model.parse(resp), options);

                makeReady(model, true);

                _.each(callbacks, function (successError) {
                    if (successError && successError.success) {
                        successError.success(model);
                    }
                });

                model.trigger('sync', model);
            }),
            error: makeHandler(function (xhr, callbacks) {
                var errorResult = convertXhrToErrorResult(xhr);
                handleErrorResult(errorResult, callbacks);
                if (xhr && xhr.status === 404) {
                    model.trigger('badReference', model, errorResult);
                }
                model._dxErrorResult = errorResult;
                triggerError(model);
            })
        };

        Backbone.sync('read', model, options);
    }

    /*
     * ========================================
     * Operations: creation and handling
     * ========================================
     */

    /*
     * Examine the operations provided, and add them to the target object.
     *
     * target:     The object to add the constructed functions to
     * operations: A JSON object with keys as the operation names, and  values as definitions of that operation.
     * namePrefix  A string to prefix to the name of the operation when adding to the target
     * urlPrefix:  A string to prefix to the constructed url for the operation
     * perObject:  Whether these operations are ones that require the object's reference.
     */
    function addOperations(target, operations, namePrefix, urlPrefix, perObject) {
        _.each(operations, function (opDef, opName) {
            var opFunction;
            var opUrl = urlPrefix === '' ? opName : urlPrefix + '/' + opName;

            if (!_.isUndefined(opDef.payload)) {
                opFunction = _.isEmpty(opDef.payload) ? function (successError) {
                    return noPayloadFunction(this, opUrl, opDef, perObject, successError);
                } : function (payload, successFailure) {
                    return payloadFunction(this, opUrl, opDef, perObject, payload, successFailure);
                };
            } else {
                opFunction = _.isEmpty(opDef.parameters) ? function (successError) {
                    return noParametersFunction(this, opUrl, opDef, perObject, successError);
                } : function (parameters, successFailure) {
                    return parametersFunction(this, opUrl, opDef, perObject, parameters, successFailure);
                };
            }

            if (_.has(opDef, 'dxOperations')) {
                addOperations(target, opDef.dxOperations, namePrefix + opName + '_', opUrl, perObject);
            }

            target['$' + namePrefix + opName] = opFunction;
        });
    }

    /*
     * Call a server function that has no payload.
     */
    function noPayloadFunction(caller, opName, opDef, perObject, successError) {
        assertHasReferenceAttr(caller, opName, perObject);

        if (successError instanceof Backbone.Model) {
            dxUtil.fail('$' + opName + ' can not be called with a payload (only a success/error object).');
        }

        return callOperation(caller, {
            url: caller._dxGetUrl() + '/' + opName
        }, 'POST', opDef, successError);
    }

    /*
     * Call a server function that has a payload (which is always a single DSB model).
     */
    function payloadFunction(caller, opName, opDef, perObject, payload, successError) {
        assertHasReferenceAttr(caller, opName, perObject);

        return callOperation(caller, {
            data: assertAndPreparePayload(opName, opDef, payload),
            url: caller._dxGetUrl() + '/' + opName
        }, 'POST', opDef, successError);
    }

    /*
     * Call a server function that is a 'GET', and takes no parameters.
     */
    function noParametersFunction(caller, opName, opDef, perObject, successError) {
        assertHasReferenceAttr(caller, opName, perObject);

        return callOperation(caller, {
            url: caller._dxGetUrl() + '/' + opName
        }, 'GET', opDef, successError);
    }

    /*
     * Call a server function that expects one or more parameters.
     */
    function parametersFunction(caller, opName, opDef, perObject, parameters, successError) {
        var sendableParams;
        assertHasReferenceAttr(caller, opName, perObject);

        if (!_.isObject(parameters) && !dxUtil.isNone(parameters)) {
            dxUtil.fail('$' + opName + ' must be passed a (possibly empty) hash of parameters.');
        }

        if (!dxUtil.isNone(parameters)) {
            sendableParams = checkAndConvertParameters(parameters, opDef.parameters);
        }

        return callOperation(caller, {
            data: sendableParams,
            url: caller._dxGetUrl() + '/' + opName
        }, 'GET', opDef, successError);
    }

    function assertHasReferenceAttr(model, opName, perObject) {
        if (!model.id && perObject) {
            dxUtil.fail('$' + opName + ' can not be called without a reference property set.');
        }
    }

    /*
     * Invoke whatever operation was set up, above, and then handle the return values.
     * Handling a return value means:
     *  1) If a success handler was provided, and OKResult (or subtype) was returned, pass that to the handler.
     *  2) IF an error handler was provided, and an ErrorResult was returned, pass the ErrorResult to the handler.
     *     Otherwise pass it on to the standard application-wide error handler, unless suppressErrorHandler was
     *     specified.
     *  3) IF some other error occurred, wrap the HTTP failure information into a new ErrorResult and either pass
     *     onto the provided handler or the system-wide hander, unless suppressErrorHandler was specified.
     */
    function callOperation(caller, options, type, opDef, successError) {
        if (successError && _.has(successError, 'success') && !_.isFunction(successError.success)) {
            dxUtil.fail('The success handler must be a function, but found a ' + typeof successError.success + '.');
        }

        if (successError && _.has(successError, 'error') && !_.isFunction(successError.error)) {
            dxUtil.fail('The error handler must be a function, but found a ' + typeof successError.error + '.');
        }

        var deferred = new $.Deferred();

        var params = {
            success: function success(result) {
                var processedResult;
                if (result && result.type === 'ErrorResult') {
                    processedResult = resultToModel(result);
                    handleErrorResult(processedResult, successError);
                    deferred.reject(processedResult);
                } else {
                    if (dxUtil.isNone(result) || dxUtil.isNone(result.type)) {
                        dxUtil.fail('Operation returned success, but without a typed object: ' + result);
                    }
                    if (dxUtil.isNone(opDef['return']) && result.result === '') {
                        delete result.result;
                    }
                    assertValueMatchesDefinition('(return value)', result.result, opDef['return']);
                    processedResult = resultToModel(result);
                    if (successError && successError.success) {
                        successError.success(processedResult);
                    }
                    if (successError && successError.jsonSuccess) {
                        successError.jsonSuccess(result);
                    }
                    deferred.resolve(processedResult);
                }
            },
            error: function error(xhr) {
                var errorResult = convertXhrToErrorResult(xhr);
                handleErrorResult(errorResult, successError);
                deferred.reject(errorResult);
            }
        };

        if (_.isFunction(caller.trigger)) {
            caller.trigger('request', caller);
        }

        _.extend(params, options);

        params.type = type;
        dxAjax.ajaxCall(params);
        return deferred.promise();
    }

    /*
     * Validate that the payload matches the definition for the operation.
     */
    function assertAndPreparePayload(opName, opDef, payload) {
        if (dxUtil.isNone(payload) && opDef.payload && opDef.payload.required) {
            dxUtil.fail('Must call $' + opName + ' with a payload of type ' + opDef.payload.$ref + '.');
        }

        if (!dxUtil.isNone(payload)) {
            if (!_.isObject(payload) || !(payload instanceof Backbone.Model)) {
                dxUtil.fail('Must call $' + opName + ' with a backbone model.');
            }

            if (!payload.instanceOf(opDef.payload.$ref)) {
                dxUtil.fail('Must call $' + opName + ' with an instance of ' + opDef.payload.$ref + '.');
            }

            return JSON.stringify(jsonIze(payload, opDef.validateAs || 'send'));
        }
    }

    /*
     * Given a parameters object (an ordinary JSON object), compare these with the parameter definitions from the
     * schemas.  If there are any type mismatches, parameters that are not supported, or required parameters that are
     * missing, throw an error.
     *
     * Return a copy of the parameters that are suitable for passing to an AJAX call (Date object converted to
     * the server date string format)
     */
    function checkAndConvertParameters(parameters, paramDefinitions) {
        parameters = parameters || {};
        var undefinedParams = _.omit(parameters, _.keys(paramDefinitions));
        if (!_.isEmpty(undefinedParams)) {
            dxUtil.fail(_.keys(undefinedParams).join(', ') + ' is not a valid parameter name.');
        }

        _.each(parameters, function (value, key) {
            if (_.isUndefined(value)) {
                dxUtil.fail('Can not send a request with an undefined parameter (' + key + ' is undefined).');
            }
        });

        _.each(paramDefinitions, function (paramDef, paramName) {
            if (_.has(parameters, paramName)) {
                assertValueMatchesDefinition(paramName, parameters[paramName], paramDef);
            } else if (paramDef.required) {
                dxUtil.fail(paramName + ' is required, but has not been passed.');
            }
        });

        // slightly misuse the jsonIze() routine. It does what we need, even if parameters isn't a Backbone model.
        return jsonIze(parameters, 'send');
    }

    /*
     * ========================================
     * Model creation functions
     * ========================================
     */

    /*
     * Returns a new DSB model which is set to be a server model.
     */
    function newServerModel(typeName) {
        var model = makeNewModel(typeName, false);

        makeIntoServerModel(model);

        return model;
    }

    /*
     * Returns a new DSB model which is set to be a client model.
     */
    function newClientModel(typeName) {
        var model = makeNewModel(typeName, true);
        makeReady(model, true);
        return model;
    }

    /*
     * Convert a JSON result object into a client model.
     */
    function resultToModel(result) {
        var model = newClientModel(result.type);
        model.set(result);
        return model;
    }

    /*
     * Create a new model instance. Aside from creating the model, we manually populate the default set of attributes,
     * since the Backbone system doesn't really understand embedded models.
     */
    function makeNewModel(typeName, isClient) {
        if (dxUtil.isNone(typeName)) {
            dxUtil.fail('To create a new model, a type name must be provided.');
        }

        if (!isSchemaType(typeName)) {
            dxUtil.fail(typeName + ' is not a known type name. Can not create one.');
        } else {
            var model = new context._modelConstructors[typeName]();
            model._dxIsClientModel = isClient;
            buildDefaultAttributes(model, model._dxSchema.properties || {});
            return model;
        }
    }

    /*
     * Fill in the defaults for all attributes on the specified model.  This directly manipulates the attributes
     * property, thus bypassing the normal set() semantics.  This is actually OK, as the default Backbone behavior is
     * not to change its changedAttributes() values (etc) at creation time. Additionally, we don't want to be triggering
     * events when doing this.
     */
    function buildDefaultAttributes(model, propDefs) {
        _.each(propDefs, function (propDef, propName) {
            model.attributes[propName] = defaultFor(propDef, model._dxIsClientModel);
        });

        if (!_.isUndefined(propDefs.type)) {
            model.attributes.type = model._dxSchema.name;
        }
    }

    /*
     * Given a type definition, return the default value for that type.
     */
    function defaultFor(propDef, isClientModel) {
        var defaultValue = propDef['default'];

        // Expose "null" from the server as "undefined" to our clients
        if (propDef['default'] === null) {
            defaultValue = undefined;
        }

        if (_.isUndefined(defaultValue) && propDef.type === 'object') {
            if (_.has(propDef, '$ref') && propDef.$ref !== 'Json') {
                defaultValue = isClientModel ? newClientModel(propDef.$ref) : newServerModel(propDef.$ref);
            }
        }

        return defaultValue;
    }

    /*
     * Changes the specified model (and its embedded models) into a server model.
     */
    function makeIntoServerModel(model) {
        model._dxIsClientModel = false;

        if (model._dxSchema['delete']) {
            model.$$delete = model._dxStandardOps.$$delete;
        }

        if (model._dxSchema.update) {
            model.$$update = model._dxStandardOps.$$update;
        }

        model.set = cantModifyServerModel;
        model.clear = cantModifyServerModel;
        model.unset = cantModifyServerModel;
        model.sync = cantModifyServerModel;

        _.each(model._dxSchema.properties, function (propDef, propName) {
            if (isEmbeddedProp(propDef)) {
                makeIntoServerModel(model.get(propName));
            }
        });
    }

    function cantModifyServerModel() {
        dxUtil.fail('Can not modify a server ' + this._dxSchema.name + ' instance.');
    }

    /*
     * Given a type, locate the root parent type (which will be, when walking up the inheritance chain, the last type
     * that has the same value in its root property)
     */
    function getRootType(childType) {
        if (!_.isString(childType)) {
            dxUtil.fail('Must call with a type name.');
        }

        if (!isSchemaType(childType)) {
            dxUtil.fail(childType + ' is not a known type name.');
        }

        return context._modelConstructors[childType].prototype._dxSchema.rootTypeName;
    }

    /*
     * Given xn XmlHttpRequest (or the equivalent), either extract the ErrorResult object from within it and return
     * that, or manufacture an ErrorResult object which contains the HTTP failure information and return that.
     */
    function convertXhrToErrorResult(xhr) {
        var responseInfo = xhr.responseText;

        // for testing xhr may not have getResponseHeader, and not all responses have a content-type!
        var contentType = dxUtil.isNone(xhr.getResponseHeader) ? undefined : xhr.getResponseHeader('content-type');

        if (!dxUtil.isNone(contentType) && contentType.indexOf('application/json') > -1 && !_.isObject(responseInfo)) {
            try {
                responseInfo = JSON.parse(responseInfo);
            } catch (e) {
                dxUtil.fail('Server response claimed to be application/json, but couldn\'t be parsed as JSON (' + xhr.responseText + ').');
            }
        }

        if (responseInfo && responseInfo.type === 'ErrorResult') {
            return resultToModel(responseInfo);
        } else {
            var errorResult = newClientModel('ErrorResult');
            errorResult.get('error').set({
                details: 'Communication Error',
                commandOutput: 'HTTP Error: ' + xhr.status + '\n' + 'Status text: ' + xhr.statusText + '\n' + 'Response text: ' + xhr.responseText
            });
            return errorResult;
        }
    }

    /*
     * ========================================
     * 'subroutines' and utility functions
     * ========================================
     */

    /*
     * Validates that the attribute name is a valid attribute name for the model. If so, this returns information about
     * the attribute (see getAttrInfo).
     */
    function assertAndGetAttrInfo(model, attrName) {
        var info = getAttrInfo(model, attrName);

        if (_.isUndefined(info.propDef)) {
            dxUtil.fail(attrName + ' is not a known attribute.');
        }

        return info;
    }

    /*
     * This returns information about the attribute, including its base name (if the value passed was $attr, this
     * returns 'attr'), whether this was a $-prefixed name (and thus it is actually asking for the referenced model),
     * and the definition of the schema property.
     */
    function getAttrInfo(model, attrName) {
        if (!_.isString(attrName)) {
            dxUtil.fail('Must provide an attribute name.');
        }

        var baseName = attrName;
        var wantsModel = false;
        if (baseName.charAt(0) === '$') {
            baseName = baseName.substring(1);
            wantsModel = true;
        }
        var props = model._dxSchema.properties;
        var propDef = props ? props[baseName] : undefined;

        return {
            baseName: baseName,
            wantsModel: wantsModel,
            propDef: propDef
        };
    }

    var dateStringRegex = /\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d.\d\d\dZ/;

    /*
     * Asserts that the specified value matches (is compatible with) the type specified by the definition.
     */
    function assertValueMatchesDefinition(name, value, def) {
        /*
         * Returns the type of the value.  The return values include Javascript typeof type (undefined, object,
         * boolean, number, string, etc) types, with JSON Schema type refinements (null, array, integer).
         */
        function typeOfValue(value) {
            if (_.isNull(value)) {
                return 'null';
            }

            if (_.isArray(value)) {
                return 'array';
            }

            if (typeof value === 'number') {
                return value === Math.floor(value) ? 'integer' : 'number';
            }

            if (value instanceof Date) {
                return 'date';
            }

            if (typeof value === 'string' && dateStringRegex.exec(value)) {
                return 'date-or-string'; // could be either.
            }

            return typeof value;
        }

        function isTypeCompatible(actualType, objectType, defType, defObjectType, defFormat) {
            if (actualType === 'integer' && defType === 'number') {
                return true;
            } else if (actualType === 'null' || actualType === 'undefined') {
                return true; // can assign null or undefined to all types
            } else if (actualType === 'date' && defType === 'string' && defFormat === 'date') {
                    return true;
                } else if (actualType === 'date-or-string' && defType === 'string') {
                    if (defFormat === 'date') {
                        type = 'date';
                    } else {
                        type = 'string';
                    }
                    return true;
                } else if (defType === 'object' && actualType === 'object') {
                    if (_.isUndefined(defObjectType) || // definition is typeless
                    !_.isUndefined(defObjectType) && _.isUndefined(objectType) || // new value is typeless
                    defObjectType === objectType || // types same
                    firstIsSubtypeOfSecond(objectType, defObjectType)) {
                        // new value is subtype
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return defType === actualType;
                }
        }

        var type = typeOfValue(value);
        var objectType = type === 'object' ? value.type : undefined;
        var typeMatches;

        if (_.isUndefined(def)) {
            if (dxUtil.isNone(value)) {
                return type;
            } else {
                dxUtil.fail(name + ' has a value, but it has no definition.');
            }
        }

        if (_.isArray(def.type)) {
            typeMatches = _.find(def.type, function (defType) {
                return isTypeCompatible(type, objectType, defType, def.$ref, def.format);
            });
        } else {
            typeMatches = isTypeCompatible(type, objectType, def.type, def.$ref, def.format);
        }

        if (!typeMatches) {
            if (!def.$ref) {
                dxUtil.fail(name + ' has to be type ' + (def.type === 'string' && def.format === 'date' ? 'date' : def.type) + ' but is ' + type + ' (' + JSON.stringify(value) + ')');
            } else {
                dxUtil.fail(name + ' has to be type ' + def.type + '/' + def.$ref + ' but is ' + type + '/' + objectType);
            }
        }

        /*
         * Note: def.enum throws an error in IE8.  We're also good with undefined/null from previous checks but those
         * values obviously aren't part of the enum
         */
        if (def['enum'] && !dxUtil.isNone(value) && !_.contains(def['enum'], value)) {
            dxUtil.fail(name + ' is an enum and has to be one of ' + JSON.stringify(def['enum']) + ' but is ' + JSON.stringify(value));
        }

        return type;
    }

    /*
     * Change the model to another type.  This is done "in place" since we want to preserve any listeners that may
     * have been attached to this object.
     *
     * This returns true if this removed any attributes (it also triggers a 'change:attrName' event for each)
     */
    function convertToType(model, newType) {
        var SourceConstructor = context._modelConstructors[model.get('type')];
        var TargetConstructor = context._modelConstructors[newType];

        // add metadata from the target type, overriding our own.
        model._dxSchema = TargetConstructor.prototype._dxSchema;
        model.urlRoot = TargetConstructor.prototype._dxSchema.root;

        // replace our attributes
        model.attributes = {};
        buildDefaultAttributes(model, model._dxSchema.properties);

        // Remove any operations we previously may have added to this object.
        _.each(model, function (value, name) {
            if (name.charAt(0) === '$') {
                delete model[name];
            }
        });

        /*
         * This is really sad. Since we can't change the prototype of the object at runtime, we necessarily inherit the
         * operations from its prototype.  But if by chance we are converting to a type that doesn't have those
         * operations, we should not allow someone to call them. Insert a dummy function on the leaf object in the
         * prototype chain to keep anyone from actually calling it.
         */
        _.each(SourceConstructor.prototype, function (value, name) {
            if (name.charAt(0) === '$') {
                model[name] = blockPrototypeOperation;
            }
        });

        // Now actually add the operations to this that it should have based on the type it is being converted to.
        _.each(TargetConstructor.prototype, function (value, name) {
            if (name.charAt(0) === '$') {
                model[name] = value;
            }
        });

        if (model._dxSchema['delete']) {
            model.$$delete = dxDelete;
        }

        if (model._dxSchema.update) {
            model.$$update = dxUpdate;
        }
    }

    function blockPrototypeOperation() {
        dxUtil.fail('This operation does not exist on this instance. (it has been converted from a type that had it).');
    }

    function firstIsSubtypeOfSecond(childType, parentType) {
        var candidateInfo = isSchemaType(childType) ? context._modelConstructors[childType].prototype._dxSchema : undefined;

        while (candidateInfo) {
            if (candidateInfo.name === parentType) {
                return true;
            }

            candidateInfo = candidateInfo.parentSchema;
        }

        return false;
    }

    /*
     * As part of the set() process, we can take a JSON array, and convert it into an array ready to be set on the
     * model. This involves two special processes: If an 'items' property has been specified, enforce the type
     * constraint expressed there, and if an object is found that could be converted into a DSB model, create a new
     * model and add it.
     */
    function setupArray(arrayValue, itemDef) {
        var newArray = [];

        _.each(arrayValue, function (value) {
            if (!_.isUndefined(itemDef)) {
                assertValueMatchesDefinition('(array item)', value, itemDef);
            }

            if (_.isArray(value)) {
                newArray.push(setupArray(value));
            } else if (_.isObject(value)) {
                newArray.push(setupObject(value));
            } else {
                newArray.push(value);
            }
        });

        return newArray;
    }

    /*
     * As part of the set() process, take the provided JSON object data, and either convert it into a DSB model, using
     * the type value in the JSON object, or recursively process all the elements in the object and set those on the
     * object this returns.
     */
    function setupObject(objectValue) {
        var newObj = {};

        if (objectValue instanceof Backbone.Model) {
            objectValue = objectValue.toJSON();
        }

        if (isSchemaType(objectValue.type)) {
            newObj = context._cache.getCachedModelFromProperties(objectValue);
        } else {
            _.each(objectValue, function (value, key) {
                if (_.isArray(value)) {
                    newObj[key] = setupArray(value);
                } else if (_.isObject(value)) {
                    newObj[key] = setupObject(value);
                } else {
                    newObj[key] = value;
                }
            });
        }

        return newObj;
    }

    /*
     * Return a version of this model in JSON format, according to the specified mode. The mode may have several values
     * which cause different versions of the model to be returned:
     *
     * undefined: Return all properties.
     * send: Return all non-null required and optional values.
     * create: Return all non-null create required and optional values, as well as required ones.
     * update: Return all non-null update required and optional values, as well as required ones.
     *
     * send, create and update all throw errors if a required attribute is null or undefined (unless that attribute
     * is of type 'null')
     */
    function jsonIze(value, mode) {
        var result;
        if (value instanceof Backbone.Model) {
            result = {};
            _.each(value._dxSchema.properties, function (propDef, key) {
                var attrValue = value.get(key);

                // ordinary jsonizing returns everything
                if (_.isUndefined(mode)) {
                    result[key] = jsonIze(attrValue, mode);
                    return;
                }

                // Don't include read-only properties when sending a property
                if (isReadOnly(propDef, mode)) {
                    return;
                }

                var required = isRequired(propDef, mode);

                // Don't send null when it won't be accepted
                if (dxUtil.isNone(attrValue) && !isNullableType(propDef)) {
                    if (required) {
                        dxUtil.fail('The attribute ' + key + ' is required to be non-null/non-undefined.');
                    }
                    return;
                }

                result[key] = jsonIze(attrValue, mode);
            });
        } else if (_.isArray(value)) {
            result = [];
            _.each(value, function (item) {
                result.push(jsonIze(item, mode));
            });
        } else if (_.isObject(value)) {
            if (value instanceof Date) {
                result = value.toJSON();
            } else {
                result = {};
                _.each(value, function (propValue, key) {
                    result[key] = jsonIze(propValue, mode);
                });
            }
        } else {
            result = _.isUndefined(value) ? null : value;
        }

        return result;
    }

    /*
     * Doing a $$update requires some special handling, hence it's own jsonize routine here.  The parameters to this are
     *    updateAttrs:   A raw object/hash of attributes that the user has asked to send as an update
     *                   This is needed because it gives us a direct view of which attributes the caller wants to send.
     *    updateModel:   A model that has been .set() with those attributes. This is needed because it has the forms of
     *                   the attributes that have already been fully processed by the overall model system here.
     *    baseModel:     The model that the update is related to. This is needed in order to retrieve some values that
     *                   must be included in the update but were not explicitly set. It also helps us determine when a
     *                   value doesn't need to be sent because the new value is the same as the old.
     *    propsRequired: Whether the properties generated by this call must be included. Always true at the top level,
     *                   and each recursive call sets it based on the schema definition.
     *
     * The basic algorithm here is:
     *    Go over each property in the schema definition
     *    If there is an update attribute for it, then add that to the hash of properties we will return
     *      (but use the jsonIzed version of that attribute from the updateModel, to get all the benefits of proper
     *      jsonization)
     *    However, there are some caveats:
     *       - If the update specifies a value which is not changed, don't send a duplicate
     *       - If a property is required for update, but isn't included in the attributes, grab it from the
     *         base model
     *       - If the update attributes specified an undefined value, and the property is allowed to be null,
     *         we send a null.
     *       - Embedded models need special handling.  If the embedded model is required, then we simply add it to
     *         the set of properties we are returning. If the embedded model is optional, however, then if there are no
     *         new values in that embedded model (even if there are required properties there) then it is not included
     *         in the update.  This, then, is the reason for the propsRequired parameter and the propCount in the
     *         routine.  We tell each subsequent call whether we want it to return the properties even if there is
     *         nothing new.
     */
    function jsonIzeForUpdate(rawUpdateObj, updateModel, baseModel, propsRequired) {
        var jsonUpdatePayload = {};
        var propCount = 0;
        _.each(updateModel._dxSchema.properties, function (propDef, key) {
            // Don't include read-only properties when sending a property
            if (isReadOnly(propDef, 'update')) {
                return;
            }

            var required = isRequired(propDef, 'update');

            if (isEmbeddedProp(propDef)) {
                var subProps = rawUpdateObj ? rawUpdateObj[key] : undefined;
                var baseEmbedded = baseModel.get(key);
                var updateEmbedded = updateModel.get(key);
                var embJson;
                /*
                 * The update may legitimately be trying to change the type of an embedded object. In this case we can't
                 * keep using the baseModel's embedded model to extract properties from (in particular, there may be
                 * properties in the 'update' data that aren't in the embedded model, so there's nothing to extract).
                 * Further, our definition of changing types in embedded models is that we do not preserve any
                 * properties properties that were there before, even if they could be. In this regard, changing the
                 * type isn't an overlay, but is instead a replace operation. To make this work here we create a new
                 * model to be used as the base model for the recursive call to jsonIzing.
                 */
                if (baseEmbedded.get('type') !== updateEmbedded.get('type')) {
                    // Doing an update that changes the type really means we are just sending the new data
                    embJson = jsonIze(updateEmbedded, 'update');
                } else {
                    embJson = jsonIzeForUpdate(subProps, updateEmbedded, baseEmbedded, required);
                }
                if (!_.isUndefined(embJson)) {
                    jsonUpdatePayload[key] = embJson;
                    propCount++;
                }
            } else {
                var baseAttrJson = jsonIze(baseModel.get(key), 'update');
                var updateAttrJson = jsonIze(updateModel.get(key), 'update');
                var updateValue = updateWithChangedValue(rawUpdateObj, key, baseAttrJson, updateAttrJson);

                if (updateValue) {
                    throwIfBadNull(updateAttrJson, propDef, key);
                    propCount++;
                    jsonUpdatePayload[key] = updateAttrJson;
                }
                if (required && !updateValue) {
                    throwIfBadNull(baseAttrJson, propDef, key);
                    jsonUpdatePayload[key] = baseAttrJson;
                }
            }
        });

        var returnValue = propsRequired || propCount > 0;

        return returnValue ? jsonUpdatePayload : undefined;
    }

    function updateWithChangedValue(rawUpdateObj, key, baseAttrJson, updateAttrJson) {
        return !_.isUndefined(rawUpdateObj) && _.has(rawUpdateObj, key) && !_.isEqual(baseAttrJson, updateAttrJson);
    }

    /*
     * Determine whether the specified property is 'read only' in the current jsonizing mode. It is readonly if
     * it there are no required or create/update settings, or if it is explicitly readonly.
     */
    function isReadOnly(propDef, mode) {
        var readOnly = mode === 'create' && (_.isUndefined(propDef.create) && _.isUndefined(propDef.required) || propDef.create === 'readonly') || mode === 'update' && (_.isUndefined(propDef.update) && _.isUndefined(propDef.required) || propDef.update === 'readonly');
        return readOnly;
    }

    /*
     * Determine whether the specified property is 'required' given the specified jsonizing mode.
     */
    function isRequired(propDef, mode) {
        var required = propDef.required === true || propDef.create === 'required' && mode === 'create' || propDef.update === 'required' && mode === 'update';
        return required;
    }

    /*
     * Determine whether the specified property is one that allows null values
     */
    function isNullableType(propDef) {
        return _.isArray(propDef.type) ? _.contains(propDef.type, 'null') : propDef.type === 'null';
    }

    function isEmbeddedProp(propDef) {
        return propDef.type === 'object' && _.has(propDef, '$ref') && propDef.$ref !== 'Json';
    }

    function isObjectRefProp(propDef) {
        if (_.isArray(propDef.type)) {
            return _.contains(propDef.type, 'string') && propDef.format === 'objectReference';
        }
        return propDef.type === 'string' && propDef.format === 'objectReference';
    }

    function throwIfBadNull(value, propDef, key) {
        if (dxUtil.isNone(value) && !isNullableType(propDef)) {
            dxUtil.fail('The attribute ' + key + ' is required to be non-null/non-undefined.');
        }
    }

    function isSchemaType(typeName) {
        return !!context._modelConstructors[typeName];
    }

    /*
     * ========================================
     * Actually do the work of this function
     * ========================================
     */

    context = context || this;
    context._modelConstructors = context._modelConstructors || {};
    context.rootOps = context.rootOps || {};

    _.each(schemas, function (schema, typeName) {
        var rwModel = {
            _dxSchema: schema,
            _dxIsReady: false,
            _dxErrorResult: undefined,
            _dxIsClientModel: false,
            _dxStandardOps: {},
            idAttribute: 'reference',
            urlRoot: schema.root,
            _dxSet: dxSet,
            _dxClear: dxClear,
            _dxFetch: dxFetch,
            _dxGetUrl: dxUrl,
            _dxMakeReady: function _dxMakeReady() {
                makeReady(this, false);
            },
            on: dxOn,
            get: dxGet,
            set: dxSet,
            has: dxHas,
            unset: dxUnset,
            clear: dxClear,
            toJSON: dxToJSON,
            fetch: noFetch,
            save: noSave,
            destroy: noDestroy,
            parse: dxParse,
            clone: dxClone,
            instanceOf: instanceOf,
            isServerModel: isServerModel
        };

        function getRootUrl() {
            return schema.root;
        }

        addOperations(rwModel, schema.operations, '', '', true);

        if (schema.rootOperations) {
            /*
             * Root operations on singletons are, essentially object operations, as far as the client object model
             * is concerned. So, treat those root operations as object operations.  However, there are also some
             * singleton 'pseudo-objects' (e.g. delphix_common) which only exist to hold a few operations, so those we
             * put on the rootOps object.  These pseudo-objects all prefixed by 'delphix_'.
             */
            if (schema.singleton && schema.name.indexOf('delphix_') !== 0) {
                addOperations(rwModel, schema.rootOperations, '', '', false);
            } else {
                context.rootOps[typeName] = {};
                context.rootOps[typeName]._dxGetUrl = getRootUrl;
                addOperations(context.rootOps[typeName], schema.rootOperations, '', '', false);
            }
        }

        if (schema.create) {
            context.rootOps[typeName] = context.rootOps[typeName] || {};
            context.rootOps[typeName].$$create = function (payload, successError) {
                return dxCreate(schema.create, getRootUrl(), payload, successError);
            };
        }

        if (schema['delete']) {
            rwModel._dxStandardOps.$$delete = dxDelete;
        }

        if (schema.update) {
            rwModel._dxStandardOps.$$update = dxUpdate;
        }

        context._modelConstructors[typeName] = Backbone.Model.extend(rwModel);
    });

    _.extend(context, {
        _checkAndConvertParameters: checkAndConvertParameters,
        _newServerModel: newServerModel,
        _newClientModel: newClientModel,
        _getRootType: getRootType,
        _convertXhrToErrorResult: convertXhrToErrorResult,
        _handleErrorResult: handleErrorResult
    });

    // Add a trivial function for reporting an ErrorResult.  This is added for testing and only if level3 isn't here.
    if (!context.reportErrorResult) {
        context.reportErrorResult = function () {};
    }
};

},{"dxcore/js/ajax.js":13,"dxcore/js/util.js":23}],11:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $, _, Backbone */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxCreationListener = require('dxcore/data/layer2/js/creationListener.js'),
    dxSchema = require('dxcore/data/layer1/js/schema.js'),
    dxCache = require('dxcore/data/layer2/js/cache.js'),
    dxModel = require('dxcore/data/layer2/js/model.js'),
    dxCollection = require('dxcore/data/layer2/js/collection.js'),
    dxNotification = require('dxcore/data/layer3/js/notification.js'),
    dxFilter = require('dxcore/data/layer2/js/filter.js');

/*
 * This defines the public API of the Delphix Data System. It relies heavily on the infrastructure built in the
 * files containing the level 1 and level 2 code.
 *
 * This provides several public functions to get at Delphix-Schema-Based models and collections:
 *     newClientModel                  Returns a 'read/write' model of the specified schema type.
 *
 *     getServerModel                  Returns a 'read-only' model of the specified schema type which is kept in
 *                                     sync with the server as long as it remains a member of a Server Collection.
 *
 *     getServerSingleton              Returns a 'read-only' model of the specified schema type.
 *
 *     getServerCollection             Returns a 'read-only' collection which contains Server Models of a particular
 *                                     type.
 *
 *     getCreationListener             Register a creation listener for a particular type.
 *
 *     getCollectionTypeFromModelType  Returns the name of the collection type that the specified model type belongs to.
 *
 *     setErrorCallback                Set an error callback function that will be called by reportErrorResult on an
 *                                     error.
 *
 *     reportErrorResult               Convenience routine which will display an ErrorResult object to the user on the
 *                                     screen. This is mainly useful if you have an operation error handler which,
 *                                     after examining the ErrorResult model, you still wish to show it to the user.
 */
module.exports.setupDataSystem = function setupDataSystem(schemas, context) {
    /*
     * Returns a new client model.
     *
     * typeName: The type of the model. If a DB2Container is desired, then DB2Container should be passed.
     */
    function newClientModel(typeName) {
        return context._newClientModel(typeName);
    }

    /*
     * Returns a Server Collection for the specified type.  Each call returns a new collection, which may contain
     * distinct elements from other collections of the same type.  The collection is 'read only', which means its
     * contents may not be directly manipulated. However, its contents may be changed with the $$list() operation on
     * the collection.
     *
     * typeName:    This should be the 'root type' for the collection type wanted. That is, if one wants a collection
     *              of DB2Containers, one should pass 'Container' here.
     * resetOnList: If true, $$list()'s will only trigger a single 'reset' event rather than individual 'add' and
     *              'remove' events. Otherwise this happens only when the $$list() fully replaces the contents of the
     *              collection.
     */
    function getServerCollection(typeName, resetOnList) {
        var collection = context._newServerCollection(typeName, resetOnList);
        context._modelSubscribersStore.add(collection);
        return collection;
    }

    /*
     * Returns a creation listener for the specified type. Each call returns a new listener, which must be disposed
     * so as to free resources.
     *
     *   typeName       The schema type for which one receives notifications.
     *
     *   callback       A function to be invoked with a level2 model as argument for each create notification.
     *
     *   queryParams    Optional query parameters used to filter notifications.
     */
    function getCreationListener(settings) {
        if (dxUtil.isNone(settings)) {
            dxUtil.fail('Settings must be specified.');
        }
        _.extend(settings, {
            context: context
        });

        var creationListener = new dxCreationListener.CreationListener(settings);
        context._modelSubscribersStore.add(creationListener);
        return creationListener;
    }

    /*
     * Returns the Server Model representing the specified singleton. If it already exists in the set of models the data
     * system is maintaining, that same instance will be returned. Otherwise a new instance will be returned and its
     * data asynchronously retrieved from the server.
     *
     * typeName:     The name of the type to fetch
     * options:      An object that may contain success and/or error callback functions. If the model is already present
     *               success will be invoked immediately. If it isn't present, success or error will be called once the
     *               underlying fetch has been completed. Additionally, one may set suppressDefaultErrorHandler as an
     *               option here to prevent the default error handler from being executed on error.
     */
    function getServerSingleton(typeName, options) {
        options = _.extend(_.clone(options || {}), {
            update: !context.notification.isStarted()
        });
        var model = context._cache.getCachedSingleton(typeName, options);

        if (!context.notification.isStarted()) {
            model._dxIsReady = false; // if someone sets a ready handler, don't let it fire until new data is back
        }

        return model;
    }

    /*
     * Return the Server Model instance with the specified reference and of the specified type. If the model already
     * is being maintained by the data system, this will return the same instance. If not, a new instance will be
     * returned, and a request to populate it from data on the server.  To determine if the model has at least an
     * initial set of data, one should assign a 'ready' event handler (probably with the once() function).
     *
     * reference:    The reference for the model
     * typeName:     The type for the model. If the desired model is a DB2Container, can be 'Container' or
     *               'DB2Container'. If the type is not known, assume the most general root type ('Container') should be
     *               passed.
     * suppressDefaultErrorHandler:      If truthy, the default error handled is not triggered on errors.
     */
    function getServerModel(reference, typeName, suppressDefaultErrorHandler) {
        var model = context._cache.getCachedModel(reference, typeName, { suppressDefaultErrorHandler: suppressDefaultErrorHandler });

        if (!context.notification.isStarted()) {
            model._dxIsReady = false; // if someone sets a ready handler, don't let it fire until new data is back
            model._dxFetch({ suppressDefaultErrorHandler: suppressDefaultErrorHandler });
        }

        return model;
    }

    /*
     * Gets a server model and returns a jQuery Promise.
     * This promise is resolved with the model if/when the model's ready' event is triggered.
     * It is rejected if/when the model's 'error' event is triggered.
     * For a description of the parameters see context.getServerModel()
     */
    function getServerModelPromise(reference, typeName, suppressDefaultErrorHandler) {
        var deferred = new $.Deferred();
        var model = context.getServerModel(reference, typeName, suppressDefaultErrorHandler);

        return setupPromise(model, deferred);
    }

    /*
     * Gets a server singleton and returns a jQuery Promise.
     * This promise is resolved with the singleton if/when the model's ready' event is triggered.
     * It is rejected if/when the singleton's 'error' event is triggered.
     * For a description of the parameters see context.getServerSingleton()
     */
    function getServerSingletonPromise(typeName, successError) {
        var deferred = new $.Deferred();
        var model = context.getServerSingleton(typeName, successError);

        return setupPromise(model, deferred);
    }

    /*
     * Helper function for getServerModelPromise and getServerSingletonPromise.
     * Note: This is exposed as _setupPromise for testing purposes only.
     */
    function setupPromise(model, deferred) {
        function onReadyCallback() {
            deferred.resolve(model);
        }
        function onErrorCallback() {
            deferred.reject(model);
        }

        model.once('ready', onReadyCallback);
        model.once('error', onErrorCallback);

        // use promise() to lock to deferred, exposing only methods to attach callbacks
        return deferred.promise();
    }

    /*
     * Given a model type, return the name of the 'root type'. Given DB2Container, OracleContainer, or Container, this
     * will return Container.
     */
    function getCollectionTypeFromModelType(modelType) {
        return context._getRootType(modelType);
    }

    /*
     * Sets an error callback that will be called by reportErrorResult. This is useful for an external system to define
     * behavior that will be used by the dxData system when an ErrorResult is reported by an operation
     */
    var errorCallback;
    function setErrorCallback(func) {
        if (!_.isFunction(func)) {
            dxUtil.fail('setErrorCallback expects a function as an argument.');
        }
        errorCallback = func;
    }

    /*
     * Reports an ErrorResult model to the end user in the best fashion available at this time.
     */
    function reportErrorResult(errorResult) {
        if (!(errorResult instanceof Backbone.Model) || errorResult.get('type') !== 'ErrorResult') {
            dxUtil.fail('reportErrorResult expects an ErrorResult model as an argument.');
        }

        // errorCallback is set by an external source using setErrorCallback
        if (errorCallback) {
            errorCallback(errorResult);
        }

        dxUtil.warn('Error result: ' + JSON.stringify(errorResult.toJSON()));
    }

    /*
     * Start the real work here. Initialize everything 'below' us.
     */
    context = context || this;
    var parsedSchemas = dxSchema._prepareSchemas(schemas);
    var enums = dxSchema._prepareEnums(parsedSchemas);
    dxCache._initCache(context);
    dxFilter._initFilters(context);
    dxModel._generateModelConstructors(parsedSchemas, context);
    dxCollection._generateCollectionConstructors(parsedSchemas, context);
    dxNotification._setupNotificationSystem(context);

    _.extend(context, {
        parsedSchemas: parsedSchemas,
        enums: enums,
        getServerCollection: getServerCollection,
        getCreationListener: getCreationListener,
        getServerSingleton: getServerSingleton,
        newClientModel: newClientModel,
        getServerModel: getServerModel,
        setErrorCallback: setErrorCallback,
        getServerModelPromise: getServerModelPromise,
        getServerSingletonPromise: getServerSingletonPromise,
        _setupPromise: setupPromise, // Exposed for testing purposes
        reportErrorResult: reportErrorResult,
        getCollectionTypeFromModelType: getCollectionTypeFromModelType
    });
};

},{"dxcore/data/layer1/js/schema.js":5,"dxcore/data/layer2/js/cache.js":6,"dxcore/data/layer2/js/collection.js":7,"dxcore/data/layer2/js/creationListener.js":8,"dxcore/data/layer2/js/filter.js":9,"dxcore/data/layer2/js/model.js":10,"dxcore/data/layer3/js/notification.js":12,"dxcore/js/util.js":23}],12:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _ */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxLocale = require('dxcore/js/locale.js');

/*
 * This notification system receives updates from the server about objects that have been created, deleted or updated.
 * This system, in turn, converts those notifications into calls to the underlying cache system so all models and
 * collections being used are up to date with whatever information is in the server.  Without the notification system
 * turned on, the models and collections are not assured of being up to date with what the server knows about.
 *
 * To use the notification system, simply call the start() function at the start of your program. To stop receiving
 * notifications, call stop(). You can also call isStarted() to verify whether the notification system is turned on.
 */
module.exports._setupNotificationSystem = function _setupNotificationSystem(context) {

    /*
     * We use long polling to fetch notifications. We want to make sure our timeout is less than the browser timeout,
     * but otherwise the call will return as soon as data is available.
     */
    var TIMEOUT_SEC = 12;

    /*
     * If the call fails, we don't want to spin in a loop retrying. Attempt a new request after this time period.
     */
    var RETRY_SEC = 10;

    var date = new Date();
    var timeout;
    var stopped = true;
    var notification;
    var notificationChannel = date.getTime() + '_html';

    function processNotifications(notifications, reloadClient) {
        var uniqueObjectNotifications = {};
        var uniqueSingletonNotifications = {};

        /*
         * Pre-process notifications. Keep only the last notification for a particular object. Thus, should we receive a
         * create, update and delete notification for an object, we will only keep the delete. This assumes that we
         * never get a non-delete notification after getting a delete notification.
         */
        notifications.each(function (model) {
            switch (model.get('type')) {
                case 'ObjectNotification':
                    var reference = model.get('object');
                    uniqueObjectNotifications[reference] = model;
                    break;
                case 'SingletonUpdate':
                    var type = model.get('objectType');
                    if (!_.has(uniqueSingletonNotifications, type)) {
                        uniqueSingletonNotifications[type] = model;
                    }
                    break;
                case 'NotificationDrop':
                    reloadClient(dxLocale.gls('dx.notification_drop', model.get('dropCount')));
                    break;
                // we ignore all other types
            }
        });

        /*
         * With the uniquified set of object notifications, loop through them and retrieve or delete our copies of the
         * objects on the server
         */
        _.each(uniqueObjectNotifications, function (notification, objRef) {
            try {
                var type = notification.get('objectType');
                var rootType = context.getCollectionTypeFromModelType(type);

                switch (notification.get('eventType')) {
                    case 'CREATE':
                    case 'UPDATE':
                        var subscriptionUsesModel = context._modelSubscribersStore.hasType(rootType);
                        var hasModel = context._cache.containsCachedModel(objRef, rootType);
                        if (subscriptionUsesModel || hasModel) {
                            var model = context._cache.getCachedModel(objRef, rootType, {
                                update: true,
                                cacheOnlyIfNeeded: true,
                                suppressDefaultErrorHandler: true
                            });

                            var listenerContext = {};

                            /*
                             * After we've fetched the model, notify the cache that this model may need to be added or
                             * removed from collections.
                             * In the case of a badReference (e.g. the model has been deleted), make sure we clean up
                             * the sync listener. We do not use the "error" event because it's a one time event for the
                             * first fetch. For fetching errors other than badReference, we would technically leak these
                             * listeners, but realistically this likely indicates something bad happened on the server
                             * that will require special attention.
                             */
                            model.once('sync', function () {
                                model.off(undefined, undefined, listenerContext);
                                context._cache.modelMayHaveChanged(model, rootType);
                            }, listenerContext);
                            model.once('badReference', function () {
                                model.off(undefined, undefined, listenerContext);
                            }, listenerContext);
                        }
                        break;
                    case 'DELETE':
                        context._cache.deleteCachedModel(objRef, rootType);
                        break;
                    default:
                        dxUtil.warn('Unknown event type: ' + notification.get('eventType'));
                }
            } catch (e) {
                // We really don't want notification processing to stop, so swallow any exception and keep going
                dxUtil.warn('notification processing failed: ' + e.message);
            }
        });

        /*
         * Finally, update all the singletons that have been changed, as well.
         */
        _.each(uniqueSingletonNotifications, function (notification, type) {
            try {
                context._cache.getCachedSingleton(type, { update: true });
            } catch (e) {
                // We really don't want notification processing to stop, so swallow any exception and keep going
                dxUtil.warn('notification processing failed: ' + e.message);
            }
        });
    }

    function fetchNotifications(reloadClient) {
        timeout = undefined;

        notification.$$list({
            timeout: '' + TIMEOUT_SEC * 1000,
            channel: notificationChannel
        }, {
            success: function success() {
                // We want to make sure notifications don't ever stall, even if there is some unknown problem
                if (!stopped) {
                    try {
                        processNotifications(notification, reloadClient);
                    } finally {
                        fetchNotifications(reloadClient);
                    }
                }
            },
            error: function error() {
                if (!stopped) {
                    dxUtil.warn('Notification call failed.');
                }

                if (stopped) {
                    return;
                }

                timeout = setTimeout(function () {
                    fetchNotifications(reloadClient);
                }, RETRY_SEC * 1000);
            }
        });
    }

    /*
     * For testing purposes. This returns the timeout used for retries for predictable results.
     */
    function _getRetryTimeout() {
        return RETRY_SEC * 1000;
    }

    function start(reloadClient) {
        if (_.isUndefined(notification)) {
            notification = context.getServerCollection('Notification');
        } else {
            dxUtil.fail('Notification system already started.');
        }
        stopped = false;
        fetchNotifications(reloadClient);
    }

    function isStarted() {
        return !stopped;
    }

    function stop() {
        if (notification) {
            notification = undefined;
        }
        if (timeout) {
            clearTimeout(timeout);
        }
        stopped = true;
    }

    context = context || this;
    context.notification = context.notification || {};
    _.extend(context.notification, {
        _getRetryTimeout: _getRetryTimeout,
        start: start,
        isStarted: isStarted,
        stop: stop
    });
};

},{"dxcore/js/locale.js":17,"dxcore/js/util.js":23}],13:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $, _ */

'use strict';

var dxUtil = require('dxcore/js/util.js');

/*
 * shorthand for POST ajax calls
 *    config - $.ajax configuration object.
 */
function post(config) {
    if (dxUtil.isNone(config)) {
        dxUtil.fail('post() requires a set of jQuery ajax options.');
    }
    config.type = 'POST';
    ajaxCall(config);
}

/*
 * shorthand for GET ajax calls
 *    config - $.ajax configuration object.
 */
function get(config) {
    if (dxUtil.isNone(config)) {
        dxUtil.fail('get() requires a set of jQuery ajax options.');
    }
    config.type = 'GET';
    ajaxCall(config);
}

/*
 * Wrapper function for jquery $.ajax function
 *    config - $.ajax configuration object.
 */
function ajaxCall(config) {
    if (config && config.url) {
        config.type = config.type || 'GET';
        config.contentType = config.contentType || 'application/json';
        config.dataType = config.dataType || 'json';

        config.xhrFields = config.xhrFields || {
            withCredentials: true
        };

        config.success = config.success || function (d) {
            dxUtil.debug(d);
        };

        config.error = config.error || function (e) {
            dxUtil.debug(e);
        };

        config.cache = config.cache || false;

        config.url = dxUtil.getWindowURLOrigin() + config.url;

        try {
            $.ajax(config);
        } catch (e) {
            dxUtil.fail(e.message);
        }
    } else {
        dxUtil.fail('Invalid configuration for jQuery ajax call. Unable to complete the operation.');
    }
}

/*
 * Sets the global ajax configuration and sets up CSRF header inclusion
 */
function ajaxSetup(config) {
    config = config || {};
    config.cache = config.cache || false;
    $.ajaxSetup(config);

    $.ajaxPrefilter((function () {
        var sessionRoute = /\/resources\/json\/delphix\/session/;
        return function (options) {
            var httpVerb = options.method || options.type;
            if ((!httpVerb || httpVerb === 'GET') && sessionRoute.test(options.url) || httpVerb && _.contains(['POST', 'DELETE', 'PUT'], httpVerb.toUpperCase())) {

                options.headers = options.headers || {};
                options.headers['X-Browser-Session'] = 'True';
            }
        };
    })());
}

/*
 * Routine which installs a handler to manage handling of any ajax errors at a global level. Note that with no
 * parameter, the default Delphix handler will be used.
 */
function ajaxErrorSetup(handler) {
    $(document).ajaxError(handler);
}

// Corresponding cleanup routine for ajaxErrorSetup
function ajaxErrorCleanup() {
    $(document).off('ajaxError');
}

module.exports = {
    post: post,
    get: get,
    ajaxCall: ajaxCall,
    ajaxSetup: ajaxSetup,
    ajaxErrorSetup: ajaxErrorSetup,
    ajaxErrorCleanup: ajaxErrorCleanup
};

// Immediately set up default ajax configuration and CSRF header inclusion
ajaxSetup();

},{"dxcore/js/util.js":23}],14:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global Modernizr, window, _ */

'use strict';

/*
 * Container for all browser-specific workarounds, as well as access to wrappers around parts of the browser that
 * can't be mockec.
 */
/*
 * Provide access to window.location.  This is primarily to allow tests to override access to this member
 * which is often not very maleable in real browsers.
 */
function getWindowLocation() {
    return window.location;
}

/*
 * Sets the window.location.hash value. This is done because we can't spy on the location properties in tests.
 */
function setWindowHash(newHash) {
    window.location.hash = newHash;
}

/*
 * Reloads the page.
 */
function locationReload() {
    window.location.reload(true);
}

/*
 * Open an URL.
 */
function open(url, target, feature, replace) {
    window.open(url, target, feature, replace);
}

/*
 * Generalized routine for writing to various console output 'streams'.  This is quite protective since some
 * versions of IE don't behave well (and, for that matter, window.console isn't part of a standard). Also,
 * IE9's console.log doesn't always have an apply() routine, and this may well be true of others too.
 */
function consoleReport(operation, originalArgs) {
    if (!_.isUndefined(window.console)) {
        if (window.console[operation]) {
            var hasApply = false;
            // The angular codebase says that IE11 in IE8 emulation mode will throw an exception if reading apply
            try {
                hasApply = !!window.console[operation].apply;
            } catch (e) {
                // empty
            }
            if (hasApply) {
                window.console[operation].apply(window.console, originalArgs);
            } else {
                window.console[operation](originalArgs[0]);
            }
        } else if (operation !== 'log') {
            module.exports.consoleReport('log', originalArgs);
        }
    }
}

/*
 * Wrapper around interaction with the console
 */
function consoleLog() {
    module.exports.consoleReport('log', arguments);
}

/*
 * Wrapper around interaction with the console
 */
function consoleInfo() {
    module.exports.consoleReport('info', arguments);
}

/*
 * Wrapper around interaction with the console
 */
function consoleWarn() {
    module.exports.consoleReport('warn', arguments);
}

/*
 * Wrapper around interaction with the console
 */
function consoleError() {
    module.exports.consoleReport('error', arguments);
}

/*
 * Wrapper around interaction with the console
 */
function consoleDebug() {
    module.exports.consoleReport('debug', arguments);
}

/*
 * Return the appropriate change event for checkbox under different browsers. The problem with this one is that IE8's
 * change event is fired before the actual change was made and it was impossible to query for the updated value.
 */
function checkboxChangeEvent(element) {
    var hasNewEvent = Modernizr.hasEvent('change', element);
    return hasNewEvent ? 'change' : 'propertychange';
}

/*
 * Please do not use this routine. Try to use Modernizr instead. This is only provided for the extreme case that one
 * really needs to care that the browser in question is IE.
 */
function isIE() {
    // see http://stackoverflow.com/questions/19999388/jquery-check-if-user-is-using-ie
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    return msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./);
}

/*
 * Please do not use this routine, either.
 */
function isIE9or10() {
    // see http://stackoverflow.com/questions/19999388/jquery-check-if-user-is-using-ie
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    return msie > 0;
}

/*
 * Sets the title in the browser tab
 * If the hostname is an IP address, we leave it as is.
 * If it's a 'normal' URL, we strip off the domain name (everything after the first '.')
 * Accepts a suffix which will be appended after the hostname
 */
function setTitle(suffix) {
    var title,
        isIPAddress,
        hostname = module.exports.getWindowLocation().hostname,
        hostnameSegs = hostname ? hostname.split('.') : [];

    // we're fairly sure it's an IP address if last segment has a numeric character
    isIPAddress = /\d/.test(hostnameSegs[hostnameSegs.length - 1]);

    title = isIPAddress ? hostname : hostnameSegs[0];

    // append suffix
    if (suffix) title += ' - ' + suffix;

    document.title = title;
    return title; // Used for testing purposes
}

module.exports = {
    getWindowLocation: getWindowLocation,
    setWindowHash: setWindowHash,
    locationReload: locationReload,
    open: open,
    consoleLog: consoleLog,
    consoleInfo: consoleInfo,
    consoleWarn: consoleWarn,
    consoleError: consoleError,
    consoleDebug: consoleDebug,
    consoleReport: consoleReport,
    checkboxChangeEvent: checkboxChangeEvent,
    isIE: isIE,
    isIE9or10: isIE9or10,
    setTitle: setTitle
};

},{}],15:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/*
 * This file contains a map of common constants.
 */

'use strict';

var SECOND_IN_MILLISECONDS = 1000,
    MINUTE_IN_MILLISECONDS = SECOND_IN_MILLISECONDS * 60,
    HOUR_IN_MILLISECONDS = MINUTE_IN_MILLISECONDS * 60,
    DAY_IN_MILLISECONDS = HOUR_IN_MILLISECONDS * 24,
    WEEK_IN_MILLISECONDS = DAY_IN_MILLISECONDS * 7,
    MONTH_IN_MILLISECONDS = DAY_IN_MILLISECONDS * 30,
    YEAR_IN_MILLISECONDS = DAY_IN_MILLISECONDS * 365;

var inequalityTypes = {
    STRICT: 'STRICT',
    NON_STRICT: 'NON-STRICT'
};

var listTypes = {
    NONE: 'NONE',
    UBER: 'UBER',
    CUSTOM: 'CUSTOM'
};

module.exports = {
    LDAP: 'LDAP',
    VERSION_MAJOR: 1,
    VERSION_MINOR: 7,
    VERSION_MICRO: 0,
    // Time constants
    SECOND_IN_MILLISECONDS: 1000,
    MINUTE_IN_MILLISECONDS: MINUTE_IN_MILLISECONDS,
    HOUR_IN_MILLISECONDS: HOUR_IN_MILLISECONDS,
    DAY_IN_MILLISECONDS: DAY_IN_MILLISECONDS,
    WEEK_IN_MILLISECONDS: WEEK_IN_MILLISECONDS,
    MONTH_IN_MILLISECONDS: MONTH_IN_MILLISECONDS,
    YEAR_IN_MILLISECONDS: YEAR_IN_MILLISECONDS,
    INEQUALITY_TYPES: inequalityTypes,
    LIST_TYPES: listTypes
};

},{}],16:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _ */

'use strict';

/*
 * Delphix framework/top-level namespace
 */

window.dx = window.dx || {};

if (_.isUndefined(window.dx.namespace)) {
    _.extend(window.dx, {
        namespace: function namespace(_namespace) {
            var current = window;
            _.each(_namespace.split('.'), function (pName) {
                current = current[pName] = current[pName] || {};
            });
            return current;
        }
    });
}

module.exports = window.dx;

},{}],17:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global $, _ */

'use strict';

var dxUtil = require('dxcore/js/util.js');

/*
 * this function sets up the locale
 *     localeConfig - conforming to the i18n jquery plugin config.
 */
function setupLocale(localeConfig) {
    // check to if an array of locale config is passed
    try {
        if (localeConfig instanceof Array) {
            for (var i in localeConfig) {
                if (localeConfig[i]) {
                    localeConfig[i].mode = 'map';
                    $.i18n.properties(localeConfig[i]);
                }
            }
        } else {
            localeConfig.mode = 'map';
            $.i18n.properties(localeConfig);
        }
    } catch (e) {
        if (dxUtil.isNone($.i18n)) {
            dxUtil.fail('Error: Localized text cannot be initialized.');
        } else {
            throw e;
        }
    }
}

/*
 * Get the user's preferred locale, which is set in a cookie by the login screen. If not set, it defaults to English.
 */
function getCurrentLocale() {
    var locale = dxUtil.getCookie('locale') || 'en-US';
    // $.i18n looks for message files with underscores.
    locale = locale.replace('-', '_');

    return locale;
}

/*
 * gls == getLocaleString.  This function gets a constants value initialized by localization library. The first
 * parameter is the locale key to look up the localized string. Additional optional parameters are used for
 * substitutions as {0}, {1}, etc.
 */
function gls() {
    if ($.i18n && $.i18n.prop) {
        return $.i18n.prop.apply(undefined, arguments);
    } else {
        return 'Error: Localized text failed to initialize.';
    }
}

function scaleDecimalNumberAsString(value, units) {
    return numberToString(value, 'decimal', units);
}

function numberToString(value, baseString, units) {
    if (!_.isNumber(value)) {
        return '';
    }
    if (baseString && ['decimal', 'binary'].indexOf(baseString) === -1) {
        dxUtil.fail('baseString must be "decimal" (or undefined), "binary". Received: ' + baseString + '.');
    }

    var base = baseString === 'binary' ? 1024 : 1000;
    var prefixes = ['', 'K', 'M', 'G', 'T', 'P', 'E'];
    var index;
    for (index = 0; value >= base && index < prefixes.length - 1; index++) {
        value /= base;
    }

    if (value > base || Math.round(value) === value) {
        value = Math.round(value).toString();
    } else if (value < 10) {
        value = value.toFixed(2);
    } else {
        value = value.toPrecision(4);
    }

    return value + prefixes[index] + (!_.isUndefined(units) ? module.exports.gls(units) : '');
}

// Define the public api
module.exports = {
    gls: gls,
    getCurrentLocale: getCurrentLocale,
    setupLocale: setupLocale,
    scaleDecimalNumberAsString: scaleDecimalNumberAsString,
    numberToString: numberToString
};

},{"dxcore/js/util.js":23}],18:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global $, _ */

'use strict';

var modalVisible = null,
    namedModal = {};

var dxUtil = require('dxcore/js/util.js'),
    dxLocale = require('dxcore/js/locale.js'),
    dxTemplate = require('dxcore/js/template.js');

/*
 * modal.show(options)
 *
 * Displays a modal dialog. Only one modal dialog can be shown at a time. The 'options' argument takes the
 * following values:
 *
 *      content         Content for the dialog, as a jQuery node.
 *
 *      title           An optional title for the dialog.
 *
 *      noclose         By default, all modal dialogs have a close button in the top right corner that dismisses
 *                      the dialog. If this is explicitly set to 'true', then this close box is hidden.
 *
 *      cssClass        This is an optional parameter. If provided, it will override the default css for the
 *                      modal window by adding the provided css class reference to the container div.
 *
 *      template        By default, we use the dxcore/template/modal/dialog.hjs template for this modal dialog.
 *                      However, if the developer needs to pop-up an entirely different kind of modal, he/she can
 *                      pass in path to their template and modal will render it.
 *
 *      buttons         An optional array of objects that specify a set of buttons to display in the footer. These
 *                      button objects include the following attributes:
 *
 *                          label       Text label for the button.
 *
 *                          onClick     Callback invoked when the button is clicked.
 *
 *                          primary     If true, then this button is given the 'btn-primary' class to indicate it is
 *                                      the default action. It does not bind the enter key to actually trigger the
 *                                      the button.
 *
 *                          iconClass   Optional parameter. If present, allows for an icon to be shown in the button
 *
 *      cancel          Convenience alias. If set to 'true', prepend a standard cancel button to the button list
 *                      that dismisses the current dialog.
 *
 *      ok              Convenience alias. If set to 'true', append a standard OK button to the button list that
 *                      dismisses the current dialog. If this is a function, then the function is invoked when the
 *                      button is pressed instead of dismissing the dialog.
 *
 *      onShow          A callback that is invoked when the dialog element is visible.
 */
function show(options) {
    var self = this;

    if (modalVisible) {
        dxUtil.fail('attempt to show multiple modal dialogs at once');
    }

    var buttons = options.buttons || [];

    // Default cancel button
    if (options.cancel) {
        buttons.unshift({
            label: dxLocale.gls('button.cancel'),
            onClick: hide
        });
    }

    // Default OK button
    if (options.ok) {
        buttons.push({
            label: dxLocale.gls('button.ok'),
            onClick: _.isFunction(options.ok) ? options.ok : hide,
            primary: true,
            iconClass: 'icon-accept'
        });
    }

    // Basic layout
    var templateLocation = options.template || 'dxcore/template/modal/dialog';
    self.hideModal = hide;

    var dialogElem = dxTemplate.template(templateLocation, {
        title: options.title,
        hasClose: !options.noclose,
        hasFooter: buttons.length !== 0
    });

    // Construct the button bar
    var buttonBar = $('<div></div>');
    _.each(buttons, function (buttonDef) {

        var buttonElem = dxTemplate.template('dxcore/template/modal/button', {
            label: buttonDef.label,
            iconClass: buttonDef.iconClass
        });

        if (buttonDef.primary) {
            buttonElem.addClass('btn-primary');
        }

        buttonElem.on('click', buttonDef.onClick);
        buttonBar.append(buttonElem);
    });

    if (options.cssClass) {
        dialogElem.removeClass('modal-div');
        dialogElem.addClass(options.cssClass);
    }

    // Set the dynamic content
    dialogElem.children('.modal-body').append(options.content);
    dialogElem.children('.modal-footer').append(buttonBar);

    // Now set the modal holder and show it
    $('#modalHolder').empty();
    $('#modalHolder').append(dialogElem);

    dialogElem.on('hidden.bs.modal', function () {
        modalVisible = null;
    });

    if (options.onShow && _.isFunction(options.onShow)) {
        dialogElem.on('shown.bs.modal', function () {
            options.onShow();
        });
    }

    modalVisible = dialogElem;
    dialogElem.modal({
        backdrop: 'static'
    });
}

/*
 * modal.hide()
 *
 * Hide the current modal dialog. This has no effect if no modal dialog is currently shown.
 */
function hide() {
    if (modalVisible) {
        modalVisible.modal('hide');
    }
}

/*
 * Modal dialogs can be registered by name, allowing consumers to display content without needing to call directly
 * into the implementation. This is just a wrapper around callback registration.
 */
function registerNamed(path, callback) {
    if (!_.isFunction(callback)) {
        dxUtil.fail('attempt to register named dialog "' + path + '" with invalid callback');
    }

    namedModal[path] = callback;
}

function showNamed(path) {
    namedModal[path]();
}

module.exports = {
    show: show,
    hide: hide,
    registerNamed: registerNamed,
    showNamed: showNamed
};

},{"dxcore/js/locale.js":17,"dxcore/js/template.js":21,"dxcore/js/util.js":23}],19:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $, Backbone, _, ko */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxModal = require('dxcore/js/modal.js'),
    dxBrowser = require('dxcore/js/browser.js');

// Backbone router instance
var DelphixRouter = Backbone.Router.extend();
var delphixRouter;
var queuedCalls = [];
var routerStarted = false;

// State for remembering preserved screen state
var savedScreens = {};

// State for implementing onExit()
var currentScreen;
var currentScreenOptions;

// Callbacks to be called up when existing a screen, unless preserveContent is true
var screenCleanup = [];

// tracks number of route calls, for testing purposes
var routeCalls = 0;

/*
 * Register a screen in the application. Each application is grouped into 'screens' of content, where each screen
 * replaces the main content of the page (not including navbar and other navigational elements). In addition to the
 * content, every screen has a path associated it, which is tracked in the URL ('#path/to/thing') and allows for
 * bookmarks and forward / back browser navigation. To register a screen, you call the following from global context
 * or a $().ready() handler:
 *
 *      screen.register({
 *          path: 'path/to/screen',
 *          constructor: MyScreen
 *      });
 *
 * This will build a 'MyScreen' object whenever the user navigates to that given path (either from a bookmark,
 * forward/back, or programmatically). Paths follow the Backbone router model:
 *
 *      /route/:path/item:id
 *
 * Any parameters will be provided to the onEnter() callback as arguments in the order they appear in the path. More
 * information can be found in the backbone router documentation:
 *
 *      http://backbonejs.org/#Router
 *
 * The screen infrastructure will build the object and showing the content within the UI. By default, it will destroy
 * and recreate the object each time the user navigates to the screen (but not when the user navigates to a screen with
 * already showing that same screen. in that case navigating is a no-op), but the screen can also be registered with
 * 'preserveContent: true' to have the content state be kept as-is off screen. This should only be used for complex
 * screens where maintaining state (selected objects, etc) provides an improved user experience that is worth the
 * memory cost. Preserved content is tracked by the registered path (/path/:foo) not the actual path (/path/bar), so
 * there can be only one preserved state when using substitutions. Screens must implement the following method:
 *
 *      getContent()        Return a jQuery or DOM object that is the root of the screen content. This is what is
 *                          displayed in the main content.
 *
 * The following methods are optional:
 *
 *      beforeEnter()       Invoked when the screen content is going to be displayed. This is needed if one must do
 *                          some kind of setup before generating the content.
 *
 *      onEnter()           Invoked when the screen content is displayed. This is really only useful for screens that
 *                          are registered with 'preserveContent' set, and can be used to kick off asynchronous
 *                          activity specific to the screen.
 *
 *      onExit()            Invoked when the screen content is removed. This can be used to cancel any asynchronous
 *                          activity.
 */
function register(options) {
    if (!delphixRouter) {
        queuedCalls.push(options);
        return;
    }

    delphixRouter.route(options.path, options.path, function () {
        routeCalls++;

        var htmlContent = $('#htmlContent');

        // Navigate away from the current screen
        if (currentScreen) {
            // Invoke onExit if supported by the current screen
            if (currentScreen.onExit) {
                currentScreen.onExit();
            }

            if (currentScreenOptions.preserveContent) {
                // Preserve the current content if requested
                savedScreens[currentScreenOptions.path] = currentScreen;
                currentScreen.getContent().detach();
            } else {
                // Otherwise discard current content
                currentScreen.getContent().remove();
                var toBeCalled = _.clone(screenCleanup);
                screenCleanup = [];
                _.each(toBeCalled, function (callback) {
                    callback();
                });
            }
        }

        // Re-use preserved content if requested
        if (savedScreens[options.path]) {
            currentScreen = savedScreens[options.path];
        } else {
            currentScreen = new options.constructor();
        }
        currentScreenOptions = options;

        // Hide any modal dialog that might be present
        dxModal.hide();

        // Invoke beforeEnter() if provided
        if (currentScreen.beforeEnter) {
            currentScreen.beforeEnter.apply(currentScreen, arguments);
        }

        // Update the currentRoute observable
        module.exports.currentRoute(options.path);

        // Attach the content
        htmlContent.append(currentScreen.getContent());
        if (!options.startWithContentHidden) {
            htmlContent.show();
        }

        // Invoke onEnter() if provided
        if (currentScreen.onEnter) {
            currentScreen.onEnter.apply(currentScreen, arguments);
        }
    });
}

/*
 * Actively change the screen to the given path, invoking the onEnter()/onExit() callbacks in the process.
 */
function navigate(path, skipHistory) {
    delphixRouter.navigate(path, { trigger: true, replace: skipHistory });
}

/*
 *
 */
function internalDeepLinkNavigate(path, skipHistory, details) {
    if (!_.isObject(details)) {
        dxUtil.fail('Must pass a details object when doing deep linking.');
    }

    navigate(path, skipHistory);

    // does the destination page support deep linking?
    if (!currentScreen.doDeepLink) {
        dxUtil.fail('Attempt to deep link to a page which doesn\'t support this.');
    }

    currentScreen.doDeepLink(details);
}

/*
 * Update the URL for the page, without doing a navigation
 */
function updateWithoutNavigation(path, skipHistory) {
    delphixRouter.navigate(path, { trigger: false, replace: skipHistory });
}

/*
 * Navigate to an external url. This will leave the current html file entirely. This expects to receive the full
 * pathname and hash portion of the url. That is, it is something like /myapp/#library.
 */
function navigateExternal(url) {
    window.location.href = dxUtil.getWindowURLOrigin() + url;
}

/*
 * Hide the current full screen content, exposing the flex application underneath. It will also call onExit of the
 * currently visible JS screen. This is called from the flex/html hybrid code when switching to a flex screen, so
 * that every route need not do this in an onExit handler.
 * This will have no effect if the screen content is currently hidden.
 */
function hide() {
    var htmlContent = $('#htmlContent');

    // Check that the html content is actually visible in case it was hidden by some other source.
    if (htmlContent.is(':visible') && currentScreen && currentScreen.onExit) {
        currentScreen.onExit();
        currentScreen = null;
    }

    htmlContent.hide();
}

/*
 * This special function is called directly from the $().ready() handler in the main index.html file. This ensures that
 * it is called after any screen.register() calls invoked from other ready handlers, and it's safe to
 * call history.start() and redirect to any routes based on hashchange events.
 */
function start() {
    delphixRouter = new DelphixRouter();

    /*
     * Register a default route that ignores unknown routes (if a user manually types a path, for example). Note that
     * this may also be a legitimate view in the Flex application, so we make sure to hide the html content.
     */
    delphixRouter.route('*path', '*path', function () {
        routeCalls++;
        module.exports.hide();
    });

    _.each(queuedCalls, register);

    Backbone.history.start();
    routerStarted = true;
}

/*
 * Adds a function that will be called when the current screen exits. This is intended to allow code to do any cleanup
 * that is needed. Note that cleanup will make a copy of the items to be cleaned, before starting the cleanup cycle.
 * This means that if you have registered a cleanup routine, and discover at cleanup time that you can't cleanup now,
 * you can recall this routine to re-register yourself without problems.  This isn't encouraged, but it is sometimes
 * needed.
 */
function registerCleanupCallback(callback) {
    if (!_.isFunction(callback)) {
        dxUtil.fail('Must pass a function to cleanupOnPageExit()');
    }

    screenCleanup.push(callback);
}

/*
 * Updates a query parameter in the hash-portion of the url, causing a new navigation to happen.
 *
 * That is, if the current page is:
 *    http://www.example.com/#exiting-route
 * and we call updateParam('level', 'high'), then the user will be navigated to:
 *    http://www.example.com/#exiting-route?level=high
 * Similarly if the current page is:
 *    http://www.example.com/#exiting-route?fun=necessary&level=high&urls=fun
 * and we call updateParam('level', 'exponential'), then the user will be navigated to:
 *    http://www.example.com/#exiting-route?fun=necessary&level=exponential&urls=fun
 * (these navigations are not recorded on the back-history)
 *
 * Both name and value must be strings, and both will be escaped in case they contain url-unsafe characters.
 */
function updateParam(name, value) {
    if (!_.isString(name)) {
        dxUtil.fail('Must specify a string for name to updateParam()');
    }

    if (!_.isString(value)) {
        dxUtil.fail('Must specify a string for value to updateParam()');
    }

    var newParams;
    var found;
    var newPair;

    var currentHash = dxBrowser.getWindowLocation().hash;
    var paramsLoc = currentHash.indexOf('?');
    var beforeParams = currentHash;
    var params = '';

    name = encodeURIComponent(name);
    newPair = name + '=' + encodeURIComponent(value);

    if (paramsLoc !== -1) {
        beforeParams = currentHash.substr(0, paramsLoc);
        params = currentHash.substring(paramsLoc + 1);
    }

    var pairs = params.split('&');

    if (pairs.length === 1 && pairs[0] === '') {
        pairs = [];
    }

    _.each(pairs, function (pair, index) {
        if (pair.substring(0, name.length + 1) === name + '=') {
            pairs[index] = newPair;
            found = true;
        }
    });

    if (!found) {
        pairs.push(newPair);
    }

    newParams = pairs.join('&');

    module.exports.updateWithoutNavigation(beforeParams + '?' + newParams);
}

/*
 * Internal function for testing, which clears any existing state. There is no supported way to clear existing
 * route handlers. We could reach into the History object and clear the handlers array, but since new routes take
 * preference over old ones, we leave it across each clear() invocation.
 */
function _clear() {
    if (routerStarted) {
        Backbone.history.stop();
    }
    currentScreen = undefined;
    savedScreens = {};
    screenCleanup = [];
    routerStarted = false;
    routeCalls = 0;
    queuedCalls = [];
    delphixRouter = undefined;
    module.exports.currentRoute('');
}

/*
 * Access to internal state for testing purposes.
 */
function _getRouteCalls() {
    return routeCalls;
}

module.exports = {
    // Expose an observable with the current route
    currentRoute: ko.observable(''),
    register: register,
    navigate: navigate,
    internalDeepLinkNavigate: internalDeepLinkNavigate,
    updateWithoutNavigation: updateWithoutNavigation,
    navigateExternal: navigateExternal,
    hide: hide,
    start: start,
    registerCleanupCallback: registerCleanupCallback,
    updateParam: updateParam,
    _clear: _clear,
    _getRouteCalls: _getRouteCalls
};

},{"dxcore/js/browser.js":14,"dxcore/js/modal.js":18,"dxcore/js/util.js":23}],20:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $ */

'use strict';

var dxWindow = require('dxcore/js/window.js'),
    dxData = require('dxcore/data/js/index.js'),
    dxConstants = require('dxcore/js/constants.js'),
    dxBrowser = require('dxcore/js/browser.js'),
    dxUtil = require('dxcore/js/util.js'),
    dxLocale = require('dxcore/js/locale.js');

/*
 * This provides various session-related utility routines.
 *    checkSessionIsAuthenticatedOrEnd()
 *       Starts a process where this will attempt to repeatedly get a session from the Delphix engine.  This is useful
 *       in case of transient network problems. Specifically, this will:
 *          1)  Repeatedly ask the Delphix Engine to create a session (or return the current if there is already one)
 *              *) If, after 5 seconds, we don't get a session, display an alert inviting the user to log off, but keep
 *                 trying to get a session while the user thinks about this.
 *          2)  If we do get a session, then try to get the current users, which is another way of saying: is this an
 *              authenticated session?  If we get a current user, then we have an authenticated session, all is good.
 *              However, if we do not get a user, then log out.
 *
 *    endSession()
 *       Ends the current session, if any.
 */
var CHECKING_TIMEOUT = 2500;
var TIMES_TO_CHECK_BEFORE_ALERT = 2;
var alreadyChecking = false;
var alertWindow;
var shuttingDown = false;

function showAlert() {
    alertWindow = dxWindow.connectivityErrorAlert({
        logout: function logout() {
            endSessionLocally();
            alertWindow = undefined;
        },
        endSession: endSession
    });
}

function closeAlert() {
    if (alertWindow) {
        dxWindow._close.apply(alertWindow);
    }
    alertWindow = undefined;
}

/*
 * Repeatedly try to get a session from the server until we succeed or the user chooses to log off.  If we fail to get
 * a session after a couple tries, put up an alert for the user to let them know what is going on.
 */
function keepCheckingForAuthSession(timesUntilAlert, _success, failure) {
    var createSessionPayload = dxData.newClientModel('APISession');
    createSessionPayload.set({
        version: {
            major: dxConstants.VERSION_MAJOR,
            minor: dxConstants.VERSION_MINOR,
            micro: dxConstants.VERSION_MICRO
        }
    });
    if (shuttingDown) {
        return;
    }

    if (timesUntilAlert === 0) {
        showAlert();
    }

    dxData.rootOps.APISession.$$create(createSessionPayload, {
        success: function success() {
            closeAlert();
            dxData.rootOps.User.$current({
                success: _success,
                error: failure
            });
        },
        error: function error() {
            setTimeout(function () {
                keepCheckingForAuthSession(timesUntilAlert - 1, _success, failure);
            }, CHECKING_TIMEOUT);
        }
    });
}

function clearCheckingFlag() {
    alreadyChecking = false;
}

function checkSessionIsAuthenticatedOrEnd() {
    if (alreadyChecking) {
        return;
    }
    alreadyChecking = true;
    keepCheckingForAuthSession(TIMES_TO_CHECK_BEFORE_ALERT, clearCheckingFlag, internalEndSession);
}

function internalEndSession() {
    closeAlert();
    endSessionLocally();
}

function endSession() {
    dxData.rootOps.delphix_common.$logout({
        success: endSessionLocally,
        error: endSessionLocally
    });
}

function endSessionLocally() {
    shuttingDown = true;
    dxBrowser.getWindowLocation().href = dxUtil.getWindowURLOrigin() + '/login/index.html';
}

function resetForTesting() {
    closeAlert();
    shuttingDown = false;
    alreadyChecking = false;
}

function reloadClient(reason) {
    /* eslint-disable no-alert */
    if (window.confirm(dxLocale.gls('reload.' + reason)) === true) {
        dxBrowser.locationReload();
    }
    /* eslint-enable no-alert */
}

/*
 * A GENERAL NOTE ABOUT OUR HANDLING OF AJAX ERRORS
 *
 * At this time our stack has several major systems which make http requests through jQuery's ajax system, including
 * our i18n system, Backbone, and of course the above ajaxCall(). The clients of these are responsible for handling
 * all their own HTTP errors.
 *
 * Our standard global ajax handler gets called any time jQuery reports an error (which jQuery considers to any status
 * other than 200-300 or 304).  At this global level, we only respond to things we think of as 'catastrophic'. This
 * includes status 0 and 403.
 *
 * For status 403, we simply force the UI to log out.
 *
 * Status 0 is when jQuery couldn't get a proper response and status from the server (such as if the entire network
 * has gone down, and the HTTP request couldn't be initiated, etc. (note: Things already in flight have a
 * browser-dependent timeout, which is infinite in the case of Chrome). In this case, this could be a transient problem
 * which we really don't care about at a global level (individual callers should handle this on their own, of course).
 * To distinguish the transient from the permanent, we ask the session system to poll the server periodically and try
 * to get a working session again. If this fails, it will log the user off.
 */
function defaultDelphixErrorHandler(event, jqxhr) {
    switch (jqxhr.status) {
        case 0:
            module.exports.checkSessionIsAuthenticatedOrEnd();
            break;
        case 403:
            module.exports.endSessionLocally();
            break;
    }

    // filtering out HTML tags
    dxUtil.debug($.trim(dxUtil.isNone(jqxhr.responseText) ? '' : jqxhr.responseText.replace(/(<([^>]+)>)/ig, ' ')));
}

module.exports = {
    checkSessionIsAuthenticatedOrEnd: checkSessionIsAuthenticatedOrEnd,
    endSessionLocally: endSessionLocally,
    endSession: endSession,
    _resetForTesting: resetForTesting,
    keepCheckingForAuthSession: keepCheckingForAuthSession,
    closeAlert: closeAlert,
    reloadClient: reloadClient,
    defaultDelphixErrorHandler: defaultDelphixErrorHandler
};

},{"dxcore/data/js/index.js":4,"dxcore/js/browser.js":14,"dxcore/js/constants.js":15,"dxcore/js/locale.js":17,"dxcore/js/util.js":23,"dxcore/js/window.js":24}],21:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global dx, $, Handlebars, ko */

'use strict';

// _templates is deliberately exposed this way. See below.
require('dxcore/js/delphix.js').namespace('dx.core._templates');

var dxUtil = require('dxcore/js/util.js'),
    dxLocale = require('dxcore/js/locale.js');

/*
 * Returns a jQuery object for the given template, optionally bound to the given knockback viewmodel. The viewmodel is
 * also passed to the Handlebars templating engine, so static string-based templating can also be used. Knockback will
 * not do anything if there are no data-bind attributes to be found, so it can be used in either fashion.
 *
 * Templates are delivered within the HTML structure as:
 *
 *  /<app>/[module/]/template/<path>.hjs
 *
 * These templates are referred to by the path minus the '.hjs' extension. As part of the build process, we precompile
 * these templates and deliver them as single .js files that populate the '_templates' object. We also load
 * templates dynamically via AJAX so that we don't need an explicit compilation step when making local changes.
 */
function template(name, options) {
    var templates = dx.core._templates;
    options = options || {};

    if (!templates[name]) {
        $.ajax({
            url: '/' + name + '.hjs',
            datatype: 'text/javascript',
            success: function success(response, status, jqXHR) {
                templates[name] = Handlebars.compile(jqXHR.responseText);
            },
            error: function error() {
                dxUtil.fail('Unknown template: ' + name);
            },
            async: false
        });
    }

    // filter() strips out any text or comment nodes
    var elems = $(templates[name](options)).filter('*');

    if (options.vm) {
        // Handle the case where there is more than one top level element in the template
        elems.each(function () {
            ko.applyBindings(options.vm, this);
        });
    }

    return elems;
}

/*
 * Register a handlebars helper to get localized text. To use this helper:
 *
 *      <div>{{gls 'some.locale.constant'}}</div>
 *
 * The parameters passed to this function are of the form: key, substitutions ...
 */
Handlebars.registerHelper('gls', function () {
    return dxLocale.gls.apply(undefined, arguments);
});

module.exports = {
    template: template
};

},{"dxcore/js/delphix.js":16,"dxcore/js/locale.js":17,"dxcore/js/util.js":23}],22:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global _, $ */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxData = require('dxcore/data/js/index.js');

/*
 * This file handles a number of tasks related to users and permissions. Among other things, this provides a cache for
 * getting system-defined default roles.
 */
var roleCache = {};

function reset() {
    roleCache = {};
}

/*
 * Private helper function for getting a role from the roleCache if present, otherwise retrieving it from the server
 * role               a string corresponding to the name of the root operation for the role to retrieve
 * successCallback    the function that is called on success and is passed a Role model
 * returns a JQuery Promise
 */
function getRole(role, successCallback) {
    if (successCallback && !_.isFunction(successCallback)) {
        dxUtil.fail('The success callback must be a function');
    }

    if (!roleCache[role]) {
        roleCache[role] = dxData.rootOps.Role['$' + role]().then(function (OKResult) {
            return OKResult.get('result');
        });
    }

    return roleCache[role].done(successCallback);
}

function getOwner(successCallback) {
    return getRole('ownerRole', successCallback);
}

function getProvisioner(successCallback) {
    return getRole('provisionerRole', successCallback);
}

function getJetStreamUser(successCallback) {
    return getRole('jetStreamUserRole', successCallback);
}

/*
 * successCallback is passed an object consisting of the default roles once they have all been resolved
 * returns a JQuery Promise
 */
function getDefaultRoles(successCallback) {
    var defaultRoles;

    return $.when(getOwner(), getProvisioner(), getJetStreamUser()).then(function (ownerRole, provisionerRole, jetStreamUserRole) {
        // package into an object to pass to callback
        defaultRoles = {
            ownerRole: ownerRole,
            provisionerRole: provisionerRole,
            jetStreamUserRole: jetStreamUserRole
        };

        if (successCallback) {
            successCallback(defaultRoles);
        }

        return defaultRoles;
    });
}

/*
 * Convenience methods for determining the 'type' of user from authorizations
 */

function isDelphixAdmin(userRef, authorizations, defaultRoles) {
    return authorizations.where({
        target: 'DOMAIN',
        user: userRef,
        role: defaultRoles.ownerRole.get('reference')
    }).length > 0;
}

function isDomainProvisioner(userRef, authorizations, defaultRoles) {
    // delphixAdmin and domainProvisioner are mutually exclusive. If both authorizations exist, delphixAdmin wins
    var isAdmin = isDelphixAdmin(userRef, authorizations, defaultRoles);

    return !isAdmin && authorizations.where({
        target: 'DOMAIN',
        user: userRef,
        role: defaultRoles.provisionerRole.get('reference')
    }).length > 0;
}

function isJetStreamUser(userRef, authorizations, defaultRoles) {
    // delphixAdmin and JetStreamUser are mutually exclusive. If both authorizations exist, delphixAdmin wins
    var isAdmin = isDelphixAdmin(userRef, authorizations, defaultRoles);

    return !isAdmin && authorizations.where({
        target: userRef,
        user: userRef,
        role: defaultRoles.jetStreamUserRole.get('reference')
    }).length > 0;
}

function start() {
    // preemptively fetch the default roles to populate the roleCache.
    getDefaultRoles();
}

// Define externally visible functions
module.exports = {
    getOwner: getOwner,
    getProvisioner: getProvisioner,
    getJetStreamUser: getJetStreamUser,
    getDefaultRoles: getDefaultRoles,
    isDelphixAdmin: isDelphixAdmin,
    isDomainProvisioner: isDomainProvisioner,
    isJetStreamUser: isJetStreamUser,
    start: start,
    _reset: reset // Used for testing
};

},{"dxcore/data/js/index.js":4,"dxcore/js/util.js":23}],23:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $, _, ko, window */

'use strict';

var dxBrowser = require('dxcore/js/browser.js');

/*
 * Report a failing message. Writes the info to the console and throws an error
 */
function fail() {
    dxBrowser.consoleError.apply(dxBrowser, arguments);
    throw new Error(arguments[0]);
}

/*
 * Report a warning message. Writes the info to the console
 */
function warn() {
    dxBrowser.consoleWarn.apply(dxBrowser, arguments);
}

/*
 * Report a warning message. Writes the info to the console
 */
function info() {
    dxBrowser.consoleInfo.apply(dxBrowser, arguments);
}

/*
 * if debug flag is 'on' this write the specified info to the console.
 */
function debug() {
    if (!module.exports.debugMode) {
        return false;
    }

    dxBrowser.consoleDebug.apply(dxBrowser, arguments);

    return true;
}

/*
 *  Allow timing of script execution.  It is based on console.time and console.timeEnd that are present in Chrome,
 *  Firefox, and IE9 but is missing from IE8.  In order for timing to record result, both module.exports.debugMode and
 *  module.exports.timingMode must be set to true
 *
 *  Usage:
 *  time(<key>); // where <key> is of type String
 *  // code that is being timed
 *  endTime(<key>);
 *
 *  Example:
 *  time('computeFoo');
 *  var foo = computeFoo();
 *  timeEnd('computeFoo');
 *
 *  Console Output:
 *  computeFoo: 23ms
 *
 *  Note: If someone already called time with one key, the second call to time with the same key is ignored.
 */
(function () {
    var timeCounters = {};
    var time, timeEnd;
    module.exports = module.exports || {};
    // Exposed just for testing
    module.exports._timeForOldBrowsers = function _timeForOldBrowsers(name) {
        if (!name || !isNone(timeCounters[name])) {
            return;
        }

        var time = new Date().getTime();
        timeCounters[name] = time;
    };

    // Exposed just for testing
    module.exports._timeEndForOldBrowsers = function _timeEndForOldBrowsers(name) {
        var time = new Date().getTime();

        if (!name || isNone(timeCounters[name])) {
            return;
        }

        var diff = time - timeCounters[name];
        var label = name + ': ' + diff + 'ms';
        module.exports.warn(label);
        delete timeCounters[name];
    };

    if (window.console && window.console.time) {
        time = window.console.time.bind(window.console);
    } else {
        time = module.exports._timeForOldBrowsers;
    }

    if (window.console && window.console.timeEnd) {
        timeEnd = window.console.timeEnd.bind(window.console);
    } else {
        timeEnd = module.exports._timeEndForOldBrowsers;
    }

    module.exports.time = function (name) {
        if (!module.exports.timingMode) {
            return;
        }

        return time(name);
    };

    module.exports.timeEnd = function (name) {
        if (!module.exports.timingMode) {
            return;
        }

        return timeEnd(name);
    };
})();

/*
 * An easily accessible function to turn numbers into px values.
 */
function px(pixels) {
    return pixels + 'px';
}

/*
 * Returns true if parameter is null or undefined.
 */
function isNone(value) {
    return _.isNull(value) || _.isUndefined(value);
}

function getCookie(cookieName) {
    var name = cookieName + '=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = $.trim(ca[i]);
        if (c.indexOf(name) === 0) return c.substring(name.length, c.length);
    }
}

/*
 * Sets sitewide cookie.
 */
function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
    var expires = 'expires=' + d.toGMTString();
    document.cookie = cname + '=' + cvalue + '; ' + expires + '; path=/';
}

function deleteCookie(cname) {
    setCookie(cname, '', -1);
}

/*
 * this function simply returns the origin url of current page.
 */
function getWindowURLOrigin() {
    var loc = dxBrowser.getWindowLocation();
    if (isNone(loc.origin)) {
        return loc.protocol + '//' + loc.host;
    } else {
        return loc.origin;
    }
}

/*
 * Returns a new object with obj's ko unwrapped properties.
 */
function unwrapProperties(obj) {
    var result = {};

    _.each(obj, function (value, key) {
        result[key] = ko.unwrap(value);
    });

    return result;
}

/*
 * Bind the default event trigger to the input field.
 * You can then use it by calling 'inputField.bind('enterKey', acceptFunction);'
 */
function bindDefaultKeyTriggers(inputField) {
    var $inputField = $(inputField);

    if ($inputField.is('input') || $inputField.is('textarea')) {
        $inputField.keyup(function (e) {
            if (e.keyCode === 13) {
                $inputField.trigger('enterKey');
            } else if (e.keyCode === 27) {
                $inputField.trigger('escapeKey');
            }
        });
    } else {
        fail('bindDefaultKeyTriggers must be used with an input');
    }
}

/*
 * Returns a new object that is a deep clone of the input object.
 */
function deepClone(obj) {
    var result = obj;

    if (_.isArray(obj)) {
        result = [];
        _.each(obj, function (value, index) {
            result[index] = deepClone(value);
        });
    } else if (_.isObject(obj)) {
        if (obj instanceof Date) {
            result = new Date(obj.getTime());
        } else {
            result = {};
            _.each(obj, function (value, index) {
                result[index] = deepClone(value);
            });
        }
    }

    return result;
}

// Compare two dates, allowing either one to be undefined or null
function datesEqual(a, b) {
    if (isNone(a) || isNone(b)) return a === b;
    return a.getTime() === b.getTime();
}

/*
 * Performs a deep copy of the values from 'src' into 'dst', overlaying any conflicting properties. Because this is a
 * deep copy, this supports sparse overlays for objects. For example:
 *
 *      overlayProperties({ child: { one: 'foo', two: 'bar' }}, { child: { two: 'baz' }});
 *      => { child: { one: 'foo', two: 'baz' }}
 *
 * Notice that the entirety of the the 'child' property isn't overridden, only those specified in the source. Objects
 * that don't exist in the source will be created. Arrays are more difficult, and are copied over whole if specified in
 * 'src'. Alse note that Date objects are given special treatment and copied over whole.
 */
function overlayProperties(dst, src, prefix) {
    prefix = prefix || '';

    _.each(src, function (propval, propname) {
        var fullname = prefix + propname;
        if (_.isArray(propval)) {
            dst[propname] = _.clone(propval);
        } else if (_.isObject(propval)) {
            if (!_.isObject(dst[propname])) {
                dst[propname] = {};
            }

            if (_.isDate(propval)) {
                // Date isn't a normal object and so must be handled specially and copied over whole
                dst[propname] = new Date(propval.getTime());
            } else {
                overlayProperties(dst[propname], propval, fullname + '.');
            }
        } else {
            dst[propname] = propval;
        }
    });

    return dst;
}

function arrayToMap(array, keyPropertyName) {
    var map = {};
    _.each(array, function (item) {
        var id = item[keyPropertyName];
        if (!_.isUndefined(id)) {
            map[id] = item;
        }
    });

    return map;
}

(function () {
    var counter = 0;

    /*
     * Returns a new unique id on the fly with the prefix.
     */
    module.exports.makeUniqueId = function makeUniqueId(prefix) {
        prefix = prefix || 'uniqid';

        var id = prefix + '' + counter++;

        if ($('#' + id).length === 0) {
            return id;
        } else {
            return module.exports.makeUniqueId(prefix);
        }
    };

    module.exports._resetUniqueIdCounter = function _resetUniqueIdCounter() {
        counter = 0;
    };
})();

/*
 * Checks to see if DOM elemenet in question is in the visible viewport or not.
 * @param {DOM element} el - DOM element to be checked.
 */
function isElementInViewport(el) {
    var rect = el.getBoundingClientRect();

    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
}

/*
 * Return a human readable date string
 */
function dateToRFC1123String(date) {
    var stringValue = date.toUTCString();

    /*
     * Ugly hack. Some browsers report 'Tue, 01 Jan 2013', while others report 'Tue, 1 Jan 2013'. This removes the 0.
     * Both are legal RTC1123 date strings, but it causes testing problems when the string format isn't predictable.
     */
    if (stringValue.charAt(5) === '0') {
        stringValue = stringValue.substr(0, 5) + stringValue.substr(6);
    }

    return stringValue.replace('UTC', 'GMT');
}

/*
 * Checks if the passed in string has a valid email format or not.
 */
function isValidEmail(email) {
    var regex = /^\S+@\S+$/;
    return regex.test(email);
}

function extendPrototype(subType, prototype, subTypeMembers) {
    _.extend(subType.prototype, prototype, subTypeMembers);
    return subType;
}

/*
 * Retrieves a value that are deep down in the object chain. This also works with array mixed with the object.
 * For example: if host is { a: 5, b: [4, 'me'] } and you ask for 'b.1', it will return 'me'.
 */
function getDeepProperty(host, theChain, defaultValue) {
    if (!host) return defaultValue;
    var chains = theChain.split('.');
    var currentContext = host;
    var aChain;

    for (var i = 0; i < chains.length; i++) {
        aChain = chains[i];
        if (_.has(currentContext, aChain)) {
            currentContext = currentContext[aChain];
        } else {
            return defaultValue;
        }
    }

    return currentContext;
}

// Define the public api
_.extend(module.exports, {
    // debug mode flag
    debugMode: false,
    // timing mode flag
    timingMode: false,
    debug: debug,
    isNone: isNone,
    setCookie: setCookie,
    getCookie: getCookie,
    deleteCookie: deleteCookie,
    isValidEmail: isValidEmail,
    getWindowURLOrigin: getWindowURLOrigin,
    deepClone: deepClone,
    unwrapProperties: unwrapProperties,
    bindDefaultKeyTriggers: bindDefaultKeyTriggers,
    datesEqual: datesEqual,
    overlayProperties: overlayProperties,
    arrayToMap: arrayToMap,
    isElementInViewport: isElementInViewport,
    dateToRFC1123String: dateToRFC1123String,
    extendPrototype: extendPrototype,
    getDeepProperty: getDeepProperty,
    fail: fail,
    warn: warn,
    info: info,
    px: px
});

},{"dxcore/js/browser.js":14}],24:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $, _, ko, Backbone */

'use strict';

var namedModal = {};
var modalCounter = 0;
var nonModalWindowQueue = [];

var dxLocale = require('dxcore/js/locale.js'),
    dxUtil = require('dxcore/js/util.js'),
    dxTemplate = require('dxcore/js/template.js'),
    dxUserUtil = require('dxcore/data/delphix/js/util.js');

/*
 * window.* (options)
 *
 * We have five variations of dialog types, most of them are a wrapper over the basic dialog:
 * window.confirm / window.alert / window.errorAlert / window.connectivityErrorAlert and window.dialog
 *
 * For most of the dialog types the 'options' argument takes the following common values:
 *
 *      title           An optional title for the dialog.
 *
 *      closeOnEscape   Specifies whether the dialog should close when it has focus and the user presses the escape
 *                      (ESC) key.
 *
 *      noClose         If true, the dialog would not have a [x] on the top right.
 *
 *      dialogClass     The specified class name(s) will be added to the dialog, for additional theming.
 *
 *      template        if the developer needs to pop-up an entirely different kind of dialog, he/she can
 *                      pass in path to their template and window will render it.
 *
 *      buttons         An optional array of objects that specify a set of buttons to display in the footer. These
 *                      button objects include the following attributes:
 *
 *                          text       Text label for the button.
 *
 *                          click      Callback invoked when the button is clicked.
 *
 *                          'class'    CSS class for button
 *
 *                          icons      CSS class for button icon
 *
 *      cancel          Convenience alias. If set to 'true', prepend a standard cancel button to the button list
 *                      that dismisses the current dialog.If this is a function, then the function is invoked when
 *                      the button is pressed instead of dismissing the dialog.
 *
 *      ok              Convenience alias. If set to 'true', append a standard OK button to the button list that
 *                      dismisses the current dialog. If this is a function, then the function is invoked when the
 *                      button is pressed instead of dismissing the dialog.
 *
 *                      It is important to note that callback for any of the buttons must return 'true' IF they want
 *                      to keep the dialog open after the click event.
 *
 *      open            A callback that is invoked when the dialog element is visible.
 *
 *      create          A callback that is triggered when the dialog is created.
 *
 *      close           A callback that is invoked when the dialog is dismissed.
 *
 *      beforeClose     triggered when a dialog is about to close. If the function returns false, the dialog will
 *                      not close.
 *
 */

/*
 * Pops up a modal confirm dialog with Yes and No buttons.
 * It accepts:
 *      - title
 *      - message - an optional details message
 *      - questionMessage - a question message
 *      - checkboxLabel - if present, a single checkbox is shown with this label. A boolean is passed to the ok
 *                           callback; true if the checkbox is checked and false otherwise. For forms more
 *                           complicated than a single checkbox, customControlsConstructor should be used instead.
 *                           checkboxLabel and customControlsConstructor are mutually exclusive.
 *      - customControlsConstructor - A constructor function that should produce a ko ViewModel. The view
 *                           will be attached to the confirm window. The view model will be passed to any OK or
 *                           cancel callbacks.  This will .dispose() the resulting view model. This option is
 *                           mutually exclusive with the checkboxLabel option.
 *      - ok - callback for Yes/OK.
 *      - okLabel - default is Yes, but you can pass your own.
 *      - cancel - callback for No/Cancel
 *      - cancelLabel - default is No, but you can pass your own.
 */
function confirm(options) {
    options = _.clone(options);
    options.template = options.template || 'dxcore/template/dialog/confirm';
    options.modal = true;
    options.noClose = true;
    options.ok = options.ok || true;
    options.okLabel = options.okLabel || dxLocale.gls('button.yes');
    options.cancel = options.cancel || true;
    options.cancelLabel = options.cancelLabel || dxLocale.gls('button.no');
    options.dialogClass = 'confirmDialog';
    options.title = options.title || dxLocale.gls('generic.label.confirm');

    if (options.checkboxLabel && options.customControlsConstructor) {
        dxUtil.fail('checkboxLabel and customControlsConstructor are mutually exclusive options.');
    }

    var dialogOptions = {
        message: options.message,
        questionMessage: options.questionMessage,
        checkboxLabel: options.checkboxLabel
    };

    // Call the specified callback (if defined) with the viewmodel, then dispose viewModel
    function callBackAndCleanUp(callback, viewModel) {
        var result;

        if (_.isFunction(callback)) {
            result = callback(viewModel);
        }

        viewModel.dispose();
        return result;
    }

    var $dialogElem = dxTemplate.template(options.template, dialogOptions);

    if (options.checkboxLabel && _.isFunction(options.ok)) {
        options.ok = _.wrap(options.ok, function (cb) {
            var checkboxChecked = $dialogElem.find('.sid-confirm-checkbox').is(':checked');
            return cb(checkboxChecked);
        });
    } else if (options.customControlsConstructor) {
        var viewModel = new options.customControlsConstructor();
        var view = viewModel.attachView();
        $dialogElem.find('.sid-optional-controls').append(view);
        options.ok = _.bind(callBackAndCleanUp, undefined, options.ok, viewModel);
        options.cancel = _.bind(callBackAndCleanUp, undefined, options.cancel, viewModel);
    }

    options.content = $dialogElem;

    return _show(options);
}

/*
 * Pops up a modal file upload dialog.
 * The dialog will let the user pick a file to upload.
 * It accepts:
 *      - title - the title of the dialog
 *      - message - an optional details message
 *      - uploadUrl - the url to post the file upload to
 *      - uploadToken - the upload token that's required to upload the file
 *      - close - boolean value or callback function for closing
 *      - cancel - boolean value or callback function for cancel
 *      - success - callback for successful uploading
 *      - start - callback for uploading start
 *      - fail - callback for failed uploading
 * There must one of close/cancel options be specified. Specifying both of them is now allowed.
 */
function upload(options) {
    options = _.clone(options);
    options.template = options.template || 'dxcore/template/dialog/file-upload';
    options.modal = true;
    options.noClose = true;
    options.ok = false;
    options.cancel = options.cancel || false;
    options.close = options.close || false;
    options.dialogClass = 'fileUploadDialog';
    options.title = options.title || dxLocale.gls('window.title.fileUpload');

    if (options.close && options.cancel) {
        dxUtil.fail('Invalid configuration for upload(). Must specify only one of cancel/close options');
    }

    if (!options.close && !options.cancel) {
        dxUtil.fail('Invalid configuration for upload(). Must specify one of cancel/close options');
    }

    var uploadViewModel = {
        progress: ko.observable(0),
        progressText: ko.observable(''),
        errorText: ko.observable(''),
        uploadStarted: ko.observable(false)
    };

    var dialogElem = dxTemplate.template(options.template, {
        message: options.message,
        questionMessage: options.questionMessage,
        vm: uploadViewModel
    });
    var form = dialogElem.find('form');
    var jqXHR;
    form.fileupload({
        url: options.uploadUrl,
        dataType: 'json',
        formData: {
            token: options.uploadToken
        },
        done: function done(e, data) {
            jqXHR = undefined;
            if (data.result.status === 'OK') {
                uploadViewModel.progress(100);
                uploadViewModel.progressText(dxLocale.gls('window.fileUpload.progress.done'));
                if (options.success) {
                    options.success(data.result);
                }
            } else {
                dxUtil.warn('File upload failed.');
                uploadViewModel.progressText(dxLocale.gls('window.fileUpload.progress.error'));
                uploadViewModel.errorText(!_.isUndefined(data.result.error) ? data.result.error.details : '');
                if (options.fail) {
                    options.fail(data.result);
                }
            }
        },
        fail: function fail(e, data) {

            // don't handle event if upload was cancelled (aborted)
            if (data.errorThrown !== 'abort') {
                jqXHR = undefined;
                uploadViewModel.progressText(dxLocale.gls('window.fileUpload.progress.error'));
                if (options.fail) {
                    options.fail(data.result);
                }
            }
        },
        progressall: function progressall(e, data) {
            var progress = parseInt(data.loaded / data.total * 100, 10);
            uploadViewModel.progress(progress);
            uploadViewModel.progressText(dxLocale.gls('window.fileUpload.progress.completed', [progress]));
        },
        add: function add(e, data) {
            dialogElem.find('form').hide();
            jqXHR = data.submit();
        },
        start: function start() {
            uploadViewModel.progress(0);
            uploadViewModel.progressText('');
            uploadViewModel.uploadStarted(true);
            uploadViewModel.errorText('');
            if (options.start) {
                options.start();
            }
        },
        autoUpload: true,
        limitMultiFileUploads: 1,

        // prevents propagating progressall event after failed/aborted event
        recalculateProgress: false
    });

    options.content = dialogElem;

    if (options.close) {
        options.buttons = [{
            text: dxLocale.gls('General.Close'),
            'class': 'btn btn-close'
        }];
        var originalClose = options.close;
        options.close = function () {
            var self = this;
            _.each(dialogElem, ko.cleanNode);
            if (_.isFunction(originalClose)) {
                originalClose.call(self);
            }
        };
    }

    if (options.cancel) {
        var originalCancel = options.cancel;
        options.cancel = function () {
            var self = this;
            _.each(dialogElem, ko.cleanNode);
            if (jqXHR) {
                jqXHR.abort();
                jqXHR = undefined;
            }
            if (_.isFunction(originalCancel)) {
                originalCancel.call(self);
            }
        };
    }

    return _show(options);
}

/*
 * Pops up a modal alert dialog.
 * It accepts:
 *      - title
 *      - message
 *      - ok - optional callback for OK.
 */
function alert(options) {
    options = _.clone(options);
    options.template = options.template || 'dxcore/template/dialog/alert';
    options.modal = true;
    options.ok = options.ok || true;
    options.buttons = null;
    options.cancel = null;
    options.dialogClass = 'alertDialog';
    options.title = options.title || dxLocale.gls('generic.label.alert');

    var dialogElem = dxTemplate.template(options.template, {
        message: options.message
    });

    options.content = dialogElem;
    return _show(options);
}

/*
 * Pops up a modal error alert dialog.
 * It accepts:
 *      - title
 *      - message - the error message.
 *      - errorCode - error code returned by the server.
 *      - suggestedAction - any action server may want to suggest to the user.
 *      - commandOutput - optional command output, if any.
 *      - diagnoses - optional list of diagnosing information, if any.
 *      - ok - optional callback for OK.
 */
function errorAlert(options) {
    options = _.clone(options);
    options.template = options.template || 'dxcore/template/dialog/error';
    options.modal = true;
    options.ok = options.ok || true;
    options.buttons = null;
    options.cancel = null;
    options.dialogClass = 'errorDialog';
    options.title = options.title || dxLocale.gls('generic.label.error');

    options.errorCode = options.errorCode || '';
    options.message = options.message || '';
    options.suggestedAction = options.suggestedAction || '';
    options.commandOutput = options.commandOutput ? options.commandOutput.split('\n') : undefined;
    options.diagnoses = options.diagnoses || [];

    var dialogElem = dxTemplate.template(options.template, {
        message: options.message,
        errorCode: options.errorCode,
        suggestedAction: options.suggestedAction,
        commandOutput: options.commandOutput,
        diagnoses: options.diagnoses
    });

    options.content = dialogElem;
    var dialog = _show(options);

    var $scrollTarget = dialog.find('.scroll-target');

    /*
     * In some versions of IE setting 'height' to 'auto' can result in rounding errors which can result in
     * incorrectly showing a scrollbar. Detect this by checking if the scrollHeight is one pixel (or less) greater
     * than the height.
     */
    if ($scrollTarget.length !== 0 && $scrollTarget[0].scrollHeight - $scrollTarget.height() > 1) {

        // We support two different scrollbar plugins. Do simple feature detection to decide which to use.
        if (_.isFunction($.fn.jScrollPane)) {
            // Setup scrollbar and scroll to top. Note: jScrollPane needs the element to already be on screen
            $scrollTarget.jScrollPane({ showArrows: true }).data('jsp').scrollToY(0);
        } else if (_.isFunction($.fn.perfectScrollbar)) {
            $scrollTarget.perfectScrollbar({
                suppressScrollX: true,
                minScrollbarLength: 20
            });
        }
    }

    return dialog;
}

/*
 * Pops up a modal connectivity error dialog that displays a single 'logout' button that, when clicked, will log out
 * the user.
 *
 * It accepts:
 *      - title
 *      - message
 *      - logout - optional callback to perform when clicking logout. If provided, you must do the logging out!
 */
function connectivityErrorAlert(options) {
    if (!_.isNull(module.exports.manager.get('connectivity-error-alert-dialog'))) {
        return module.exports.manager.get('connectivity-error-alert-dialog');
    }

    options = _.clone(options) || {};
    options.id = 'connectivity-error-alert-dialog';
    options.template = options.template || 'dxcore/templadisplayErrorAlertte/dialog/connectivity-error';
    options.modal = true;
    options.noClose = true;
    options.ok = false;
    options.buttons = [{
        text: dxLocale.gls('generic.ajax.failure.logoutButton'),
        icons: {
            primary: 'icon-button icon-accept'
        },
        click: function click() {
            if (options.logout) {
                options.logout();
            } else {
                options.endSession();
            }
        },
        'class': 'btn btn-primary'
    }];
    options.cancel = null;
    options.dialogClass = 'connectivityErrorDialog';
    options.closeOnEscape = false;
    options.title = options.title || dxLocale.gls('generic.label.connectivityError');
    options.content = dxLocale.gls('generic.ajax.server.unreachable');
    return _show(options);
}

/*
 * Pops up a generic dialog. This is totally customizable and a user can utilize all the underlying jquery-ui
 * options to build the dialog. No checking/constraining is done on this form of dialog.
 * Developer can pass jQuery elements in 'content' construct directly. This will essentially let the user pass in
 * a compiled template which may have a ViewModel with observables attached to it.
 */
function dialog(options) {
    options = _.clone(options);
    options.template = options.template || 'dxcore/template/dialog/generic';
    options.title = options.title || 'Delphix';

    if (!options.content) {
        var dialogElem = dxTemplate.template(options.template, {
            message: options.message
        });

        options.content = dialogElem;
    }

    return _show(options);
}

/*
 * Internal function to build and show a pop-up.
 */
function _show(options) {
    var config = options || {};
    var buttons = [];

    config.id = options.id || dxUtil.makeUniqueId('dialog');
    config.resizable = false;
    config.closeText = '';
    config.dialogClass = 'dialog ' + (options.dialogClass || '');
    config.close = options.close || _close;
    config.create = options.create || null;
    config.open = options.open || null;
    config.height = options.height || 'auto';
    config.width = options.width || 'auto';
    config.maxHeight = options.maxHeight || 'auto';
    config.maxWidth = options.maxWidth || 'auto';
    config.title = options.title || '';
    config.beforeClose = options.beforeClose || null;
    config.noClose = config.noClose || false;

    if (config.noClose) {
        config.dialogClass += ' no-close ';
    }

    var onClickFunction = function onClickFunction(callback) {
        var keepDialogOpen = false;
        if (_.isFunction(callback)) {
            keepDialogOpen = callback();
        }

        if (keepDialogOpen === true) {
            return;
        } else {
            _close.apply(this);
        }
    };

    _.each(config.buttons, function (buttonDef) {
        buttons.push({
            text: buttonDef.text,
            click: function click() {
                onClickFunction.call(this, buttonDef.click);
            },
            icons: buttonDef.icons || {},
            'class': buttonDef['class'] || ''
        });
    });

    // Default cancel button
    if (options.cancel) {
        buttons.unshift({
            text: options.cancelLabel || dxLocale.gls('button.cancel'),
            click: function click() {
                onClickFunction.call(this, options.cancel);
            },
            icons: {
                primary: 'icon-button icon-button-separator icon-cancel'
            },
            'class': 'btn sid-cancel-button'
        });
    }

    // Default OK button
    if (options.ok) {
        buttons.push({
            text: options.okLabel || dxLocale.gls('button.ok'),
            icons: {
                primary: 'icon-button icon-button-separator icon-accept'
            },
            click: function click() {
                onClickFunction.call(this, options.ok);
            },
            'class': 'btn btn-primary sid-accept-button'
        });
    }

    config.buttons = buttons;

    var dialogContainer = $('<div>');
    dialogContainer.attr('id', config.id);
    dialogContainer.append(options.content);

    module.exports.manager.add(dialogContainer);

    /*
     * If we have modal dialogs on display, we cannot pop-up regular dialogs.
     * So just queue and pop them up when all modal dialogs are cleared out.
     */
    if (modalCounter > 0 && !config.modal) {
        nonModalWindowQueue.push({ dialogContainer: dialogContainer, config: config });
        return null;
    }

    if (config.modal) {
        modalCounter++;
    }

    return dialogContainer.dialog(config);
}

// takes dialog (jquery node) as input and adds into its queue based on its ID.
function add(dialog) {
    module.exports.manager = module.exports.manager || {};
    var dialogs = module.exports.manager._dialogs = module.exports.manager._dialogs || {};
    var id = dialog.attr('id');
    if (!_.has(dialogs, id)) {
        dialogs[id] = dialog;
    }
}

// returns back the dialog (jquery node) given its ID.
function get(dialogId) {
    module.exports.manager = module.exports.manager || {};
    var dialogs = module.exports.manager._dialogs = module.exports.manager._dialogs || {};
    if (_.has(dialogs, dialogId)) {
        return dialogs[dialogId];
    } else {
        return null;
    }
}

// in case we need to close all the windows on screen
function closeAll() {
    module.exports.manager = module.exports.manager || {};
    var dialogs = module.exports.manager._dialogs = module.exports.manager._dialogs || {};
    _.each(dialogs, function (dialog, id) {
        dialog.dialog('destroy').remove();
        delete dialogs[id];
        modalCounter--;
    });
}

// Hides the current dialog. This has no effect if the dialog is not currently shown.
function _close() {
    module.exports.manager = module.exports.manager || {};
    var dialogs = module.exports.manager._dialogs = module.exports.manager._dialogs || {};

    if ($(this).dialog('option', 'modal') && modalCounter > 0) {
        modalCounter--;
    }

    $(this).dialog('close');

    try {
        if (!$(this).dialog('isOpen')) {
            $(this).remove();
        }
    } catch (e) {
        /*
         * In some instances, for reasons beyond my grasp, the jQuery-UI stack calls back this method twice, even
         * when dialog has already been closed and un-initialized. So, calling dialog('isOpen') in such cases would
         * throw an error back. This try catch is to handle such scenarios.
         */
        $(this).remove();
    }

    delete dialogs[this.id || this.attr('id')];

    if (modalCounter === 0 && nonModalWindowQueue.length) {
        _.each(nonModalWindowQueue, function (dialogState) {
            dialogState.dialogContainer.dialog(dialogState.config);
        });
        nonModalWindowQueue = [];
    }
}

/*
 * Dialogs can be registered by name, allowing consumers to display content without needing to call directly
 * into the implementation. This is just a wrapper around callback registration.
 */
function registerNamed(path, callback) {
    if (!_.isFunction(callback)) {
        throw new Error('attempt to register named dialog "' + path + '" with invalid callback');
    }

    namedModal[path] = callback;
}

function showNamed(path) {
    namedModal[path]();
}

/*
 * When given an ErrorResult, this will display an error alert to the user
 */
function displayErrorAlert(errorResult) {
    if (!(errorResult instanceof Backbone.Model) || errorResult.get('type') !== 'ErrorResult') {
        dxUtil.fail('displayErrorAlert expects an ErrorResult model as an argument.');
    }

    // Get the APIError
    var apiError = errorResult.get('error');

    module.exports.errorAlert({
        message: dxUserUtil.processErrorResultDetails(apiError),
        errorCode: apiError.get('id') || '',
        suggestedAction: apiError.get('action') || '',
        commandOutput: apiError.get('commandOutput') || ''
    });
}

module.exports = {
    confirm: confirm,
    upload: upload,
    alert: alert,
    errorAlert: errorAlert,
    connectivityErrorAlert: connectivityErrorAlert,
    dialog: dialog,
    showNamed: showNamed,
    _show: _show,
    _close: _close,
    registerNamed: registerNamed,
    displayErrorAlert: displayErrorAlert,
    // window manager keeps track of all the windows that pop-up
    manager: {
        add: add,
        get: get,
        closeAll: closeAll,
        _dialogs: {}
    }
};

},{"dxcore/data/delphix/js/util.js":3,"dxcore/js/locale.js":17,"dxcore/js/template.js":21,"dxcore/js/util.js":23}],25:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _, ko, Backbone, jQuery */

'use strict';

var dxSystem = require('dxcore/ko/js/system.js'),
    dxUtil = require('dxcore/js/util.js'),
    dxData = require('dxcore/data/js/index.js'),
    dxComplexObservableAttrs = require('dxcore/ko/js/ComplexObservableAttributes.js'),
    dxObservableAttr = require('dxcore/ko/js/ObservableAttribute.js'),
    dxProxy = require('dxcore/data/delphix/js/proxy.js'),
    dxOperation = require('dxcore/ko/js/operation.js');

/*
 * ServerObject(reference, type, options)
 * ====================================================
 * Creates an object that contains a set of observables that correspond to properties of a schema based object. When
 * called, this will try to retrieve an object from the server with the specified reference and the specified root type,
 * and then set up an observable for each of its properties, or a sub-observable server object for any embedded objects.
 *
 * ServerObject constructs a Javascript object with the following properties
 * (note: the dx prefix is to avoid a name conflict with the schema properties).
 *    schema-props                : Discussed more below
 * it will also have these functions.
 *    dxDispose                   : Clean up all dependencies held by the server object.
 *    dxSetDebug                  : Turn on or off a debugging flag. all data updates will be reported.
 *
 * The options parameter may contain any or none of these values. If none are present, the server object will contain
 * all of the properties defined in the server object.
 *    dataMapping                 : A mapping of names to property paths. Each name will be added to the server object
 *                                  as a new observable, and the proxy system will be used to generate the
 *                                 value
 *    onlyUseMapping              : If truthy, the server object will only contain values defined in the data mapping.
 *                                  Otherwise, it will contain all the properties from server object plus those from
 *                                  the mapping.
 *    writer                      : A routine passed to all individual attributes. Provides a way to manage any writes
 *                                  to these properties. See ObservableAttribute for more details.
 *    suppressDefaultErrorHandler : If truthy, the default error handled is not triggered on errors.
 *    disposalContext             : The disposal context this should be added to. By default it will be added to the
 *                                  page context.
 *
 * ClientObject(type, options)
 * ====================================================
 * Creates an object that contains a set of observables that correspond to properties in the schema based object.
 * This is a 'client object', which means it is not tied to the server in any way, and can be directly read and written
 * to.
 *
 * makeServerObjectFromModel(model, options)
 * =========================================
 * Given a model as provided by data routines, return an object which contains an observable for each property
 * in the model.  The object returned has the same properties as discussed above. The options is also the same as
 * documented above.
 */

// Add a single property from the data mapping onto the server object.
function updateProxyAttribute(theObject, attrName, proxy, disposalContext) {
    var value = proxy.get(attrName);
    var existingObservable = theObject[attrName];

    if (!_.isUndefined(existingObservable)) {
        var contents = existingObservable.peek();
        if (contents && contents.dxDispose) {
            contents.dxDispose();
        }
    }

    /*
     * If the value is a backbone model, and what we have set up currently isn't a backbone model, then wrap the model
     * as an observable object.  This can happen in a couple ways: First, when the proxy is first set up, the proxy
     * attribute may point to nothing yet, and so may be undefined. Thus, the first time this is called, we'd set up
     * an ordinary observable. The second situation would be where the proxy points to different types each time it is
     * updated (unlikely, but possible)
     */
    if (value instanceof Backbone.Model) {
        if (_.isUndefined(existingObservable)) {
            theObject[attrName] = ko.observable(makeObjectFromModel(value, { disposalContext: disposalContext }));
        } else {
            existingObservable(makeObjectFromModel(value, { disposalContext: disposalContext }));
        }
        return;
    }

    /*
     * In contrast, if the current observable doesn't exist, or is a model, we'll want to set up an ordinary
     * observable.
     */
    if (_.isUndefined(existingObservable)) {
        theObject[attrName] = ko.observable(value);
        return;
    }

    // Nah, it's just an ordinary observable, and we're updating it in an ordinary way.
    existingObservable(value);
}

// for each data mapped property, set up an observable.
function addProxyAttributes(proxy, proxyDef, theObject, disposalContext) {
    _.each(proxyDef, function (value, name) {
        updateProxyAttribute(theObject, name, proxy, disposalContext);
        proxy.on('change:' + name, function () {
            updateProxyAttribute(theObject, name, proxy, disposalContext);
            if (theObject._dxDebug) {
                dxUtil.debug('MAPPED ATTR CHANGE: ' + name + '=' + proxy.get(name) + ' IN ' + JSON.stringify(theObject._dxModel.attributes));
            }
        }, theObject._dxSelfIdentifier);
    }, this);
}

/*
 * Invoke an operation.  Convert aguments to backbone equivalents, and call the corresponding operation on the model
 */
function callOperation(model, operationName, otherArgs) {
    return dxOperation._callOperation(model, isSchemaObject, makeObjectFromModel, operationName, otherArgs);
}

// add an object- or standard-operation to the object
function addOperation(model, funcName, theObject) {
    theObject[funcName] = function () {
        return callOperation(model, funcName, arguments);
    };
}

/*
 * For each property defined in the schema of the model, set up an observable for that property. We use the non-public
 * schema definition, since we can't infer types accurately just by looking at what is in model.attributes
 */
function addSchemaProperties(model, oso, options) {
    if (options.onlyUseMapping) {
        return;
    }

    _.each(model._dxSchema.properties, function (propDef, propName) {
        // Don't replace any existing props (data mapped properties (they take precedence) or ones already added)
        if (!_.isUndefined(oso[propName])) {
            return;
        }

        /*
         * Here we deal with a strange case that requires some explanation, both because it is not obvious, and because
         * this is not a 100% solution.  Some schema types are declared as arrays of types (most prominently, look at
         * the result property of OKResult). In these cases, we don't necessarily know what kind of observable to
         * create.  We go through a couple steps to try to cope with this (see inline comments below).
         *
         * One potential flaw in this process is that this assumes a model attribute can not change type during the
         * course of the model's existence (and even then, we don't care about changes from, say, string to null. But
         * just between objects, arrays and simple types).  Theoreticaly this is possible, but in practice it doesn't
         * happen.  If you are reading this comment and cursing, it means that assumption is no longer valid and you'll
         * need to create an observable which can 'morph', which is doable but just more work.
         *
         * One actual flaw in this is that if you try to create a client object that is an OKResult or another which
         * has an array or object as one of the possible types in that array of types, this won't ever create the
         * observable for that.
         */
        var type = propDef.type;
        if (_.isArray(propDef.type)) {
            type = 'simpleValue';

            // Check if a non-simple type exists in the array of types
            var hasNonSimpleType = _.find(propDef.type, function (aType) {
                return aType === 'array' || aType === 'object';
            });

            /*
             * It does. If the model has undefined for this property, then we just don't create an observable.
             * Eventually this will be called when the model is ready, in which case we'll have an actual value. In that
             * case, use that type to guide the construction of the observable, below.
             */
            if (hasNonSimpleType) {
                var value = model.get(propName);
                if (_.isUndefined(value) && !model._dxIsReady) {
                    return;
                }
                if (_.isArray(value)) {
                    type = 'array';
                } else if (_.isObject(value)) {
                    type = 'object';
                }
            }
        }

        switch (type) {
            case 'array':
                oso[propName] = dxComplexObservableAttrs.makeObservableArrayAttribute(model, propName, makeObjectFromModel, options);
                break;
            case 'object':
                // Don't use model for creating Json object, because we consider instances of this type as black box
                if (_.has(propDef, '$ref') && propDef.$ref !== 'Json') {
                    // Only pass on disposalContext, other params like dataMapping don't apply to children
                    var newOptions = _.pick(options, 'disposalContext');

                    oso[propName] = ko.observable(makeObjectFromModel(model.get(propName), newOptions));
                } else {
                    oso[propName] = dxComplexObservableAttrs.makeObservableObjectAttribute(model, propName, makeObjectFromModel, options);
                }
                break;
            default:
                oso[propName] = dxObservableAttr.makeObservableAttribute(model, propName, options);
                break;
        }
    });

    if (!_.has(options, 'addObjectOpHandlers') || options.addObjectOpHandlers) {
        for (var propName in model) {
            // can't use _.each() as it won't get the values from the prototype
            if (propName.charAt(0) === '$' && _.isFunction(model[propName]) && _.isUndefined(oso[propName])) {
                addOperation(model, propName, oso);
            }
        }
    }
}

function setDebug(value, identifier) {
    this._dxDebug = value;
    this._dxDebugIdentifier = identifier;
}

function instanceOf(typeName) {
    return this._dxModel.instanceOf(typeName);
}

// Clean up the object, by disconnecting as much as possible so gc can happen more easily.
function dispose() {
    if (this._dxDebug) {
        dxUtil.debug('DISPOSING: ' + JSON.stringify(this._dxModel ? this._dxModel.attributes : 'already disposed'));
    }

    if (this._dxProxy) {
        this._dxProxy.setModel(undefined);
        this._dxProxy.off(undefined, undefined, this._dxSelfIdentifier);
    }

    if (this._dxModel) {
        this._dxModel.off(undefined, undefined, this._dxSelfIdentifier);
    }

    _.each(this, function (item) {
        if (item) {
            if (!_.isUndefined(item.dispose)) {
                item.dispose();
            } else if (isSchemaObject(ko.unwrap(item))) {
                ko.unwrap(item).dxDispose();
            }
        }
    });

    this._dxIsDisposed = true;
}

function isDisposed() {
    var self = this;
    return !!self._dxIsDisposed;
}

/*
 * Given a model, construct an object from it. Options are documented above.
 */
function createClientOrServerObject(theObject, backboneModel, options) {
    var deferred = new jQuery.Deferred();
    theObject._dxSelfIdentifier = {
        clientServerObjects: true // help identify what kind of object has a hold on the model
    };
    options = options || {};

    // check args
    if (!_.isUndefined(options) && !_.isObject(options)) {
        dxUtil.fail('Options, if provided, must be an object.');
    }
    if (!_.isUndefined(options.dataMapping) && !_.isObject(options.dataMapping)) {
        dxUtil.fail('Data mapping must be an object.');
    }
    if (!options.dataMapping && options.onlyUseMapping) {
        dxUtil.fail('Must provide a dataMapping when onlyUseMapping is specified.');
    }

    theObject.dxDataReady = deferred.promise();
    theObject.dxReadyState = ko.observable();
    theObject._dxModel = backboneModel;
    // build the proxy if needed
    if (options.dataMapping) {
        var proxy = dxProxy.newProxy(options.dataMapping);
        proxy.setModel(backboneModel);
        addProxyAttributes(proxy, options.dataMapping, theObject, options.disposalContext);
        theObject._dxProxy = proxy;
    }

    // Add the model's current properties
    addSchemaProperties(backboneModel, theObject, options);

    // report once the model is ready to go (and update properties in case there was a type upgrade)
    backboneModel.once('ready', function () {
        addSchemaProperties(backboneModel, theObject, options);
        backboneModel.off(undefined, undefined, theObject._dxSelfIdentifier);
        deferred.resolve(theObject);
        theObject.dxReadyState(true);
    }, theObject._dxSelfIdentifier);

    backboneModel.once('error', function (model, errorResult) {
        backboneModel.off(undefined, undefined, theObject._dxSelfIdentifier);
        deferred.reject(dxOperation._prepResult(errorResult, makeObjectFromModel));
        theObject.dxReadyState(false);
    }, theObject._dxSelfIdentifier);

    backboneModel.once('delete', function () {
        theObject.dxDispose();
    }, theObject._dxSelfIdentifier);

    // Define the new public api
    _.extend(theObject, {
        dxDispose: dispose,
        dxSetDebug: setDebug,
        dxInstanceOf: instanceOf,
        dxIsDisposed: isDisposed
    });

    dxSystem.addToDisposalContext(theObject, options.disposalContext);

    return theObject;
}

// get a server model, and return a server object around it.
function ServerObject(reference, type, options) {
    if (!(this instanceof ServerObject)) {
        dxUtil.fail('Must call with new.');
    }
    var model = arguments[3]; // if we passed a 4th argument, this is an internal call where we already have the model
    if (_.isUndefined(model)) {
        var suppressErrorHandler = options && options.suppressDefaultErrorHandler;
        model = dxData.getServerModel(reference, type, suppressErrorHandler);
    }
    return createClientOrServerObject(this, model, options);
}

function ServerSingletonObject(type, options) {
    if (!(this instanceof ServerSingletonObject)) {
        dxUtil.fail('Must call with new.');
    }
    var model = arguments[2]; // if we passed a 3rd argument, this is an internal call where we already have the model
    if (_.isUndefined(model)) {
        var suppressErrorHandler = options && options.suppressDefaultErrorHandler;
        model = dxData.getServerSingleton(type, { suppressDefaultErrorHandler: suppressErrorHandler });
    }
    return createClientOrServerObject(this, model, options);
}

// create a client model, and return a client object around it.
function ClientObject(type, options) {
    if (!(this instanceof ClientObject)) {
        dxUtil.fail('Must call with new.');
    }
    var model = arguments[2]; // if we passed a 3rd argument, this is an internal call where we already have the model
    if (_.isUndefined(model)) {
        model = dxData.newClientModel(type);
    }
    return createClientOrServerObject(this, model, options);
}

// given a model, return the appropriate server or client object
function makeObjectFromModel(model, options) {
    if (_.isUndefined(model)) {
        dxUtil.fail('Must provide a model.');
    }

    /*
     * Call the public constructor functions, so folks can still do instanceof, but then pass the model we already
     * have as a secret parameter to the constructor functions so they won't try to retrieve a new one.
     */
    if (model.isServerModel()) {
        if (model._dxSchema.singleton) {
            return new ServerSingletonObject(undefined, options, model);
        } else {
            return new ServerObject(undefined, undefined, options, model);
        }
    } else {
        return new ClientObject(undefined, options, model);
    }
}

/*
 * Identifies if an object is a Client or Server Object
 *
 * Parameters:
 *   value: anything.
 * Return:
 *   true if the object is an instance of ServerObject, ClientObject or ServerSingletonObject.
 */
function isSchemaObject(value) {

    return value instanceof ServerObject || value instanceof ClientObject || value instanceof ServerSingletonObject;
}

/*
 * Make sure that the handler is called at exactly one time when the specified serverObject is "ready".
 */
function checkAndSubscribeToServerObject(serverObject, handler, disposalContext) {
    if (!isSchemaObject(serverObject)) {
        dxUtil.fail('Must call checkAndSubscribeToServerObject() with a schema object.');
    }
    if (!handler) {
        dxUtil.fail('Must call checkAndSubscribeToServerObject() with a handler.');
    }

    function processResult() {
        handler(serverObject.dxReadyState.peek(), serverObject);
    }

    if (!_.isUndefined(serverObject.dxReadyState.peek())) {
        processResult();
        // return a dummy subscription so caller does not need to protect itself against undefined
        return ko.observable().subscribe(function dummyFunction() {});
    }

    return dxSystem.subscribeOnce(serverObject.dxReadyState, processResult, undefined, undefined, disposalContext);
}

// Define the public api
module.exports = {
    makeObjectFromModel: makeObjectFromModel,
    ServerObject: ServerObject,
    ServerSingletonObject: ServerSingletonObject,
    ClientObject: ClientObject,
    isSchemaObject: isSchemaObject,
    checkAndSubscribeToServerObject: checkAndSubscribeToServerObject
};

},{"dxcore/data/delphix/js/proxy.js":2,"dxcore/data/js/index.js":4,"dxcore/js/util.js":23,"dxcore/ko/js/ComplexObservableAttributes.js":26,"dxcore/ko/js/ObservableAttribute.js":27,"dxcore/ko/js/operation.js":28,"dxcore/ko/js/system.js":29}],26:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _, ko, Backbone */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxObservableAttr = require('dxcore/ko/js/ObservableAttribute.js');

/*
 * makeObservableArrayAttribute
 * ============================
 * An ObservableArrayAttribute is a special observableArray that wraps up access to an array attribute of a Backbone
 * Model. Do not create one of these yourself, but instead using higher-level things like ObservableServerObjects.
 *
 * Create an observableArrayAttribute like this:
 *   makeObservableArrayAttribute(myModel, 'name', makeObjectFromModel)
 * This returns an observableArray that can be used entirely like an ordinary observableArray
 * Any time the underlying model is updated, the observable will notice and notify its subscribers.
 *
 * ObservableArrayAttributes have the same writing semantics as an observableAttribute. See that for more details.
 * The thumbnail version is:
 *  - Client models are updated directly
 *  - Server models when a writer is not provided, $$update() is called on the model with the proposed new value for the
 *    attribute (the local data is not updated until the server responds).
 *  - Server models, when a writer is provided, call the writer.  In this case, the array passed to the writer may
 *    contain observableObjects, not the backbone equivalents. The writer can return WRITE_UNHANDLED in order to defer
 *    to the standard update behavior
 *
 * In addition to standard observable functions, ObservableAttribute also has these functions:
 *    dispose()  : disposes the observable. This includes removing listener(s) on the model.
 *    setDebug(value, id) : If the value is truthy, this will print debug messages at key places.  If an id is
 *                 provided, debug messages from this instance will include that id.
 *
 * The options object can accept these values:
 *    writer     : a function with the signature writer(observable, propertyName, value). It is up to the writer to
 *                 handle an update to the specified property.  If it chooses not to, it can return
 *                 WRITE_UNHANDLED, in which case the standard write behavior will be invoked.
 *
 * makeObservableObjectAttribute
 * ============================
 * An ObservableObjectAttribute is much like an observableArrayAttribute, except that it manages an object attribute of
 * a Backbone model. Reading and writing behavior, as well as dispose() and setDebug() behavior is the same as the
 * observableArrayAttribute.
 */
/*
 * Converts a value (which may contain backbone models in the elements of an array or values of an object's properties)
 * into forms usable by these observables. In particular, backbone models are converted into observableObjects.
 */
function prepareValue(sourceValue, asNonObservable, disposalContext, makeObjectFromModel) {
    if (_.isArray(sourceValue)) {
        var newArray = _.map(sourceValue, function (value) {
            return prepareValue(value, false, disposalContext, makeObjectFromModel);
        });
        return !asNonObservable ? ko.observableArray(newArray) : newArray;
    } else if (_.isObject(sourceValue)) {
        var result;
        if (sourceValue instanceof Backbone.Model) {
            result = makeObjectFromModel(sourceValue, { disposalContext: disposalContext });
        } else {
            var newObject = {};
            _.each(sourceValue, function (value, key) {
                newObject[key] = prepareValue(value, false, disposalContext, makeObjectFromModel);
            });
            result = newObject;
        }

        return !asNonObservable ? ko.observable(result) : result;
    } else {
        return !asNonObservable ? ko.observable(sourceValue) : sourceValue;
    }
}

/*
 * dispose any members of either array or object values.
 */
function disposeCurrentValue(observedValue) {
    if (_.isObject(observedValue)) {
        _.each(observedValue, function (value) {
            value = ko.unwrap(value);
            if (dxUtil.isNone(value)) {
                return;
            }

            if (value.dxDispose) {
                value.dxDispose();
            }
            if (value.dispose) {
                value.dispose();
            }
        });
    }
}

/*
 * The object attribute in a backbone model has changed.  Rebuild the object we are presenting and send notifications.
 */
function objectAttributeChanged() {
    var self = this;

    if (self._dxDebug) {
        showDebugMessage(self, 'Model changed');
    }
    self.valueWillMutate();

    var disposalContext = self._dxOptions && self._dxOptions.disposalContext;

    var bbObject = self._dxModel.get(self._dxAttrName);
    disposeCurrentValue(self._dxObservedValue);

    self._dxObservedValue = _.isUndefined(bbObject) ? {} : prepareValue(bbObject, true, disposalContext, self._makeObjectFromModel);

    self.valueHasMutated();
}

/*
 * The attribute on the backbone model changed.  reset the array this observable is managing, and rebuild it from the
 * backbone array
 */
function arrayAttributeChanged() {
    var self = this;

    if (self._dxDebug) {
        showDebugMessage(self, 'Model changed');
    }
    self.valueWillMutate();

    var disposalContext = self._dxOptions && self._dxOptions.disposalContext;

    var bbArray = self._dxModel.get(self._dxAttrName);
    disposeCurrentValue(self._dxObservedValue);
    self._dxObservedValue = _.isUndefined(bbArray) ? undefined : prepareValue(bbArray, true, disposalContext, self._makeObjectFromModel);

    self.valueHasMutated();
}

// Convert an array, which may contain observable objects, so we need to extract the backbone versions and json-ize them
function jsonify(sourceValue) {
    sourceValue = ko.unwrap(sourceValue);
    var result = sourceValue;

    if (_.isArray(sourceValue)) {
        result = _.map(sourceValue, function (element) {
            element = ko.unwrap(element);
            if (element._dxModel) {
                return element._dxModel.toJSON();
            }
            return jsonify(element);
        });
    } else if (sourceValue && _.isObject(sourceValue)) {
        result = {};
        _.each(sourceValue, function (value, key) {
            result[key] = value && value._dxModel ? value._dxModel.toJSON() : jsonify(value);
        });
    }

    return result;
}

// Write the specified array value.
function writeArrayValue(observable, value, options) {
    if (observable._dxDisposed) {
        dxUtil.debug(observable, 'Writing to a disposed observable');
        return;
    }

    if (!_.isArray(value)) {
        dxUtil.fail('Must write an array to an observable array attribute.');
    }

    // Do a simple check (don't worry about non-simple values) to try to catch cases where the array doesn't change.
    if (observable._dxObservedValue && observable._dxObservedValue.length === value.length) {
        var equal = true;
        for (var index = 0; index < value.length; index++) {
            if (!observable.equalityComparer(observable._dxObservedValue[index], value[index])) {
                equal = false;
                break;
            }
        }
        if (equal) {
            return observable;
        }
    }

    /*
     * convert the input array into a json form.  This is needed since if there are backbone models in there, we can't
     * directly set them on the model
     */
    var jsonArray = jsonify(value);

    if (_.isUndefined(observable._dxModel.isServerModel) || !observable._dxModel.isServerModel()) {
        showDebugMessage(observable, 'About to write to client model');
        observable._dxModel.set(observable._dxAttrName, jsonArray);
    } else {
        if (options.writer) {
            showDebugMessage(observable, 'About to write to writer for server model');
            var writerResult = options.writer(value, observable._dxAttrName, observable);

            if (writerResult !== dxObservableAttr.WRITE_UNHANDLED) {
                return observable;
            }
        }

        if (observable._dxModel.$$update) {
            showDebugMessage(observable, 'About to send $$update() for server model');
            var payload = {};
            payload[observable._dxAttrName] = jsonArray;
            observable._dxModel.$$update(payload);
        } else {
            dxUtil.fail('This kind of server object has no update standard operation.');
        }
    }

    return observable;
}

// Write the specified object value.
function writeObjectValue(observable, value, options) {
    if (observable._dxDisposed) {
        dxUtil.debug(observable, 'Writing to a disposed observable');
        return;
    }
    if (!_.isObject(value) && !dxUtil.isNone(value)) {
        dxUtil.fail('Observable value must be an object.');
    }

    value = jsonify(value);

    if (_.isUndefined(observable._dxModel.isServerModel) || !observable._dxModel.isServerModel()) {
        showDebugMessage(observable, 'About to write to client model');
        observable._dxModel.set(observable._dxAttrName, value);
    } else {
        if (options.writer) {
            showDebugMessage(observable, 'About to write to write to writer for a server model');
            var writerResult = options.writer(value, observable._dxAttrName, observable);
            if (writerResult !== dxObservableAttr.WRITE_UNHANDLED) {
                return observable;
            }
        }

        if (observable._dxModel.$$update) {
            showDebugMessage(observable, 'About to send $$update() for server model');
            var payload = {};
            payload[observable._dxAttrName] = value;
            observable._dxModel.$$update(payload);
        } else {
            dxUtil.fail('This kind of server model has no update standard operation.');
        }
    }

    return observable;
}

/*
 * Call an array-modification function on the observable array attribute. If the function exists on Array.prototype,
 * use that. For knockout specific functions such as destroy(), we make a dummy observable with a copy of the current
 * array and call the function on the dummy observable. We then get the resulting value and start our own write process
 * with it.
 * Note that while creating a dummy observable has overhead, it is the simplest solution
 * for making sure there are no side affects of the operation on our own observable.
 */
function arrayFunction() {
    var koOaFuncName = arguments[0];
    var newArray;
    var shallowCopy = this._dxObservedValue.slice(0);

    if (_.isFunction(Array.prototype[koOaFuncName])) {
        shallowCopy[koOaFuncName].apply(shallowCopy, _.rest(arguments, 1));
        newArray = shallowCopy;
    } else {
        var tempObservable = ko.observableArray(shallowCopy);
        tempObservable[koOaFuncName].apply(tempObservable, _.rest(arguments, 1));
        newArray = tempObservable();
    }

    writeArrayValue(this, newArray, this._dxOptions);
}

// return the current value of the observable, while setting up knockout dependencies
function readValue(observable, defaultValue) {
    ko.dependencyDetection.registerDependency(observable);

    return observable._dxObservedValue || defaultValue;
}

// Return the value of the underlying model's property without setting up any knockout dependencies.
function peek() {
    return this._dxObservedValue;
}

// Notify subscribers that the observable's value is about to change
function valueWillMutate() {
    this.notifySubscribers(this._dxObservedValue, 'beforeChange');
}

// Notify subscribers that the observable's value has changed
function valueHasMutated() {
    this.notifySubscribers(this._dxObservedValue);
}

// Clean up this observable. Release everything we can.
function dispose() {
    this._dxModel.off(undefined, undefined, this._dxSelfIdentifier);
    disposeCurrentValue(this._dxObservedValue);
    this._dxDisposed = true;
}

function showDebugMessage(observable, message) {
    var attribute = observable._dxModel.get(observable._dxAttrName);
    var id = observable._dxDebugId || 'Observable';
    dxUtil.debug(id + ' with model ' + observable._dxModel.id + ': ' + message + ': ' + observable._dxAttrName + (_.isArray(attribute) ? ' with ' + (attribute ? attribute.length : 0) + ' elements' : ''), attribute);
}

function setDebug(value, identifier) {
    this._dxDebug = value;
    this._dxDebugId = identifier;
}

function assertParamsGood(model, attrName, makeObjectFromModel, options) {
    if (!(model instanceof Backbone.Model)) {
        dxUtil.fail('A backbone model must be provided as the first argument.');
    }

    if (!_.isString(attrName)) {
        dxUtil.fail('A property name must be provided as the second argument.');
    }

    if (_.isUndefined(makeObjectFromModel) || !_.isObject(makeObjectFromModel)) {
        dxUtil.fail('makeObjectFromModel must be provided as the third argument.');
    }

    if (!_.isUndefined(options) && !_.isObject(options)) {
        dxUtil.fail('Options, if provided, must be an object.');
    }
}

/*
 * Attach a bunch of data and functions to the observable function.  Note that these are attached to the function,
 * rather than its prototype, because one can't give a function a special prototype.
 */
function setBasicObservableProperties(observable, model, attrName, makeObjectFromModel, options) {
    ko.subscribable.call(observable);
    ko.utils.extend(observable, ko.observable.fn);
    _.extend(observable, {
        _dxModel: model,
        _dxAttrName: attrName,
        _makeObjectFromModel: makeObjectFromModel,
        _dxOptions: options,
        _dxSelfIdentifier: {}, // arbitray object used to track of our listeners on the model
        valueHasMutated: valueHasMutated,
        valueWillMutate: valueWillMutate,
        peek: peek,
        setDebug: setDebug,
        dispose: dispose
    });
}

/*
 * Create an observable array attribute from the specified model
 */
function makeObservableArrayAttribute(model, attrName, makeObjectFromModel, options) {
    function observableArray() {
        if (arguments.length > 0) {
            return writeArrayValue(observableArray, arguments[0], options || {});
        } else {
            return readValue(observableArray, []);
        }
    }

    assertParamsGood(model, attrName, makeObjectFromModel, options);
    setBasicObservableProperties(observableArray, model, attrName, makeObjectFromModel, options);

    /*
     * Add all the standard observableArray functions, so this looks and feels like an observableArray.
     * Note that because ko.observableArray.fn has the Function prototype in it's prototype chain (as of knockout
     * 3.1.0), we cannot use _.each directly to get it's properties (because functions have a length property).
     */
    _.each(_.keys(ko.observableArray.fn), function (koOaFuncName) {
        var koOaFunc = ko.observableArray.fn[koOaFuncName];

        if (_.contains(['slice', 'reverse', 'sort'], koOaFuncName)) {
            observableArray[koOaFuncName] = koOaFunc;
            return;
        }
        observableArray[koOaFuncName] = function () {
            Array.prototype.unshift.call(arguments, koOaFuncName);
            arrayFunction.apply(observableArray, arguments);
        };
    });

    model.on('change:' + attrName, _.bind(arrayAttributeChanged, observableArray), observableArray._dxSelfIdentifier);
    arrayAttributeChanged.call(observableArray);

    return observableArray.extend({ trackArrayChanges: true });
}

/*
 * Create an observable object attribute from the specified model
 */
function makeObservableObjectAttribute(model, attrName, makeObjectFromModel, options) {
    function ooAttribute() {
        if (arguments.length > 0) {
            return writeObjectValue(ooAttribute, arguments[0], options || {});
        } else {
            return readValue(ooAttribute);
        }
    }

    assertParamsGood(model, attrName, makeObjectFromModel, options);
    setBasicObservableProperties(ooAttribute, model, attrName, makeObjectFromModel, options);

    model.on('change:' + attrName, _.bind(objectAttributeChanged, ooAttribute), ooAttribute._dxSelfIdentifier);
    objectAttributeChanged.call(ooAttribute);

    return ooAttribute;
}

/*
 * Add these this to the public API
 */
module.exports = {
    makeObservableArrayAttribute: makeObservableArrayAttribute,
    makeObservableObjectAttribute: makeObservableObjectAttribute
};

},{"dxcore/js/util.js":23,"dxcore/ko/js/ObservableAttribute.js":27}],27:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global _, ko, Backbone */

'use strict';

var dxUtil = require('dxcore/js/util.js');

/*
 * An observableAttribute is a special observable that 'wraps up' access to an attribute on a Backbone model, with
 * support for some of the semantics of our Delphix Schema-Based models.  You should rarely, if ever, be creating one
 * of these yourself.  Instead they are created and managed by higher level things, like ObservableServerObject's.
 *
 * Create an observableAttribute like this:
 *   makeObservableAttribute(myModel, 'name')
 * This returns an observable that can be used entirely like an ordinary observable.
 * Any time the underlying model is updated, the observable will notice and notify its subscribers.
 *
 * ObservableAttributes have several special behaviors when it comes to writing to them.
 *
 * If the model is a client model (or an ordinary Backbone model) updating the observable will update the model
 * directly.
 *
 * If the model is a server model, then one of two things will happen. The default behavior is that when the
 * observable is set (e.g. observable('new value')), the observable will send an update standard operation to the
 * server. Once the server has processed the update and delivered a notification, the underlying server model will be
 * updated and the observable will be updated.
 *
 * In the case you want a different behavior for writing, you can pass a 'writer' in an options object to the creation
 * routine.  This will then be invoked when there is a change. You can then handle this change in your writer routine,
 * or return WRITE_UNHANDLED, in which case the above update behavior will be carried out.
 *
 * In addition to standard observable functions, ObservableAttribute also has these functions:
 *    dispose()  : disposes the observable. This includes removing listener(s) on the model.
 *    setDebug(value, id) : If the value is truthy, this will print debug messages at key places.  If an id is
 *                 provided, debug messages from this instance will include that id.
 *
 * The options object can accept these values:
 *    writer     : a function with the signature writer(observable, propertyName, value). It is up to the writer to
 *                 handle an update to the specified property.  If it chooses not to, it can return
 *                 WRITE_UNHANDLED, in which case the standard write behavior will be invoked.
 */
var WRITE_UNHANDLED = 'WRITE UNHANDLED';

// Return the value of the underlying model's property without setting up any knockout dependencies.
function peek() {
    return this._dxModel.get(this._dxPropName);
}

// Clean up this observable. Release everything we can.
function dispose() {
    this._dxModel.off(undefined, undefined, this._dxSelfIdentifier);
    this._dxDisposed = true;
}

function showDebugMessage(observable, message) {
    if (observable._dxDebug) {
        dxUtil.debug((observable._dxDebugIdentifier || 'Observable') + ' with model ' + observable._dxModel.id + ': ' + message + ': ' + observable._dxPropName + '=' + observable._dxModel.get(observable._dxPropName));
    }
}

/*
 * Respond to a change in the model's property. Note that this briefly invokes 'previous mode' since we need to be sure
 * to return the 'previous' value (from Backbone's standpoint) during the 'beforeChange' notification.
 */
function modelChanged() {
    showDebugMessage(this, 'Model changed');
    this._dxInPreviousMode = true;
    this.valueWillMutate();
    this._dxInPreviousMode = false;
    this.valueHasMutated();
}

// Notify subscribers that the observable's value is about to change
function valueWillMutate() {
    this.notifySubscribers(this._dxModel.previous(this._dxPropName), 'beforeChange');
}

// Notify subscribers that the observable's value has changed
function valueHasMutated() {
    this.notifySubscribers(this._dxModel.get(this._dxPropName));
}

/*
 * Update the observable only if the value has changed.  If the model is a client model, just update the model.
 * If it is a server model, then if we've been given a writer, give that a chance to handle the write. If that doesn't
 * exist or doesn't want to handle the write, issue a $$update() standard operation to the server.
 */
function writeValue(observable, value, options) {
    if (observable._dxDisposed) {
        dxUtil.debug(observable, 'Writing to a disposed observable');
        return;
    }
    if (observable.equalityComparer && observable.equalityComparer(observable._dxModel.get(observable._dxPropName), value)) {
        return;
    }

    if (_.isUndefined(observable._dxModel.isServerModel) || !observable._dxModel.isServerModel()) {
        showDebugMessage(observable, 'About to write to client model');
        observable._dxModel.set(observable._dxPropName, value);
    } else {
        if (options.writer) {
            showDebugMessage(observable, 'About to write to writer for server model');
            var writerResult = options.writer(value, observable._dxPropName, observable);
            if (writerResult !== WRITE_UNHANDLED) {
                return;
            }
        }

        if (observable._dxModel.$$update) {
            showDebugMessage(observable, 'About to send $$update() for server model');
            var payload = {};
            payload[observable._dxPropName] = value;
            observable._dxModel.$$update(payload);
        } else {
            dxUtil.fail('This kind of server object has no update standard operation.');
        }
    }
}

/*
 * Return the 'current' value of the observable.  if we're in the middle of updating the observable, the current value
 * is the 'previous' backbone value
 */
function readValue(observable) {
    ko.dependencyDetection.registerDependency(observable);

    if (observable._dxInPreviousMode) {
        return observable._dxModel.previous(observable._dxPropName);
    } else {
        return observable._dxModel.get(observable._dxPropName);
    }
}

function setDebug(value, identifier) {
    this._dxDebug = value;
    this._dxDebugIdentifier = identifier;
}

/*
 * Construct the observable attribute.
 *
 * Note that this observable function has as little code in it as possible so as to minimize the size of the object
 * in memory.
 */
function makeObservableAttribute(model, propName, options) {
    function observableAttribute() {
        if (arguments.length > 0) {
            writeValue(observableAttribute, arguments[0], options || {});
        } else {
            return readValue(observableAttribute);
        }
    }

    if (!(model instanceof Backbone.Model)) {
        dxUtil.fail('A backbone model must be provided as the first argument.');
    }
    if (!_.isString(propName)) {
        dxUtil.fail('A property name must be provided as the second argument.');
    }
    if (!_.isUndefined(options) && !_.isObject(options)) {
        dxUtil.fail('Options, if provided, must be an object.');
    }

    /*
     * Because the observable is a function, we can't actually put all these function in its prototype, so we must
     * add them to each new instance.
     */
    ko.subscribable.call(observableAttribute);
    ko.utils.extend(observableAttribute, ko.observable.fn);
    _.extend(observableAttribute, {
        _dxModel: model,
        _dxPropName: propName,
        _dxSelfIdentifier: {}, // arbitray object used to keep track of our listeners on the model
        _dxInPreviousMode: false,
        peek: peek,
        setDebug: setDebug,
        valueWillMutate: valueWillMutate,
        valueHasMutated: valueHasMutated,
        dispose: dispose
    });

    model.on('change:' + propName, _.bind(modelChanged, observableAttribute), observableAttribute._dxSelfIdentifier);

    return observableAttribute;
}

/*
 * Add these things to the public API
 */
module.exports = {
    WRITE_UNHANDLED: WRITE_UNHANDLED,
    makeObservableAttribute: makeObservableAttribute
};

},{"dxcore/js/util.js":23}],28:[function(require,module,exports){
/*
 * Copyright (c) 2015 by Delphix. All rights reserved.
 */

/* global _, Backbone, ko*/

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxData = require('dxcore/data/js/index.js');

/*
 * This contains some private utility routines used by the ko system, as well as an initialization routine.
 * This should be run after setting up the data system.
 */
/*
 * Convert the result of a call to an operation on the backbone model into a ko-compatible Client or Server object.
 */
function prepResult(result, makeObjectFromModel, disposalContext) {
    return result instanceof Backbone.Model ? makeObjectFromModel(result, { disposalContext: disposalContext }) : result;
}

/*
 * Identify if an object is an options object
 * Parameter:
 *   value: the value to test
 * Return:
 *   truthy if the value is an object, it has success, error, and/or disposalContext properties and no other
 */
function looksLikeOptionsObject(value) {
    var validOptions = ['success', 'error', 'disposalContext'];

    return _.isObject(value) && _.isEmpty(_.omit(value, validOptions)) && !_.isEmpty(_.pick(value, validOptions));
}

/*
 * Parameters:
 *   otherArgs: An array of arguments to a ko root, standard, or object operation
 * Return:
 *   An object containing the success and error callbacks, as well as optional disposal context, that may have been
 *   specified in the parameters
 */
function extractOptions(isSchemaObject, otherArgs) {
    var optionsObject = _.find(otherArgs, function (arg) {
        /*
         * Return truthy when we find an argument that is an object that isn't a client or server object, and that
         * has a success, error, and/or disposalContext property but no others.
         */
        return looksLikeOptionsObject(arg) && !isSchemaObject(arg);
    });

    return optionsObject || {};
}

/*
 * Parameters:
 *   otherArgs: An array-like object of arguments to a ko root, standard, or object operation
 * Return:
 *   a modified version of these arguments including:
 *     (a) any ko objects converted to their data equivalents
 *     (b) successError replaced with an empty object (we handle the callbacks in the promise)
 *     (c) unwrap any ko.observables in other arguments
 */
function convertToDxDataArgs(otherArgs) {
    var newArgs = [];
    _.each(otherArgs, function (arg) {
        if (!_.isUndefined(arg._dxModel)) {
            newArgs.push(arg._dxModel);
            /*
             * only process the element if it only has success, error, and/or disposalContext properties. We have to be
             * careful here. If the underlying operation is one that takes parameters, then it can take betwee 0 and 2
             * arguments, any of which are objects. To avoid modifying the parameters rather than the options object,
             * we consider the object to be the options only if it contains nothing other than success, error, or
             * disposalContext properties.
             */
        } else if (looksLikeOptionsObject(arg)) {
                var patchedCallbacks = {};
                newArgs.push(patchedCallbacks);
                if (arg.error) {
                    patchedCallbacks.suppressDefaultErrorHandler = true; // we handle this in the call's promise
                }
            } else if (_.isObject(arg)) {
                    var unwrapped = {};
                    _.each(arg, function (value, key) {
                        unwrapped[key] = ko.unwrap(value);
                    });
                    newArgs.push(unwrapped);
                } else {
                    dxUtil.fail('Must pass a parameters object.');
                }
    });

    return newArgs;
}

/*
 * Call an object operation, converting arguments to data format, and convert return results to the ko form.
 */
function callKoObjectOperation(koObject, isSchemaObject, makeObjectFromModel, funcName) {
    if (!isSchemaObject(koObject)) {
        dxUtil.fail('koObject must be a Server or Client Object.');
    }
    var funcArgs = _.rest(arguments, 4);
    return callOperation(koObject._dxModel, isSchemaObject, makeObjectFromModel, '$' + funcName, funcArgs);
}

function callOperation(dxCoreDataObject, isSchemaObject, makeObjectFromModel, funcName, funcArgs) {
    var newArgs = convertToDxDataArgs(funcArgs);
    var options = extractOptions(isSchemaObject, funcArgs);

    return dxCoreDataObject[funcName].apply(dxCoreDataObject, newArgs).then(function (doneResult) {
        var result = prepResult(doneResult, makeObjectFromModel, options.disposalContext);
        if (options.success) {
            options.success(result);
        }
        return result;
    }, function (failedResult) {
        var result = prepResult(failedResult, makeObjectFromModel, options.disposalContext);
        if (options.error) {
            options.error(result);
        }
        return result;
    });
}

/*
 * Call a root operation, converting arguments to data format, and convert return results to the ko form.
 */
function callRootOperation(typeName, isSchemaObject, makeObjectFromModel, opName, otherArgs) {
    var typeObject = dxData.rootOps[typeName];
    return callOperation(typeObject, isSchemaObject, makeObjectFromModel, opName, otherArgs);
}

module.exports = {
    _callOperation: callOperation,
    callKoObjectOperation: callKoObjectOperation,
    callRootOperation: callRootOperation,
    _prepResult: prepResult
};

},{"dxcore/data/js/index.js":4,"dxcore/js/util.js":23}],29:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global dx, _, ko */

'use strict';

var dxUtil = require('dxcore/js/util.js'),
    dxScreen = require('dxcore/js/screen.js'),
    dxData = require('dxcore/data/js/index.js');

/*
 * Given an array of objects, call dispose() on any elements with a dispose() function, and dxDispose() on any objects
 * with a dxDispose() function.
 */
function disposeItems(elements) {
    if (!_.isArray(elements)) {
        dxUtil.fail('Must pass an array of elements to be disposed.');
    }

    var serverObjects = [];
    var otherDispose = [];

    // First dispose all computed's and subscriptions
    _.each(elements, function (element) {
        if (element.dxDispose) {
            serverObjects.push(element);
        } else if (element.setDebug) {
            otherDispose.push(element);
        } else if (element.dispose) {
            element.dispose();
        }
    });

    _.invoke(otherDispose, 'dispose');

    // Then dispose the stuff that might trigger those computed's and subscriptions
    _.each(serverObjects, function (element) {
        element.dxDispose();
    });
}

/*
 * Initialize the ko system. At the moment, this just involves setting up the root operations.
 */
function initialize(callRootOperation, isSchemaObject, makeObjectFromModel) {
    dxScreen.registerCleanupCallback(cleanupPageContext);

    module.exports.rootOps = {};
    module.exports.enums = dxData.enums;

    _.each(dxData.rootOps, function (opsObject, typeName) {
        module.exports.rootOps[typeName] = module.exports.rootOps[typeName] || {};
        _.each(opsObject, function (opFunction, opName) {
            if (!_.isFunction(opFunction) || opName.charAt(0) !== '$') {
                return;
            }

            module.exports.rootOps[typeName][opName] = function () {
                return callRootOperation(typeName, isSchemaObject, makeObjectFromModel, opName, arguments);
            };
        });
    });
}

/*
 * This is an object which can gather ko and ko objects and then dispose them at some appropriate time.  At the time of
 * this writing, there is one disposal context, which is the page context, but should someone need a more specific
 * context (e.g. they are creating many objects in a short time and want to free them up sooner than page transition)
 * this can be used for that purpose.
 *
 * A disposal context is given one public function which is:
 *  dxKoDispose()
 * which will dispose all the objects in the context.
 */
function DisposalContext() {
    var self = this;
    if (!(self instanceof DisposalContext)) {
        dxUtil.fail('Call constructor function DisposalContext with new.');
    }
    self._dxKoDisposalList = [];
    self.dxKoDispose = function () {
        disposeItems(self._dxKoDisposalList);
        self._dxKoDisposalList.length = 0;
    };
    return self;
}

/*
 * Creates a ko.computed, and adds it to a disposal context.
 *
 * By default, this will be put in the page disposal context, however, if a different disposal context is added in the
 * options, it will be added to that, instead.
 */
function makeComputed(evaluator, target, options) {
    options = options || {};
    var computed = ko.computed(evaluator, target, options);
    addToDisposalContext(computed, options.disposalContext);
    return computed;
}

/*
 * Create a ko subscription on the specified observable.  Adds the subscription to a disposal context and will return it
 * Parameters
 *    observable: The observable to subscribe to
 *    handler: As defined by knockout
 *    handlerTarget: as defined by knockout
 *    event: as defined by knockout
 *    disposalContext: (optional) the context to put the subscription in. By default will go into the page context.
 */
function subscribeToObservable(observable, handler, handlerTarget, event, disposalContext) {
    var subscription = observable.subscribe(handler, handlerTarget, event);
    addToDisposalContext(subscription, disposalContext);
    return subscription;
}

/*
 * Create a ko subscription on the specified observable that will only receive a single update, and then automatically
 * be disposed.  Adds the subscription to a disposal context before returning it.
 *
 * Parameters
 *    observable: The observable to subscribe to
 *    handler: As defined by knockout
 *    handlerTarget: as defined by knockout
 *    event: as defined by knockout
 *    disposalContext: (optional) the context to put the subscription in. By default will go into the page context.
 */
function subscribeToObservableForOneUpdate(observable, handler, handlerTarget, event, disposalContext) {
    var subscription = observable.subscribe(function () {
        handler.apply(handlerTarget, arguments);
        subscription.dispose();
    }, handlerTarget, event);
    addToDisposalContext(subscription, disposalContext);

    return subscription;
}

var DEFAULT_EVENT = 'change';
/*
 * Given an ordinary observable and a handler, if the value is null/undefined subscribe, otherwise trigger handler
 * immediately and subscribe.
 */
function checkAndSubscribe(observable, handler, handlerTarget, event, disposalContext) {
    if (!ko.isObservable(observable)) {
        dxUtil.fail('Must call checkAndSubscribe() with an observable.');
    }
    if (!handler) {
        dxUtil.fail('Must call checkAndSubscribe() with a handler.');
    }

    event = event || DEFAULT_EVENT;
    if (!dxUtil.isNone(observable()) && event === DEFAULT_EVENT) {
        try {
            ko.dependencyDetection.begin();
            handler.call(handlerTarget, observable.peek(), DEFAULT_EVENT);
        } finally {
            ko.dependencyDetection.end();
        }
    }

    return subscribeToObservable(observable, handler, handlerTarget, event, disposalContext);
}

/*
 * Given a Stated Observable (such as returned by promiseToObservable()) make sure the handler is called once when the
 * state transitions to non-undefined, or is already non-undefined. Always returns a subscription, though it may be
 * a dummy one if the handler has already been called
 *
 * A stated obserable has these characteristics:
 * - It is itself an observable
 * - It has a property, which is an observable, called state
 * - The main observable is initially undefined until some criteria has been met, in which case it will have some value
 *   (possibly undefined), and state will be either true or false based on whether the criteria was successful or
 *   a failure.
 * - The stated observable broadcasts two values to subscribed functions: state and value
 */
function checkAndSubscribeToStatedObservable(observable, handler, handlerTarget, event, disposalContext) {
    if (!ko.isObservable(observable)) {
        dxUtil.fail('Must call checkAndSubscribeToStatedObservable() with an observable.');
    }
    if (!handler) {
        dxUtil.fail('Must call checkAndSubscribeToStatedObservable() with a handler.');
    }
    if (!observable.state || !ko.isObservable(observable.state)) {
        dxUtil.fail('Must pass a stated observable to checkAndSubscribeToStatedObservable().');
    }
    event = event || DEFAULT_EVENT;

    function handleStatedObservableChange() {
        handler.apply(handlerTarget, [observable.state.peek(), observable.peek()]);
    }

    if (!_.isUndefined(observable.state.peek()) && event === DEFAULT_EVENT) {
        handleStatedObservableChange();
        // return a dummy subscription so caller does not need to protect itself against undefined
        return ko.observable().subscribe(function dummyFunction() {});
    }

    return subscribeToObservableForOneUpdate(observable.state, handleStatedObservableChange, undefined, event, disposalContext);
}

/*
 * Returns a computed representing the combined state of the passed in "state" observables.
 * Accepts an array.
 * The value of the returned computed is:
 *  - true if all input observables are truthy (all have resolved)
 *  - false if any are false (at least one has failed)
 *  - undefined otherwise (some are pending and none have failed)
 */
function makeMergedStateObservable(stateObservables) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    return module.exports.computed(function () {
        var stateValues = _.map(stateObservables, function (obs) {
            return obs();
        });

        if (_.all(stateValues)) {
            return true;
        } else if (_.some(stateValues, function (val) {
            return val === false;
        })) {
            return false;
        }
    }, { disposalContext: options.disposalContext });
}

/*
 * Adds the specified object to a disposal context. If none is specified, use the page context.
 */
function addToDisposalContext(item, context) {
    context = context || module.exports._pageContext;
    if (!context._dxKoDisposalList) {
        dxUtil.fail('Invalid context object.');
    }

    context._dxKoDisposalList.push(item);
}

/*
 * Dispose all objects in all contexts managed by the ko system (which is to say, the page context, 'eternal
 * context', etc. but not individual ones managed by app developers).
 */
function disposeAll() {
    module.exports._pageContext.dxKoDispose();
    module.exports.eternalContext.dxKoDispose();

    if (dx.core.pageContext._angularPageContext) {
        dx.core.pageContext._angularPageContext.dxKoDispose();
    }
}

/*
 * Routine called by the screen system on page transition to clean up the page context on page transition.
 */
function cleanupPageContext() {
    module.exports._pageContext.dxKoDispose();
    dxScreen.registerCleanupCallback(cleanupPageContext);
}

/*
 * Function to be used for testing to make sure the page context has nothing in its disposal list.
 */
function assertPageContextEmpty() {
    if (module.exports._pageContext._dxKoDisposalList.length !== 0) {
        dxUtil.fail('Page context is not empty!');
    }
}

module.exports = {
    rootOps: {},
    initialize: initialize,
    disposeAllForTesting: disposeAll,
    assertPageContextEmpty: assertPageContextEmpty,
    DisposalContext: DisposalContext,
    addToDisposalContext: addToDisposalContext,
    disposeItems: disposeItems,
    eternalContext: new DisposalContext(),
    _pageContext: new DisposalContext(),
    computed: makeComputed,
    subscribe: subscribeToObservable,
    subscribeOnce: subscribeToObservableForOneUpdate,
    checkAndSubscribe: checkAndSubscribe,
    checkAndSubscribeToStatedObservable: checkAndSubscribeToStatedObservable,
    makeMergedStateObservable: makeMergedStateObservable
};

},{"dxcore/data/js/index.js":4,"dxcore/js/screen.js":19,"dxcore/js/util.js":23}],30:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

'use strict';

var dxData = require('dxcore/data/js/index.js'),
    dxSystem = require('dxcore/ko/js/system.js'),
    dxOperation = require('dxcore/ko/js/operation.js'),
    dxCSObjects = require('dxcore/ko/js/ClientServerObjects.js');

/*
 * Initialize/start up any dxCore systems
 */

module.exports = function initialize() {
    dxData.initialize();
    dxSystem.initialize(dxOperation.callRootOperation, dxCSObjects.isSchemaObject, dxCSObjects.makeObjectFromModel);
};

},{"dxcore/data/js/index.js":4,"dxcore/ko/js/ClientServerObjects.js":25,"dxcore/ko/js/operation.js":28,"dxcore/ko/js/system.js":29}],31:[function(require,module,exports){
/*
 * Copyright (c) 2014, 2015 by Delphix. All rights reserved.
 */

/* global $, _, ko */

'use strict';

var dxCSObjects = require('dxcore/ko/js/ClientServerObjects.js'),
    dxLocale = require('dxcore/js/locale.js'),
    dxUtil = require('dxcore/js/util.js'),
    dxData = require('dxcore/data/js/index.js'),
    dxScreen = require('dxcore/js/screen.js'),
    dxUserUtil = require('dxcore/js/userUtil.js'),
    dxSystem = require('dxcore/ko/js/system.js'),
    dxSession = require('dxcore/js/session.js'),
    dxConstants = require('dxcore/js/constants.js');

/*
 * This file contains the logic to initiate session/login calls to verify credentials of a user
 * and log him into the system.
 *
 * On page load we check for presence of a session and if a valid session is found, we retrieve the current user
 * and redirect to either the main app or the system app.
 */
module.exports.loginViewModel = function (browserDeprecated, browserUnsupported) {
    // --------------------------------------
    // private properties`core

    // --------------------------------------
    var self = this,
        currentUser;

    var loginRequestModel = new dxCSObjects.ClientObject('LoginRequest'),

    // constants
    DOMAIN = 'DOMAIN',
        SYSTEM = 'SYSTEM',
        SAP = 'sap';

    // --------------------------------------
    // view model properties
    // --------------------------------------
    self.username = loginRequestModel.username;
    self.password = loginRequestModel.password;

    // The app the user is attempting to log into
    self.target = loginRequestModel.target;
    self.isDomainLogin = ko.computed(function () {
        return self.target() === DOMAIN;
    });
    self.isSystemLogin = ko.computed(function () {
        return self.target() === SYSTEM;
    });

    self.showAdminLogo = ko.computed(function () {
        return self.isDomainLogin() && !self.expressProduct();
    });

    self.showFreeAdminLogo = ko.computed(function () {
        return self.isDomainLogin() && self.expressProduct();
    });

    self.showSetupLogo = ko.computed(function () {
        return self.isSystemLogin() && !self.expressProduct();
    });

    self.showFreeSetupLogo = ko.computed(function () {
        return self.isSystemLogin() && self.expressProduct();
    });

    self.submitInProgress = ko.observable(false);
    self.cancelInProgress = ko.observable(false);
    self.fatalErrorMessage = ko.observable(undefined);
    self.suggestedActionMessage = ko.observable(undefined);
    self.banner = ko.observableArray();

    self.hasFatalError = ko.computed(function () {
        return !_.isUndefined(self.fatalErrorMessage());
    });

    // Helps set input focus for login form
    self.awaitingLogin = ko.observable(false);
    self.awaitingPassword = ko.observable(false);

    self.isSAPEdition = ko.observable(false);
    self.expressProduct = ko.observable(false);
    self.bodyCss = ko.observable('main-body default');

    // First time login
    self.passwordUpdateRequested = ko.observable(false);
    self.confirmPassword = ko.observable('');
    self.newPassword = ko.observable('');
    // Only a delphix admin needs to enter their email - all other users provided an email address when created
    self.isEmailRequired = ko.observable(false);
    self.email = ko.observable('');
    var systemLocale = ko.observable('');

    self.message = ko.observable('');
    self.invalidEmailMessage = ko.observable('');
    self.passwordChangeMessage = ko.observable(dxLocale.gls('password.change.message'));

    // Initialize with defaults
    self.username('');
    self.password('');
    self.target(DOMAIN);

    // Use parameters to set up a warning to the user about the browser version
    self.browserMessage = ko.observable('');
    if (browserUnsupported) {
        self.browserMessage(dxLocale.gls('browser.unsupported'));
    } else if (browserDeprecated) {
        self.browserMessage(dxLocale.gls('browser.deprecated'));
    }

    // --------------------------------------
    // view model functions
    // --------------------------------------

    /*
     * login gets invoked when user submits the login form.
     */
    self.login = function () {
        // If user clicks 'continue' while cancel is in progress, don't do login
        if (self.cancelInProgress()) {
            return;
        }

        /*
         * This is a hack to allow username/password values to be reflected in observables in case they have been
         * filled in automatically by browsers.
         */
        $('#username,#password').trigger('change');

        self.message('');
        self.fatalErrorMessage(undefined);
        self.suggestedActionMessage(undefined);
        if (self.username() !== '') {
            self.submitInProgress(true);
            // It's possible we've lost our API session since initially obtaining it
            createSession(postLogin);
        } else {
            self.message(dxLocale.gls('username.required.prompt'));
        }
    };

    /*
     * postLogin initiates the login. On success, the current user information is fetched.
     */
    function postLogin() {
        dxSystem.rootOps.delphix_common.$login(loginRequestModel, {
            success: function success() {
                getCurrentUser();
            },
            error: function error(errorResult) {
                self.submitInProgress(false);
                showError(errorResult._dxModel); // showError expects a backbone model
            }
        });
    }

    /*
     * showError accepts an errorResult object, fishes out error message and updates the view model message binding.
     */
    function showError(errorResult) {
        self.message(errorResult.get('error').get('details'));
    }

    /*
     * showError accepts an errorResult object, fishes out error message and updates the view model message binding.
     */
    self.showConnectivityError = function () {
        self.message(dxLocale.gls('generic.login.failure'));
    };

    /*
     * getCurrentUser invokes current object operation on user object.
     * On success, if passwordUpdateRequested flag is found to be false then user is redirected to requested app,
     * otherwise the user is requested a new password (achieved by passwordUpdateRequested View Binding)
     */
    function getCurrentUser() {
        dxData.rootOps.User.$current({
            success: function success(okResult) {
                /*
                 * Note: currentUser can be undefined if the Delphix Engine isn't set up. However, to get this point
                 * in the process, it has to have been set up.
                 */
                currentUser = okResult.get('result');
                if (currentUser.get('passwordUpdateRequested') === true) {
                    self.submitInProgress(false);
                    self.passwordUpdateRequested(true);
                    self.awaitingPassword(true);
                    self.username(currentUser.get('name'));
                    self.email(currentUser.get('emailAddress'));

                    if (self.username() === 'delphix_admin' && _.isEmpty(self.email())) {
                        self.isEmailRequired(true);
                        self.passwordChangeMessage(dxLocale.gls('password.and.email.change.message'));
                    }
                } else {
                    var locale = currentUser.get('locale');

                    if (_.isString(locale)) {
                        if (locale === 'default') {
                            locale = systemLocale();
                        }

                        /*
                         * The frontend locale handlers used by both flex and the JS GUI don't like our
                         * 2-dashed locale. Given our pseudolocalization locale, modify it for the front
                         * end to this non-existing locale code.
                         */
                        if (locale === 'en-US-psaccent') {
                            locale = 'en-PS';
                        }

                        dxUtil.setCookie('locale', locale, 30);
                    }

                    redirectUser();
                }
            },
            error: function error(errorResult) {
                self.submitInProgress(false);
                showError(errorResult);
            }
        });
    }

    /*
     * Can be triggered by the user clicking 'cancel' in the update user form
     */
    self.cancelLogin = function () {
        /*
         * After submitting updated password, the cancel button is still enabled.
         * Make sure the user doesn't click cancel while submit is in progress.
         */
        if (self.submitInProgress()) {
            return;
        }

        self.cancelInProgress(true);
        dxSession.endSession();
    };

    /*
     * updateUser checks for valid password and then then triggers update password method.
     * Triggered from clicking 'continue' in the update user form
     */
    self.updateUser = function () {
        self.invalidEmailMessage('');
        self.message('');

        if (self.isEmailRequired()) {
            if (self.email() === '') {
                self.invalidEmailMessage(dxLocale.gls('email.required.prompt'));
            } else if (!dxUtil.isValidEmail(self.email())) {
                self.invalidEmailMessage(dxLocale.gls('invalid.email.prompt'));
            }
        }

        if (self.newPassword() === '') {
            self.message(dxLocale.gls('password.required.prompt'));
        } else if (self.newPassword() !== self.confirmPassword()) {
            self.message(dxLocale.gls('passwords.not.matching.prompt'));
        } else if (self.isEmailRequired()) {
            if (self.invalidEmailMessage() === '') {
                currentUser.$$update({
                    emailAddress: self.email()
                }, {
                    success: updatePassword,
                    error: function error() {
                        self.message(dxLocale.gls('generic.login.failure'));
                    }
                });
            }
        } else {
            updatePassword();
        }
    };

    /*
     * updatePassword fires updateCredential operation on user object to update user password.
     */
    function updatePassword() {
        var updateParameters = dxData.newClientModel('CredentialUpdateParameters');
        updateParameters.get('oldCredential').set('password', self.password());
        updateParameters.get('newCredential').set('password', self.confirmPassword());

        self.submitInProgress(true);
        currentUser.$updateCredential(updateParameters, {
            success: function success() {
                self.password(self.confirmPassword());
                self.login();
            },
            error: function error(errorResult) {
                self.submitInProgress(false);
                showError(errorResult);
            }
        });
    }

    /*
     * This function redirects the user to an appropriate app after a successful login.
     */
    function redirectUser() {
        var userType = currentUser.get('userType').toUpperCase(),
            userRef = currentUser.get('reference');

        if (userType === DOMAIN && self.target() === DOMAIN) {
            var rolesPromise = dxUserUtil.getDefaultRoles(),
                authorizationsPromise = dxData.getServerCollection('Authorization').$$list({
                user: userRef
            });

            // Wait until we've gotten all relevant user info to handle permission and redirect logic
            $.when(authorizationsPromise, rolesPromise).then(function (authorizations, defaultRoles) {
                var isJetStreamUser = dxUserUtil.isJetStreamUser(userRef, authorizations, defaultRoles),
                    isAdmin = dxUserUtil.isDelphixAdmin(userRef, authorizations, defaultRoles);

                if (isJetStreamUser && !isAdmin) {
                    dxScreen.navigateExternal('/jetstream/#data-mgmt');
                } else {
                    dxScreen.navigateExternal('/Server.html');
                }
            }).fail(function () {
                self.message(dxLocale.gls('generic.login.failure'));
            });
        } else if (userType === SYSTEM && self.target() === SYSTEM) {
            dxScreen.navigateExternal('/ServerSetup.html');
        } else {
            self.submitInProgress(false);
            self.message(dxLocale.gls('invalid.credentials.prompt'));
        }
    }

    /*
     * getPublicSystemInfo method fetches the PublicSystemInfo singleton object to verify if the server
     * has been configured or not. If it has been configured, it fires the getCurrentUser method otherwise
     * redirects the user to setup app.
     * On error, it is assumed that server is unreachable and a retry is issued every 100ms.
     */
    function getPublicSystemInfo() {
        var publicSystemInfo = dxData.getServerSingleton('PublicSystemInfo');
        function successHandler() {
            // Clear error message in case this call had previously failed
            self.message('');

            if (!publicSystemInfo.get('configured')) {
                dxScreen.navigateExternal('/Setup.html');
            }

            self.isSAPEdition(publicSystemInfo.get('productType') === SAP);

            if (publicSystemInfo.get('banner')) {
                // Represent as an array of lines to make multiline banners with <br> easier
                self.banner(publicSystemInfo.get('banner').split('\n'));
            }

            if (publicSystemInfo.get('currentLocale')) {
                systemLocale(publicSystemInfo.get('currentLocale'));
            }

            // Set whether or not this is the express edition product
            var productType = publicSystemInfo.get('productType');
            self.expressProduct(productType === 'express');
        }
        publicSystemInfo.once('ready', successHandler);
        publicSystemInfo.once('error', function () {
            self.message(dxLocale.gls('generic.login.failure'));
            setTimeout(getPublicSystemInfo, 100);
        });
    }

    function createSession(continuation) {
        var sessionPayload = dxData.newClientModel('APISession');

        sessionPayload.set({
            version: {
                major: dxConstants.VERSION_MAJOR,
                minor: dxConstants.VERSION_MINOR,
                micro: dxConstants.VERSION_MICRO
            }
        });

        dxData.rootOps.APISession.$$create(sessionPayload, {
            success: continuation,
            error: function error(_error) {
                self.fatalErrorMessage(_error.get('error').get('details'));
                self.suggestedActionMessage(_error.get('error').get('action'));
            }
        });
    }

    // --------------------------------------
    // fetch models/collections from server
    // --------------------------------------

    /*
     * Session is where it all begins.
     * We first check existence of a valid session, if not found a session is created and then getPublicSystemInfo
     * is triggered.
     */
    dxData.getServerSingleton('APISession', {
        success: getPublicSystemInfo,
        error: function error() {
            createSession(getPublicSystemInfo);
        }
    });
};

},{"dxcore/data/js/index.js":4,"dxcore/js/constants.js":15,"dxcore/js/locale.js":17,"dxcore/js/screen.js":19,"dxcore/js/session.js":20,"dxcore/js/userUtil.js":22,"dxcore/js/util.js":23,"dxcore/ko/js/ClientServerObjects.js":25,"dxcore/ko/js/system.js":29}],32:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $, ko, loginVM */

'use strict';

var dxLocale = require('dxcore/js/locale.js'),
    dxUtil = require('dxcore/js/util.js');

/*
 * This file contains configuration for knockout binding handlers, delphix ajax calls, locale settings and
 * some miscellaneous view configuration.
 */
function loginAjaxErrorHandler(event, jqxhr) {
    if (jqxhr.status === 0) {
        loginVM.showConnectivityError();
    }
    // filtering out HTML tags
    dxUtil.debug($.trim(dxUtil.isNone(jqxhr.responseText) ? '' : jqxhr.responseText.replace(/(<([^>]+)>)/ig, ' ')));
}

module.exports = function setupConfig() {
    /*
     * fadeVisible is a custom handler for knockout that uses jQuery's fade methods to hide/show elements.
     */
    ko.bindingHandlers.fadeVisible = {
        update: function update(element, valueAccessor) {
            var shouldDisplay = valueAccessor();
            if (shouldDisplay) {
                $(element).fadeIn('slow');
            } else {
                $(element).fadeOut('fast');
            }
        }
    };

    /*
     * Locale configuration.
     */
    dxLocale.setupLocale([{
        name: 'messages',
        path: '../dxcore/locale/',
        language: 'en_US'
    }, {
        name: 'messages',
        path: 'locale/',
        language: 'en_US'
    }]);

    $(document).ajaxError(loginAjaxErrorHandler);
};

},{"dxcore/js/locale.js":17,"dxcore/js/util.js":23}],33:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global Backbone */

'use strict';

/*
 * This file contains router configuration for login application workflow.
 */
function setupRouter(loginViewModel) {
    /*
     * Backbone router to handle URL route requests.
     */
    var AppRouter = Backbone.Router.extend({
        routes: {
            serverSetup: 'routeToServerSetup',
            '*actions': 'defaultRoute'
        }
    });

    var app_router = new AppRouter();
    app_router.on('route:routeToServerSetup', function () {
        toggleLoginScreen('SYSTEM');
    });

    app_router.on('route:defaultRoute', function () {
        toggleLoginScreen('DOMAIN');
    });

    /*
     * Toggles the Delphix Engine/Setup logo and links.
     *     screen - DOMAIN or SYSTEM screen.
     */
    function toggleLoginScreen(screen) {
        loginViewModel.target(screen);
        loginViewModel.message('');
        loginViewModel.awaitingLogin(true);
    }
}

module.exports = function start(loginViewModel) {
    setupRouter(loginViewModel);
    Backbone.history.start();
};

},{}],34:[function(require,module,exports){
/*
 * Copyright (c) 2012, 2015 by Delphix. All rights reserved.
 */

/* global $, dx, ko */

'use strict';

// Expose namespace to be called from html
require('dxcore/js/delphix.js').namespace('dx.login');

var dxTemplate = require('dxcore/js/template.js'),
    dxInitialize = require('dxcore/main/js/startDxCore.js'),
    dxSetupConfig = require('login/js/login-config.js'),
    dxPasswordStrengthMeter = require('login/js/password-strength-meter.js'),
    dxStartRouter = require('login/js/login-router.js'),
    dxLoginVM = require('login/js/LoginViewModel.js');

/*
 * Entrypoint for the login app
 */

function append(elem, vm) {
    if (!vm) vm = new dxLoginVM.loginViewModel();
    var loginTemplate = dxTemplate.template('login/template/login');
    if (elem) elem.append(loginTemplate);
    ko.applyBindings(vm, loginTemplate.get(0));
    return loginTemplate;
}

/*
 * Begins the login process.
 * Parameters:
 * broswerDeprecated: true/false indicating that a message should be displayed
 *    to the effect that support for the user's browser will be removed in a
 *    subsequent release.
 * browserUnsupported: true/false indicating that a message should be displayed
 *    to the effect that the user's broswer is not supported and that behavior
 *    of the app cannot be predicted. Takes precedence over deprecated.
 */
function startLogin(browserDeprecated, broswerUnsupported) {
    dxInitialize();
    dxSetupConfig();
    var vm = new dxLoginVM.loginViewModel(browserDeprecated, broswerUnsupported);
    append($('body'), vm);
    dxPasswordStrengthMeter.setupPasswordStrengthMeter();
    dxStartRouter(vm);
}

module.exports = {
    // Exposed for testing
    _append: append
};

dx.login.startLogin = startLogin;

},{"dxcore/js/delphix.js":16,"dxcore/js/template.js":21,"dxcore/main/js/startDxCore.js":30,"login/js/LoginViewModel.js":31,"login/js/login-config.js":32,"login/js/login-router.js":33,"login/js/password-strength-meter.js":35}],35:[function(require,module,exports){
/*
 * Copyright (c) 2013, 2015 by Delphix. All rights reserved.
 */

/* global $ */

'use strict';

var dxLocale = require('dxcore/js/locale.js');

/*
 * This file contains configuration password strength meter used on the login page while initializing a user.
 */
function setupPasswordStrengthMeter() {
    /*
     * Bindings for the password strength monitor.
     */
    $('#newPassword').keyup(function () {
        var verdict = passwordStrengthMonitor($(this).val());
        updatePasswordStrengthMeter(verdict);
    });

    /*
     * This function updates the password strength meter based on the new password entered by the user.
     */
    function updatePasswordStrengthMeter(strength) {
        var strengthLabel = $('#strengthLabel');

        if (strength !== strengthLabel.html()) {
            $('div[id*=strengthMeter]').each(function () {
                $(this).addClass('bar-neutral').removeClass('progress-bar-success progress-bar-warning progress-bar-error');
            });

            if (strength === dxLocale.gls('password.strength.veryweak')) {
                $('#strengthMeter1').removeClass('bar-neutral');
            } else if (strength === dxLocale.gls('password.strength.weak')) {
                $('div[id*=strengthMeter]:lt(2)').each(function () {
                    $(this).removeClass('bar-neutral');
                });
            } else if (strength === dxLocale.gls('password.strength.strong')) {
                $('div[id*=strengthMeter]:lt(3)').each(function () {
                    $(this).removeClass('bar-neutral').addClass('progress-bar-warning');
                });
            } else if (strength === dxLocale.gls('password.strength.verystrong')) {
                $('div[id*=strengthMeter]').each(function () {
                    $(this).removeClass('bar-neutral').addClass('progress-bar-success');
                });
            }

            strengthLabel.html(strength);
        }
    }
}

/*
 * Password strength monitor function ripped off from flex code.
 * @param {Object} passwd
 */
function passwordStrengthMonitor(passwd) {
    var score = 0;
    var verdict = dxLocale.gls('password.strength.veryweak');

    // PASSWORD LENGTH
    if (passwd.length < 8) {
        score -= 3;
    } else if (passwd.length > 7 && passwd.length < 15) {
        // length between 7 and 14
        score += 12;
    } else {
        // length 15 or more
        score += 18;
    }

    // LETTERS
    if (passwd.match(/[a-z]/)) {
        // [verified] at least one lower case letter
        score += 1;
    }
    if (passwd.match(/[A-Z]/)) {
        // [verified] at least one upper case letter
        score += 5;
    }

    // NUMBERS
    if (passwd.match(/\d+/)) {
        // [verified] at least one number
        score += 6;
    }

    if (passwd.match(/(\d.*\d.*\d)/)) {
        // [verified] at least three numbers
        score += 7;
    }

    // SPECIAL CHARACTERS
    if (passwd.match(/[!,@#$%\^&*?_~]/)) {
        // [verified] at least one special character
        score += 6;
    }

    if (passwd.match(/([!,@#$%\^&*?_~].*[!,@#$%\^&*?_~])/)) {
        // [verified] at least two special characters
        score += 7;
    }

    // COMBINATIONS
    if (passwd.match(/[a-z]/) && passwd.match(/[A-Z]/)) {
        // [verified] both upper and lower case
        score += 3;
    }

    if (passwd.match(/\d/) && passwd.match(/\D/)) {
        // [verified] both letters and numbers
        score += 4;
    }

    // [Verified] Upper Letters, Lower Letters, numbers and special characters
    if (passwd.match(/[a-z]/) && passwd.match(/[A-Z]/) && passwd.match(/\d/) && passwd.match(/[!,@#$%\^&*?_~]/)) {
        score += 4;
    }

    // the string 'delphix' makes password easier to guess. hence negative marks
    if (passwd.toLowerCase().indexOf('delphix') !== -1) {
        score -= 10;
    }

    // compute final verdict.
    if (score < 16) {
        verdict = dxLocale.gls('password.strength.veryweak');
    } else if (score > 15 && score < 35) {
        verdict = dxLocale.gls('password.strength.weak');
    } else if (score > 34 && score < 45) {
        verdict = dxLocale.gls('password.strength.strong');
    } else {
        verdict = dxLocale.gls('password.strength.verystrong');
    }

    if (passwd.length === 0) {
        verdict = '';
        score = 0;
    }

    return verdict;
}

module.exports = {
    setupPasswordStrengthMeter: setupPasswordStrengthMeter,
    passwordStrengthMonitor: passwordStrengthMonitor
};

},{"dxcore/js/locale.js":17}]},{},[34])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
